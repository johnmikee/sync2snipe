// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGroup user group
//
// swagger:model user_group
type UserGroup struct {

	// criteria
	Criteria []*UserGroupCriteriaItems0 `json:"criteria"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// is notify on change
	IsNotifyOnChange bool `json:"is_notify_on_change,omitempty"`

	// is smart
	// Required: true
	IsSmart *bool `json:"is_smart"`

	// Name of the user group
	// Example: Teachers
	// Required: true
	Name *string `json:"name"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// users
	Users []*UserGroupUsersItems0 `json:"users"`
}

// Validate validates this user group
func (m *UserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSmart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroup) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserGroup) validateIsSmart(formats strfmt.Registry) error {

	if err := validate.Required("is_smart", "body", m.IsSmart); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserGroup) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroup) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user group based on the context it is used
func (m *UserGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroup) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserGroup) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroup) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroup) UnmarshalBinary(b []byte) error {
	var res UserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserGroupCriteriaItems0 user group criteria items0
//
// swagger:model UserGroupCriteriaItems0
type UserGroupCriteriaItems0 struct {

	// criterion
	Criterion *UserGroupCriteriaItems0Criterion `json:"criterion,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this user group criteria items0
func (m *UserGroupCriteriaItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriterion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupCriteriaItems0) validateCriterion(formats strfmt.Registry) error {
	if swag.IsZero(m.Criterion) { // not required
		return nil
	}

	if m.Criterion != nil {
		if err := m.Criterion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("criterion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("criterion")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroupCriteriaItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this user group criteria items0 based on the context it is used
func (m *UserGroupCriteriaItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriterion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupCriteriaItems0) contextValidateCriterion(ctx context.Context, formats strfmt.Registry) error {

	if m.Criterion != nil {

		if swag.IsZero(m.Criterion) { // not required
			return nil
		}

		if err := m.Criterion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("criterion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("criterion")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroupCriteriaItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupCriteriaItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupCriteriaItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupCriteriaItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserGroupCriteriaItems0Criterion user group criteria items0 criterion
//
// swagger:model UserGroupCriteriaItems0Criterion
type UserGroupCriteriaItems0Criterion struct {

	// and or
	// Enum: [and or]
	AndOr string `json:"and_or,omitempty"`

	// closing paren
	ClosingParen *bool `json:"closing_paren,omitempty"`

	// Name of the criteria
	// Example: Email Address
	Name string `json:"name,omitempty"`

	// opening paren
	OpeningParen *bool `json:"opening_paren,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// Operator
	// Example: like
	SearchType string `json:"search_type,omitempty"`

	// value
	// Example: company.com
	Value string `json:"value,omitempty"`
}

// Validate validates this user group criteria items0 criterion
func (m *UserGroupCriteriaItems0Criterion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAndOr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userGroupCriteriaItems0CriterionTypeAndOrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["and","or"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userGroupCriteriaItems0CriterionTypeAndOrPropEnum = append(userGroupCriteriaItems0CriterionTypeAndOrPropEnum, v)
	}
}

const (

	// UserGroupCriteriaItems0CriterionAndOrAnd captures enum value "and"
	UserGroupCriteriaItems0CriterionAndOrAnd string = "and"

	// UserGroupCriteriaItems0CriterionAndOrOr captures enum value "or"
	UserGroupCriteriaItems0CriterionAndOrOr string = "or"
)

// prop value enum
func (m *UserGroupCriteriaItems0Criterion) validateAndOrEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userGroupCriteriaItems0CriterionTypeAndOrPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserGroupCriteriaItems0Criterion) validateAndOr(formats strfmt.Registry) error {
	if swag.IsZero(m.AndOr) { // not required
		return nil
	}

	// value enum
	if err := m.validateAndOrEnum("criterion"+"."+"and_or", "body", m.AndOr); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user group criteria items0 criterion based on context it is used
func (m *UserGroupCriteriaItems0Criterion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupCriteriaItems0Criterion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupCriteriaItems0Criterion) UnmarshalBinary(b []byte) error {
	var res UserGroupCriteriaItems0Criterion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserGroupUsersItems0 user group users items0
//
// swagger:model UserGroupUsersItems0
type UserGroupUsersItems0 struct {

	// size
	Size Size `json:"size,omitempty"`

	// user
	User *UserGroupUsersItems0User `json:"user,omitempty"`
}

// Validate validates this user group users items0
func (m *UserGroupUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupUsersItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

func (m *UserGroupUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user group users items0 based on the context it is used
func (m *UserGroupUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupUsersItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

func (m *UserGroupUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupUsersItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserGroupUsersItems0User user group users items0 user
//
// swagger:model UserGroupUsersItems0User
type UserGroupUsersItems0User struct {

	// email address
	// Example: aharrison@company.com
	EmailAddress string `json:"email_address,omitempty"`

	// full name
	// Example: Ashley Harrison
	FullName string `json:"full_name,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// username
	// Example: AHarrison
	Username string `json:"username,omitempty"`
}

// Validate validates this user group users items0 user
func (m *UserGroupUsersItems0User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user group users items0 user based on context it is used
func (m *UserGroupUsersItems0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupUsersItems0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupUsersItems0User) UnmarshalBinary(b []byte) error {
	var res UserGroupUsersItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
