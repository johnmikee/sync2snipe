// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedUserSearch advanced_user_search
//
// swagger:model advanced_user_search
type AdvancedUserSearch struct {

	// criteria
	Criteria []*AdvancedUserSearchCriteriaItems0 `json:"criteria"`

	// display fields
	DisplayFields []*AdvancedUserSearchDisplayFieldsItems0 `json:"display_fields"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the advanced user search
	// Example: Advanced Search Name
	// Required: true
	Name *string `json:"name"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// users
	Users []*AdvancedUserSearchUsersItems0 `json:"users"`
}

// Validate validates this advanced user search
func (m *AdvancedUserSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearch) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	for i := 0; i < len(m.Criteria); i++ {
		if swag.IsZero(m.Criteria[i]) { // not required
			continue
		}

		if m.Criteria[i] != nil {
			if err := m.Criteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdvancedUserSearch) validateDisplayFields(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayFields) { // not required
		return nil
	}

	for i := 0; i < len(m.DisplayFields); i++ {
		if swag.IsZero(m.DisplayFields[i]) { // not required
			continue
		}

		if m.DisplayFields[i] != nil {
			if err := m.DisplayFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("display_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("display_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdvancedUserSearch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedUserSearch) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearch) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this advanced user search based on the context it is used
func (m *AdvancedUserSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearch) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criteria); i++ {

		if m.Criteria[i] != nil {

			if swag.IsZero(m.Criteria[i]) { // not required
				return nil
			}

			if err := m.Criteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criteria" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdvancedUserSearch) contextValidateDisplayFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisplayFields); i++ {

		if m.DisplayFields[i] != nil {

			if swag.IsZero(m.DisplayFields[i]) { // not required
				return nil
			}

			if err := m.DisplayFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("display_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("display_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdvancedUserSearch) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearch) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearch) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchCriteriaItems0 advanced user search criteria items0
//
// swagger:model AdvancedUserSearchCriteriaItems0
type AdvancedUserSearchCriteriaItems0 struct {

	// criterion
	Criterion *AdvancedUserSearchCriteriaItems0Criterion `json:"criterion,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this advanced user search criteria items0
func (m *AdvancedUserSearchCriteriaItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriterion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchCriteriaItems0) validateCriterion(formats strfmt.Registry) error {
	if swag.IsZero(m.Criterion) { // not required
		return nil
	}

	if m.Criterion != nil {
		if err := m.Criterion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("criterion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("criterion")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearchCriteriaItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this advanced user search criteria items0 based on the context it is used
func (m *AdvancedUserSearchCriteriaItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriterion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchCriteriaItems0) contextValidateCriterion(ctx context.Context, formats strfmt.Registry) error {

	if m.Criterion != nil {

		if swag.IsZero(m.Criterion) { // not required
			return nil
		}

		if err := m.Criterion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("criterion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("criterion")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearchCriteriaItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchCriteriaItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchCriteriaItems0) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchCriteriaItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchCriteriaItems0Criterion advanced user search criteria items0 criterion
//
// swagger:model AdvancedUserSearchCriteriaItems0Criterion
type AdvancedUserSearchCriteriaItems0Criterion struct {

	// and or
	// Enum: [and or]
	AndOr string `json:"and_or,omitempty"`

	// closing paren
	ClosingParen *bool `json:"closing_paren,omitempty"`

	// Name of the criteria
	// Example: Email Address
	Name string `json:"name,omitempty"`

	// opening paren
	OpeningParen *bool `json:"opening_paren,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// Operator
	// Example: like
	SearchType string `json:"search_type,omitempty"`

	// value
	// Example: company.com
	Value string `json:"value,omitempty"`
}

// Validate validates this advanced user search criteria items0 criterion
func (m *AdvancedUserSearchCriteriaItems0Criterion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAndOr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var advancedUserSearchCriteriaItems0CriterionTypeAndOrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["and","or"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		advancedUserSearchCriteriaItems0CriterionTypeAndOrPropEnum = append(advancedUserSearchCriteriaItems0CriterionTypeAndOrPropEnum, v)
	}
}

const (

	// AdvancedUserSearchCriteriaItems0CriterionAndOrAnd captures enum value "and"
	AdvancedUserSearchCriteriaItems0CriterionAndOrAnd string = "and"

	// AdvancedUserSearchCriteriaItems0CriterionAndOrOr captures enum value "or"
	AdvancedUserSearchCriteriaItems0CriterionAndOrOr string = "or"
)

// prop value enum
func (m *AdvancedUserSearchCriteriaItems0Criterion) validateAndOrEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, advancedUserSearchCriteriaItems0CriterionTypeAndOrPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdvancedUserSearchCriteriaItems0Criterion) validateAndOr(formats strfmt.Registry) error {
	if swag.IsZero(m.AndOr) { // not required
		return nil
	}

	// value enum
	if err := m.validateAndOrEnum("criterion"+"."+"and_or", "body", m.AndOr); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this advanced user search criteria items0 criterion based on context it is used
func (m *AdvancedUserSearchCriteriaItems0Criterion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchCriteriaItems0Criterion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchCriteriaItems0Criterion) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchCriteriaItems0Criterion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchDisplayFieldsItems0 advanced user search display fields items0
//
// swagger:model AdvancedUserSearchDisplayFieldsItems0
type AdvancedUserSearchDisplayFieldsItems0 struct {

	// display field
	DisplayField *AdvancedUserSearchDisplayFieldsItems0DisplayField `json:"display_field,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this advanced user search display fields items0
func (m *AdvancedUserSearchDisplayFieldsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchDisplayFieldsItems0) validateDisplayField(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayField) { // not required
		return nil
	}

	if m.DisplayField != nil {
		if err := m.DisplayField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display_field")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearchDisplayFieldsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this advanced user search display fields items0 based on the context it is used
func (m *AdvancedUserSearchDisplayFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplayField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchDisplayFieldsItems0) contextValidateDisplayField(ctx context.Context, formats strfmt.Registry) error {

	if m.DisplayField != nil {

		if swag.IsZero(m.DisplayField) { // not required
			return nil
		}

		if err := m.DisplayField.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display_field")
			}
			return err
		}
	}

	return nil
}

func (m *AdvancedUserSearchDisplayFieldsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchDisplayFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchDisplayFieldsItems0) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchDisplayFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchDisplayFieldsItems0DisplayField advanced user search display fields items0 display field
//
// swagger:model AdvancedUserSearchDisplayFieldsItems0DisplayField
type AdvancedUserSearchDisplayFieldsItems0DisplayField struct {

	// Name of the display field
	// Example: Email Address
	Name string `json:"name,omitempty"`
}

// Validate validates this advanced user search display fields items0 display field
func (m *AdvancedUserSearchDisplayFieldsItems0DisplayField) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this advanced user search display fields items0 display field based on context it is used
func (m *AdvancedUserSearchDisplayFieldsItems0DisplayField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchDisplayFieldsItems0DisplayField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchDisplayFieldsItems0DisplayField) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchDisplayFieldsItems0DisplayField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchUsersItems0 advanced user search users items0
//
// swagger:model AdvancedUserSearchUsersItems0
type AdvancedUserSearchUsersItems0 struct {

	// size
	Size Size `json:"size,omitempty"`

	// user
	User *AdvancedUserSearchUsersItems0User `json:"user,omitempty"`
}

// Validate validates this advanced user search users items0
func (m *AdvancedUserSearchUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchUsersItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

func (m *AdvancedUserSearchUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this advanced user search users items0 based on the context it is used
func (m *AdvancedUserSearchUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedUserSearchUsersItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

func (m *AdvancedUserSearchUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchUsersItems0) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AdvancedUserSearchUsersItems0User advanced user search users items0 user
//
// swagger:model AdvancedUserSearchUsersItems0User
type AdvancedUserSearchUsersItems0User struct {

	// username
	// Example: Ted Johnson
	Username string `json:"Username,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the user
	// Example: Ted Johnson
	Name string `json:"name,omitempty"`
}

// Validate validates this advanced user search users items0 user
func (m *AdvancedUserSearchUsersItems0User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this advanced user search users items0 user based on context it is used
func (m *AdvancedUserSearchUsersItems0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedUserSearchUsersItems0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedUserSearchUsersItems0User) UnmarshalBinary(b []byte) error {
	var res AdvancedUserSearchUsersItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
