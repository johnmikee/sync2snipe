// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Script script
//
// swagger:model script
type Script struct {

	// category
	// Example: None
	Category string `json:"category,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// info
	// Example: Script information
	Info string `json:"info,omitempty"`

	// Name of the script
	// Example: Decrypt Drive
	// Required: true
	Name *string `json:"name"`

	// notes
	// Example: Script to decrypt FV2 encrypted drives
	Notes string `json:"notes,omitempty"`

	// os requirements
	OsRequirements string `json:"os_requirements,omitempty"`

	// parameters
	Parameters *ScriptParameters `json:"parameters,omitempty"`

	// priority
	// Enum: [Before After At Reboot]
	Priority string `json:"priority,omitempty"`

	// script contents
	// Example: echo \"Sample script\
	ScriptContents string `json:"script_contents,omitempty"`

	// script contents encoded
	ScriptContentsEncoded string `json:"script_contents_encoded,omitempty"`
}

// Validate validates this script
func (m *Script) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Script) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

var scriptTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Before","After","At Reboot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scriptTypePriorityPropEnum = append(scriptTypePriorityPropEnum, v)
	}
}

const (

	// ScriptPriorityBefore captures enum value "Before"
	ScriptPriorityBefore string = "Before"

	// ScriptPriorityAfter captures enum value "After"
	ScriptPriorityAfter string = "After"

	// ScriptPriorityAtReboot captures enum value "At Reboot"
	ScriptPriorityAtReboot string = "At Reboot"
)

// prop value enum
func (m *Script) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scriptTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Script) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this script based on the context it is used
func (m *Script) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Script) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {

		if swag.IsZero(m.Parameters) { // not required
			return nil
		}

		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Script) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Script) UnmarshalBinary(b []byte) error {
	var res Script
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScriptParameters script parameters
//
// swagger:model ScriptParameters
type ScriptParameters struct {

	// parameter10
	Parameter10 string `json:"parameter10,omitempty"`

	// parameter11
	Parameter11 string `json:"parameter11,omitempty"`

	// parameter4
	Parameter4 string `json:"parameter4,omitempty"`

	// parameter5
	Parameter5 string `json:"parameter5,omitempty"`

	// parameter6
	Parameter6 string `json:"parameter6,omitempty"`

	// parameter7
	Parameter7 string `json:"parameter7,omitempty"`

	// parameter8
	Parameter8 string `json:"parameter8,omitempty"`

	// parameter9
	Parameter9 string `json:"parameter9,omitempty"`
}

// Validate validates this script parameters
func (m *ScriptParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this script parameters based on context it is used
func (m *ScriptParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptParameters) UnmarshalBinary(b []byte) error {
	var res ScriptParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
