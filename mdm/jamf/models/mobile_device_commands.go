// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MobileDeviceCommands mobile device commands
//
// swagger:model mobile_device_commands
type MobileDeviceCommands []*MobileDeviceCommandsItems0

// Validate validates this mobile device commands
func (m MobileDeviceCommands) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this mobile device commands based on the context it is used
func (m MobileDeviceCommands) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MobileDeviceCommandsItems0 mobile device commands items0
//
// swagger:model MobileDeviceCommandsItems0
type MobileDeviceCommandsItems0 struct {

	// mobile device command
	MobileDeviceCommand *MobileDeviceCommandsItems0MobileDeviceCommand `json:"mobile_device_command,omitempty"`

	// mobile devices
	MobileDevices *MobileDeviceCommandsItems0MobileDevices `json:"mobile_devices,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device commands items0
func (m *MobileDeviceCommandsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDeviceCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandsItems0) validateMobileDeviceCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceCommand) { // not required
		return nil
	}

	if m.MobileDeviceCommand != nil {
		if err := m.MobileDeviceCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_command")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	if m.MobileDevices != nil {
		if err := m.MobileDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device commands items0 based on the context it is used
func (m *MobileDeviceCommandsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDeviceCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandsItems0) contextValidateMobileDeviceCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDeviceCommand != nil {

		if swag.IsZero(m.MobileDeviceCommand) { // not required
			return nil
		}

		if err := m.MobileDeviceCommand.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_command")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevices != nil {

		if swag.IsZero(m.MobileDevices) { // not required
			return nil
		}

		if err := m.MobileDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandsItems0MobileDeviceCommand mobile device commands items0 mobile device command
//
// swagger:model MobileDeviceCommandsItems0MobileDeviceCommand
type MobileDeviceCommandsItems0MobileDeviceCommand struct {

	// command
	// Example: ClearPasscode
	Command string `json:"command,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// profile id
	ProfileID int64 `json:"profile_id,omitempty"`

	// udid
	// Example: be597b7d-d0a4-42e6-ab98-18d1fd0c5640
	Udid string `json:"udid,omitempty"`
}

// Validate validates this mobile device commands items0 mobile device command
func (m *MobileDeviceCommandsItems0MobileDeviceCommand) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device commands items0 mobile device command based on context it is used
func (m *MobileDeviceCommandsItems0MobileDeviceCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDeviceCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDeviceCommand) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandsItems0MobileDeviceCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandsItems0MobileDevices mobile device commands items0 mobile devices
//
// swagger:model MobileDeviceCommandsItems0MobileDevices
type MobileDeviceCommandsItems0MobileDevices struct {

	// mobile device
	MobileDevice *MobileDeviceCommandsItems0MobileDevicesMobileDevice `json:"mobile_device,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device commands items0 mobile devices
func (m *MobileDeviceCommandsItems0MobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandsItems0MobileDevices) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0MobileDevices) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mobile_devices" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mobile_devices" + "." + "size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device commands items0 mobile devices based on the context it is used
func (m *MobileDeviceCommandsItems0MobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandsItems0MobileDevices) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandsItems0MobileDevices) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mobile_devices" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mobile_devices" + "." + "size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDevices) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandsItems0MobileDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandsItems0MobileDevicesMobileDevice mobile device commands items0 mobile devices mobile device
//
// swagger:model MobileDeviceCommandsItems0MobileDevicesMobileDevice
type MobileDeviceCommandsItems0MobileDevicesMobileDevice struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// serial number
	// Example: F19QMFBYFRY7
	SerialNumber string `json:"serial_number,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile device commands items0 mobile devices mobile device
func (m *MobileDeviceCommandsItems0MobileDevicesMobileDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device commands items0 mobile devices mobile device based on context it is used
func (m *MobileDeviceCommandsItems0MobileDevicesMobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDevicesMobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandsItems0MobileDevicesMobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandsItems0MobileDevicesMobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
