// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JssUser jss user
//
// swagger:model jss_user
type JssUser struct {

	// institution
	// Example: Company Name
	Institution string `json:"institution,omitempty"`

	// license type
	// Example: Subscription
	LicenseType string `json:"license_type,omitempty"`

	// privileges
	Privileges []*JssUserPrivilegesItems0 `json:"privileges"`

	// product
	// Example: Casper Suite
	Product string `json:"product,omitempty"`

	// version
	// Example: 10.3.0-t1521825567
	Version string `json:"version,omitempty"`
}

// Validate validates this jss user
func (m *JssUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivileges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JssUser) validatePrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.Privileges) { // not required
		return nil
	}

	for i := 0; i < len(m.Privileges); i++ {
		if swag.IsZero(m.Privileges[i]) { // not required
			continue
		}

		if m.Privileges[i] != nil {
			if err := m.Privileges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this jss user based on the context it is used
func (m *JssUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JssUser) contextValidatePrivileges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Privileges); i++ {

		if m.Privileges[i] != nil {

			if swag.IsZero(m.Privileges[i]) { // not required
				return nil
			}

			if err := m.Privileges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JssUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JssUser) UnmarshalBinary(b []byte) error {
	var res JssUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// JssUserPrivilegesItems0 jss user privileges items0
//
// swagger:model JssUserPrivilegesItems0
type JssUserPrivilegesItems0 struct {

	// privilege
	// Example: Create Provisioning Profiles
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this jss user privileges items0
func (m *JssUserPrivilegesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this jss user privileges items0 based on context it is used
func (m *JssUserPrivilegesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JssUserPrivilegesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JssUserPrivilegesItems0) UnmarshalBinary(b []byte) error {
	var res JssUserPrivilegesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
