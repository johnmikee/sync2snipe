// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model user
type User struct {

	// custom photo url
	CustomPhotoURL string `json:"custom_photo_url,omitempty"`

	// email
	// Example: aharrison@company.com
	Email string `json:"email,omitempty"`

	// email address
	// Example: aharrison@company.com
	EmailAddress string `json:"email_address,omitempty"`

	// enable custom photo url
	EnableCustomPhotoURL bool `json:"enable_custom_photo_url,omitempty"`

	// extension attributes
	ExtensionAttributes []*UserExtensionAttributesItems `json:"extension_attributes"`

	// full name
	// Example: Ashley Harrison
	FullName string `json:"full_name,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// ldap server
	LdapServer *UserLdapServer `json:"ldap_server,omitempty"`

	// links
	Links *UserLinks `json:"links,omitempty"`

	// Name of the user
	// Example: AHarrison
	// Required: true
	Name *string `json:"name"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// position
	// Example: Teachers
	Position string `json:"position,omitempty"`

	// sites
	Sites []*UserSitesItems0 `json:"sites"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSites(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateExtensionAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionAttributes); i++ {
		if swag.IsZero(m.ExtensionAttributes[i]) { // not required
			continue
		}

		if m.ExtensionAttributes[i] != nil {
			if err := m.ExtensionAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateLdapServer(formats strfmt.Registry) error {
	if swag.IsZero(m.LdapServer) { // not required
		return nil
	}

	if m.LdapServer != nil {
		if err := m.LdapServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldap_server")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *User) validateSites(formats strfmt.Registry) error {
	if swag.IsZero(m.Sites) { // not required
		return nil
	}

	for i := 0; i < len(m.Sites); i++ {
		if swag.IsZero(m.Sites[i]) { // not required
			continue
		}

		if m.Sites[i] != nil {
			if err := m.Sites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensionAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateExtensionAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtensionAttributes); i++ {

		if m.ExtensionAttributes[i] != nil {

			if swag.IsZero(m.ExtensionAttributes[i]) { // not required
				return nil
			}

			if err := m.ExtensionAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) contextValidateLdapServer(ctx context.Context, formats strfmt.Registry) error {

	if m.LdapServer != nil {

		if swag.IsZero(m.LdapServer) { // not required
			return nil
		}

		if err := m.LdapServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldap_server")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {

		if swag.IsZero(m.Links) { // not required
			return nil
		}

		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateSites(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sites); i++ {

		if m.Sites[i] != nil {

			if swag.IsZero(m.Sites[i]) { // not required
				return nil
			}

			if err := m.Sites[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserExtensionAttributesItems user extension attributes items0
//
// swagger:model UserExtensionAttributesItems
type UserExtensionAttributesItems struct {

	// extension attribute
	ExtensionAttribute *UserExtensionAttributesItemsExtensionAttribute `json:"extension_attribute,omitempty"`
}

// Validate validates this user extension attributes items0
func (m *UserExtensionAttributesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttribute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserExtensionAttributesItems) validateExtensionAttribute(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionAttribute) { // not required
		return nil
	}

	if m.ExtensionAttribute != nil {
		if err := m.ExtensionAttribute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension_attribute")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user extension attributes items0 based on the context it is used
func (m *UserExtensionAttributesItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensionAttribute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserExtensionAttributesItems) contextValidateExtensionAttribute(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtensionAttribute != nil {

		if swag.IsZero(m.ExtensionAttribute) { // not required
			return nil
		}

		if err := m.ExtensionAttribute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension_attribute")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserExtensionAttributesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserExtensionAttributesItems) UnmarshalBinary(b []byte) error {
	var res UserExtensionAttributesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserExtensionAttributesItemsExtensionAttribute user extension attributes items0 extension attribute
//
// swagger:model UserExtensionAttributesItemsExtensionAttribute
type UserExtensionAttributesItemsExtensionAttribute struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Teacher ID
	Name string `json:"name,omitempty"`

	// type
	// Enum: [String Integer Date]
	Type string `json:"type,omitempty"`

	// value
	// Example: K12
	Value string `json:"value,omitempty"`
}

// Validate validates this user extension attributes items0 extension attribute
func (m *UserExtensionAttributesItemsExtensionAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var UserExtensionAttributesItemsExtensionAttributeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["String","Integer","Date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		UserExtensionAttributesItemsExtensionAttributeTypeTypePropEnum = append(UserExtensionAttributesItemsExtensionAttributeTypeTypePropEnum, v)
	}
}

const (

	// UserExtensionAttributesItemsExtensionAttributeTypeString captures enum value "String"
	UserExtensionAttributesItemsExtensionAttributeTypeString string = "String"

	// UserExtensionAttributesItemsExtensionAttributeTypeInteger captures enum value "Integer"
	UserExtensionAttributesItemsExtensionAttributeTypeInteger string = "Integer"

	// UserExtensionAttributesItemsExtensionAttributeTypeDate captures enum value "Date"
	UserExtensionAttributesItemsExtensionAttributeTypeDate string = "Date"
)

// prop value enum
func (m *UserExtensionAttributesItemsExtensionAttribute) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, UserExtensionAttributesItemsExtensionAttributeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserExtensionAttributesItemsExtensionAttribute) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("extension_attribute"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user extension attributes items0 extension attribute based on context it is used
func (m *UserExtensionAttributesItemsExtensionAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserExtensionAttributesItemsExtensionAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserExtensionAttributesItemsExtensionAttribute) UnmarshalBinary(b []byte) error {
	var res UserExtensionAttributesItemsExtensionAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLdapServer user ldap server
//
// swagger:model UserLdapServer
type UserLdapServer struct {

	// id
	// Example: -1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: None
	Name string `json:"name,omitempty"`
}

// Validate validates this user ldap server
func (m *UserLdapServer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user ldap server based on context it is used
func (m *UserLdapServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserLdapServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLdapServer) UnmarshalBinary(b []byte) error {
	var res UserLdapServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLinks user links
//
// swagger:model UserLinks
type UserLinks struct {

	// computers
	Computers *UserLinksComputers `json:"computers,omitempty"`

	// mobile devices
	MobileDevices *UserLinksMobileDevices `json:"mobile_devices,omitempty"`

	// peripherals
	Peripherals *UserLinksPeripherals `json:"peripherals,omitempty"`

	// total vpp code count
	TotalVppCodeCount int64 `json:"total_vpp_code_count,omitempty"`

	// vpp assignments
	VppAssignments *UserLinksVppAssignments `json:"vpp_assignments,omitempty"`
}

// Validate validates this user links
func (m *UserLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeripherals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVppAssignments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinks) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	if m.Computers != nil {
		if err := m.Computers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "computers")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	if m.MobileDevices != nil {
		if err := m.MobileDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "mobile_devices")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) validatePeripherals(formats strfmt.Registry) error {
	if swag.IsZero(m.Peripherals) { // not required
		return nil
	}

	if m.Peripherals != nil {
		if err := m.Peripherals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "peripherals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "peripherals")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) validateVppAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.VppAssignments) { // not required
		return nil
	}

	if m.VppAssignments != nil {
		if err := m.VppAssignments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "vpp_assignments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "vpp_assignments")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user links based on the context it is used
func (m *UserLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeripherals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVppAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinks) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	if m.Computers != nil {

		if swag.IsZero(m.Computers) { // not required
			return nil
		}

		if err := m.Computers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "computers")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevices != nil {

		if swag.IsZero(m.MobileDevices) { // not required
			return nil
		}

		if err := m.MobileDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "mobile_devices")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) contextValidatePeripherals(ctx context.Context, formats strfmt.Registry) error {

	if m.Peripherals != nil {

		if swag.IsZero(m.Peripherals) { // not required
			return nil
		}

		if err := m.Peripherals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "peripherals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "peripherals")
			}
			return err
		}
	}

	return nil
}

func (m *UserLinks) contextValidateVppAssignments(ctx context.Context, formats strfmt.Registry) error {

	if m.VppAssignments != nil {

		if swag.IsZero(m.VppAssignments) { // not required
			return nil
		}

		if err := m.VppAssignments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "vpp_assignments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "vpp_assignments")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLinks) UnmarshalBinary(b []byte) error {
	var res UserLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLinksComputers user links computers
//
// swagger:model UserLinksComputers
type UserLinksComputers struct {

	// computer
	Computer *IDName `json:"computer,omitempty"`
}

// Validate validates this user links computers
func (m *UserLinksComputers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksComputers) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "computers" + "." + "computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "computers" + "." + "computer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user links computers based on the context it is used
func (m *UserLinksComputers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksComputers) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "computers" + "." + "computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "computers" + "." + "computer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLinksComputers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLinksComputers) UnmarshalBinary(b []byte) error {
	var res UserLinksComputers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLinksMobileDevices user links mobile devices
//
// swagger:model UserLinksMobileDevices
type UserLinksMobileDevices struct {

	// mobile device
	MobileDevice *IDName `json:"mobile_device,omitempty"`
}

// Validate validates this user links mobile devices
func (m *UserLinksMobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksMobileDevices) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user links mobile devices based on the context it is used
func (m *UserLinksMobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksMobileDevices) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLinksMobileDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLinksMobileDevices) UnmarshalBinary(b []byte) error {
	var res UserLinksMobileDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLinksPeripherals user links peripherals
//
// swagger:model UserLinksPeripherals
type UserLinksPeripherals struct {

	// peripheral
	Peripheral *IDName `json:"peripheral,omitempty"`
}

// Validate validates this user links peripherals
func (m *UserLinksPeripherals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeripheral(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksPeripherals) validatePeripheral(formats strfmt.Registry) error {
	if swag.IsZero(m.Peripheral) { // not required
		return nil
	}

	if m.Peripheral != nil {
		if err := m.Peripheral.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "peripherals" + "." + "peripheral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "peripherals" + "." + "peripheral")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user links peripherals based on the context it is used
func (m *UserLinksPeripherals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeripheral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksPeripherals) contextValidatePeripheral(ctx context.Context, formats strfmt.Registry) error {

	if m.Peripheral != nil {

		if swag.IsZero(m.Peripheral) { // not required
			return nil
		}

		if err := m.Peripheral.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "peripherals" + "." + "peripheral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "peripherals" + "." + "peripheral")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLinksPeripherals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLinksPeripherals) UnmarshalBinary(b []byte) error {
	var res UserLinksPeripherals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserLinksVppAssignments user links vpp assignments
//
// swagger:model UserLinksVppAssignments
type UserLinksVppAssignments struct {

	// vpp assignment
	VppAssignment *IDName `json:"vpp_assignment,omitempty"`
}

// Validate validates this user links vpp assignments
func (m *UserLinksVppAssignments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVppAssignment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksVppAssignments) validateVppAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.VppAssignment) { // not required
		return nil
	}

	if m.VppAssignment != nil {
		if err := m.VppAssignment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "vpp_assignments" + "." + "vpp_assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "vpp_assignments" + "." + "vpp_assignment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user links vpp assignments based on the context it is used
func (m *UserLinksVppAssignments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVppAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLinksVppAssignments) contextValidateVppAssignment(ctx context.Context, formats strfmt.Registry) error {

	if m.VppAssignment != nil {

		if swag.IsZero(m.VppAssignment) { // not required
			return nil
		}

		if err := m.VppAssignment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links" + "." + "vpp_assignments" + "." + "vpp_assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links" + "." + "vpp_assignments" + "." + "vpp_assignment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLinksVppAssignments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLinksVppAssignments) UnmarshalBinary(b []byte) error {
	var res UserLinksVppAssignments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserSitesItems0 user sites items0
//
// swagger:model UserSitesItems0
type UserSitesItems0 struct {

	// site
	Site *SiteObject `json:"site,omitempty"`
}

// Validate validates this user sites items0
func (m *UserSitesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSitesItems0) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user sites items0 based on the context it is used
func (m *UserSitesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSitesItems0) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserSitesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSitesItems0) UnmarshalBinary(b []byte) error {
	var res UserSitesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
