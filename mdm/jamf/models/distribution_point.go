// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistributionPoint distribution point
//
// swagger:model distribution_point
type DistributionPoint struct {

	// connection type
	// Enum: [SMB AFP]
	ConnectionType string `json:"connection_type,omitempty"`

	// Path to the share
	// Example: CasperShare
	Context string `json:"context,omitempty"`

	// enable load balancing
	EnableLoadBalancing *bool `json:"enable_load_balancing,omitempty"`

	// failover point
	FailoverPoint string `json:"failover_point,omitempty"`

	// failover point url
	FailoverPointURL string `json:"failover_point_url,omitempty"`

	// http downloads enabled
	// Example: true
	HTTPDownloadsEnabled *bool `json:"http_downloads_enabled,omitempty"`

	// Password for basic authentication
	HTTPPassword string `json:"http_password,omitempty"`

	// URL to download packages from
	// Example: http://ny.company.com/CasperShare
	HTTPURL string `json:"http_url,omitempty"`

	// Username to authenticate with for basic authentication
	// Example: casperinstall
	HTTPUsername string `json:"http_username,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// IP address or hostname of distribution point
	// Example: ny.company.com
	IPAddress string `json:"ip_address,omitempty"`

	// Only one share can be set as master
	IsMaster *bool `json:"is_master,omitempty"`

	// local path
	LocalPath string `json:"local_path,omitempty"`

	// Name of the distribution point
	// Example: New York Share
	// Required: true
	Name *string `json:"name"`

	// no authentication required
	NoAuthenticationRequired *bool `json:"no_authentication_required,omitempty"`

	// password
	// Example: password
	Password string `json:"password,omitempty"`

	// port
	// Example: 80
	Port int64 `json:"port,omitempty"`

	// protocol
	// Enum: [http https]
	Protocol string `json:"protocol,omitempty"`

	// Password for the read only account
	// Example: password
	ReadOnlyPassword string `json:"read_only_password,omitempty"`

	// Account with read only privileges to the share
	// Example: casperinstall
	// Required: true
	ReadOnlyUsername *string `json:"read_only_username"`

	// Password for the read/write account
	// Example: password
	ReadWritePassword string `json:"read_write_password,omitempty"`

	// Account with read/write privileges to the share
	// Example: casperwrite
	// Required: true
	ReadWriteUsername *string `json:"read_write_username"`

	// Name of the share
	// Example: Caspershare
	// Required: true
	ShareName *string `json:"share_name"`

	// share port
	// Example: 139
	SharePort int64 `json:"share_port,omitempty"`

	// ssh username
	// Example: username
	SSHUsername string `json:"ssh_username,omitempty"`

	// username password required
	UsernamePasswordRequired *bool `json:"username_password_required,omitempty"`

	// Workgroup or domain of the accounts that have access to the share (SMB only)
	// Example: COMPANY
	WorkgroupOrDomain string `json:"workgroup_or_domain,omitempty"`
}

// Validate validates this distribution point
func (m *DistributionPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnlyUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadWriteUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var distributionPointTypeConnectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMB","AFP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		distributionPointTypeConnectionTypePropEnum = append(distributionPointTypeConnectionTypePropEnum, v)
	}
}

const (

	// DistributionPointConnectionTypeSMB captures enum value "SMB"
	DistributionPointConnectionTypeSMB string = "SMB"

	// DistributionPointConnectionTypeAFP captures enum value "AFP"
	DistributionPointConnectionTypeAFP string = "AFP"
)

// prop value enum
func (m *DistributionPoint) validateConnectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, distributionPointTypeConnectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DistributionPoint) validateConnectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionTypeEnum("connection_type", "body", m.ConnectionType); err != nil {
		return err
	}

	return nil
}

func (m *DistributionPoint) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var distributionPointTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		distributionPointTypeProtocolPropEnum = append(distributionPointTypeProtocolPropEnum, v)
	}
}

const (

	// DistributionPointProtocolHTTP captures enum value "http"
	DistributionPointProtocolHTTP string = "http"

	// DistributionPointProtocolHTTPS captures enum value "https"
	DistributionPointProtocolHTTPS string = "https"
)

// prop value enum
func (m *DistributionPoint) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, distributionPointTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DistributionPoint) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *DistributionPoint) validateReadOnlyUsername(formats strfmt.Registry) error {

	if err := validate.Required("read_only_username", "body", m.ReadOnlyUsername); err != nil {
		return err
	}

	return nil
}

func (m *DistributionPoint) validateReadWriteUsername(formats strfmt.Registry) error {

	if err := validate.Required("read_write_username", "body", m.ReadWriteUsername); err != nil {
		return err
	}

	return nil
}

func (m *DistributionPoint) validateShareName(formats strfmt.Registry) error {

	if err := validate.Required("share_name", "body", m.ShareName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this distribution point based on context it is used
func (m *DistributionPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DistributionPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistributionPoint) UnmarshalBinary(b []byte) error {
	var res DistributionPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
