// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Computer computer
//
// swagger:model computer
type Computer struct {

	// certificates
	Certificates []*ComputerCertificatesItems0 `json:"certificates"`

	// configuration profiles
	ConfigurationProfiles []*ComputerConfigurationProfilesItems0 `json:"configuration_profiles"`

	// extension attributes
	ExtensionAttributes []*ComputerExtensionAttributesItems `json:"extension_attributes"`

	// general
	General *ComputerGeneral `json:"general,omitempty"`

	// groups accounts
	GroupsAccounts *ComputerGroupsAccounts `json:"groups_accounts,omitempty"`

	// hardware
	Hardware *ComputerHardware `json:"hardware,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// peripherals
	Peripherals *ComputerPeripherals `json:"peripherals,omitempty"`

	// purchasing
	Purchasing *Purchasing `json:"purchasing,omitempty"`

	// security
	Security *ComputerSecurity `json:"security,omitempty"`

	// software
	Software *ComputerSoftware `json:"software,omitempty"`
}

// Validate validates this computer
func (m *Computer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupsAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeripherals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftware(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Computer) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) validateConfigurationProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurationProfiles); i++ {
		if swag.IsZero(m.ConfigurationProfiles[i]) { // not required
			continue
		}

		if m.ConfigurationProfiles[i] != nil {
			if err := m.ConfigurationProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) validateExtensionAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionAttributes); i++ {
		if swag.IsZero(m.ExtensionAttributes[i]) { // not required
			continue
		}

		if m.ExtensionAttributes[i] != nil {
			if err := m.ExtensionAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validateGroupsAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupsAccounts) { // not required
		return nil
	}

	if m.GroupsAccounts != nil {
		if err := m.GroupsAccounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups_accounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups_accounts")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validateHardware(formats strfmt.Registry) error {
	if swag.IsZero(m.Hardware) { // not required
		return nil
	}

	if m.Hardware != nil {
		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validatePeripherals(formats strfmt.Registry) error {
	if swag.IsZero(m.Peripherals) { // not required
		return nil
	}

	if m.Peripherals != nil {
		if err := m.Peripherals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripherals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripherals")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validatePurchasing(formats strfmt.Registry) error {
	if swag.IsZero(m.Purchasing) { // not required
		return nil
	}

	if m.Purchasing != nil {
		if err := m.Purchasing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.Security) { // not required
		return nil
	}

	if m.Security != nil {
		if err := m.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) validateSoftware(formats strfmt.Registry) error {
	if swag.IsZero(m.Software) { // not required
		return nil
	}

	if m.Software != nil {
		if err := m.Software.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer based on the context it is used
func (m *Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigurationProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensionAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupsAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHardware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeripherals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurchasing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Computer) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) contextValidateConfigurationProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigurationProfiles); i++ {

		if m.ConfigurationProfiles[i] != nil {

			if swag.IsZero(m.ConfigurationProfiles[i]) { // not required
				return nil
			}

			if err := m.ConfigurationProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) contextValidateExtensionAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtensionAttributes); i++ {

		if m.ExtensionAttributes[i] != nil {

			if swag.IsZero(m.ExtensionAttributes[i]) { // not required
				return nil
			}

			if err := m.ExtensionAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Computer) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidateGroupsAccounts(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupsAccounts != nil {

		if swag.IsZero(m.GroupsAccounts) { // not required
			return nil
		}

		if err := m.GroupsAccounts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups_accounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups_accounts")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidateHardware(ctx context.Context, formats strfmt.Registry) error {

	if m.Hardware != nil {

		if swag.IsZero(m.Hardware) { // not required
			return nil
		}

		if err := m.Hardware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidatePeripherals(ctx context.Context, formats strfmt.Registry) error {

	if m.Peripherals != nil {

		if swag.IsZero(m.Peripherals) { // not required
			return nil
		}

		if err := m.Peripherals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripherals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripherals")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidatePurchasing(ctx context.Context, formats strfmt.Registry) error {

	if m.Purchasing != nil {

		if swag.IsZero(m.Purchasing) { // not required
			return nil
		}

		if err := m.Purchasing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security != nil {

		if swag.IsZero(m.Security) { // not required
			return nil
		}

		if err := m.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *Computer) contextValidateSoftware(ctx context.Context, formats strfmt.Registry) error {

	if m.Software != nil {

		if swag.IsZero(m.Software) { // not required
			return nil
		}

		if err := m.Software.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Computer) UnmarshalBinary(b []byte) error {
	var res Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCertificatesItems0 computer certificates items0
//
// swagger:model ComputerCertificatesItems0
type ComputerCertificatesItems0 struct {

	// certificate
	Certificate *ComputerCertificatesItems0Certificate `json:"certificate,omitempty"`
}

// Validate validates this computer certificates items0
func (m *ComputerCertificatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCertificatesItems0) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer certificates items0 based on the context it is used
func (m *ComputerCertificatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCertificatesItems0) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCertificatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCertificatesItems0) UnmarshalBinary(b []byte) error {
	var res ComputerCertificatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCertificatesItems0Certificate computer certificates items0 certificate
//
// swagger:model ComputerCertificatesItems0Certificate
type ComputerCertificatesItems0Certificate struct {

	// common name
	// Example: JSS Built-in Certificate Authority
	CommonName string `json:"common_name,omitempty"`

	// expires epoch
	// Example: 1709345569000
	ExpiresEpoch int64 `json:"expires_epoch,omitempty"`

	// expires utc
	// Example: 2024-03-02T02:12:49.000+0000
	ExpiresUtc string `json:"expires_utc,omitempty"`

	// identify
	// Example: false
	Identify bool `json:"identify,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this computer certificates items0 certificate
func (m *ComputerCertificatesItems0Certificate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer certificates items0 certificate based on context it is used
func (m *ComputerCertificatesItems0Certificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCertificatesItems0Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCertificatesItems0Certificate) UnmarshalBinary(b []byte) error {
	var res ComputerCertificatesItems0Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerConfigurationProfilesItems0 computer configuration profiles items0
//
// swagger:model ComputerConfigurationProfilesItems0
type ComputerConfigurationProfilesItems0 struct {

	// configuration profile
	ConfigurationProfile *ComputerConfigurationProfilesItems0ConfigurationProfile `json:"configuration_profile,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer configuration profiles items0
func (m *ComputerConfigurationProfilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerConfigurationProfilesItems0) validateConfigurationProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationProfile) { // not required
		return nil
	}

	if m.ConfigurationProfile != nil {
		if err := m.ConfigurationProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration_profile")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerConfigurationProfilesItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer configuration profiles items0 based on the context it is used
func (m *ComputerConfigurationProfilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurationProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerConfigurationProfilesItems0) contextValidateConfigurationProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigurationProfile != nil {

		if swag.IsZero(m.ConfigurationProfile) { // not required
			return nil
		}

		if err := m.ConfigurationProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration_profile")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerConfigurationProfilesItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerConfigurationProfilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerConfigurationProfilesItems0) UnmarshalBinary(b []byte) error {
	var res ComputerConfigurationProfilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerConfigurationProfilesItems0ConfigurationProfile computer configuration profiles items0 configuration profile
//
// swagger:model ComputerConfigurationProfilesItems0ConfigurationProfile
type ComputerConfigurationProfilesItems0ConfigurationProfile struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// is removable
	// Example: false
	IsRemovable bool `json:"is_removable,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this computer configuration profiles items0 configuration profile
func (m *ComputerConfigurationProfilesItems0ConfigurationProfile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer configuration profiles items0 configuration profile based on context it is used
func (m *ComputerConfigurationProfilesItems0ConfigurationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerConfigurationProfilesItems0ConfigurationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerConfigurationProfilesItems0ConfigurationProfile) UnmarshalBinary(b []byte) error {
	var res ComputerConfigurationProfilesItems0ConfigurationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerExtensionAttributesItems computer extension attributes items0
//
// swagger:model ComputerExtensionAttributesItems
type ComputerExtensionAttributesItems struct {

	// extension attribute
	ExtensionAttribute *ComputerExtensionAttributesItemsExtensionAttribute `json:"extension_attribute,omitempty"`
}

// Validate validates this computer extension attributes items0
func (m *ComputerExtensionAttributesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionAttribute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerExtensionAttributesItems) validateExtensionAttribute(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionAttribute) { // not required
		return nil
	}

	if m.ExtensionAttribute != nil {
		if err := m.ExtensionAttribute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension_attribute")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer extension attributes items0 based on the context it is used
func (m *ComputerExtensionAttributesItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensionAttribute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerExtensionAttributesItems) contextValidateExtensionAttribute(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtensionAttribute != nil {

		if swag.IsZero(m.ExtensionAttribute) { // not required
			return nil
		}

		if err := m.ExtensionAttribute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension_attribute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension_attribute")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerExtensionAttributesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerExtensionAttributesItems) UnmarshalBinary(b []byte) error {
	var res ComputerExtensionAttributesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerExtensionAttributesItemsExtensionAttribute computer extension attributes items0 extension attribute
//
// swagger:model ComputerExtensionAttributesItemsExtensionAttribute
type ComputerExtensionAttributesItemsExtensionAttribute struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Battery Cycle Count
	Name string `json:"name,omitempty"`

	// type
	// Example: String
	Type string `json:"type,omitempty"`

	// value
	// Example: 191
	Value string `json:"value,omitempty"`
}

// Validate validates this computer extension attributes items0 extension attribute
func (m *ComputerExtensionAttributesItemsExtensionAttribute) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer extension attributes items0 extension attribute based on context it is used
func (m *ComputerExtensionAttributesItemsExtensionAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerExtensionAttributesItemsExtensionAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerExtensionAttributesItemsExtensionAttribute) UnmarshalBinary(b []byte) error {
	var res ComputerExtensionAttributesItemsExtensionAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGeneral computer general
//
// swagger:model ComputerGeneral
type ComputerGeneral struct {

	// alt mac address
	// Example: E0:AC:CB:97:36:G4
	AltMacAddress string `json:"alt_mac_address,omitempty"`

	// alt network adapter type
	// Example: IEEE80211
	AltNetworkAdapterType string `json:"alt_network_adapter_type,omitempty"`

	// asset tag
	AssetTag string `json:"asset_tag,omitempty"`

	// barcode 1
	Barcode1 string `json:"barcode_1,omitempty"`

	// barcode 2
	Barcode2 string `json:"barcode_2,omitempty"`

	// distribution point
	DistributionPoint string `json:"distribution_point,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// initial entry date
	// Example: 2017-07-07 18:37:04
	InitialEntryDate string `json:"initial_entry_date,omitempty"`

	// initial entry date epoch
	// Example: 1499470624555
	InitialEntryDateEpoch int64 `json:"initial_entry_date_epoch,omitempty"`

	// initial entry date utc
	// Example: 2017-07-07T18:37:04.555-0500
	InitialEntryDateUtc string `json:"initial_entry_date_utc,omitempty"`

	// ip address
	// Example: 10.1.1.1
	IPAddress string `json:"ip_address,omitempty"`

	// itunes store account is active
	ItunesStoreAccountIsActive bool `json:"itunes_store_account_is_active,omitempty"`

	// jamf version
	// Example: 9.99.0-t1494340586
	JamfVersion string `json:"jamf_version,omitempty"`

	// last cloud backup date epoch
	// Example: 1499470624555
	LastCloudBackupDateEpoch int64 `json:"last_cloud_backup_date_epoch,omitempty"`

	// last cloud backup date utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastCloudBackupDateUtc string `json:"last_cloud_backup_date_utc,omitempty"`

	// last contact time
	// Example: 2017-07-07 18:37:04
	LastContactTime string `json:"last_contact_time,omitempty"`

	// last contact time epoch
	// Example: 1499470624555
	LastContactTimeEpoch int64 `json:"last_contact_time_epoch,omitempty"`

	// last contact time utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastContactTimeUtc string `json:"last_contact_time_utc,omitempty"`

	// last enrolled date epoch
	// Example: 1499470624555
	LastEnrolledDateEpoch int64 `json:"last_enrolled_date_epoch,omitempty"`

	// last enrolled date utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastEnrolledDateUtc string `json:"last_enrolled_date_utc,omitempty"`

	// last reported ip
	// Example: 192.0.0.1
	LastReportedIP string `json:"last_reported_ip,omitempty"`

	// mac address
	// Example: E0:AC:CB:97:36:G4
	MacAddress string `json:"mac_address,omitempty"`

	// management status
	ManagementStatus *ComputerGeneralManagementStatus `json:"management_status,omitempty"`

	// mdm capable
	MdmCapable bool `json:"mdm_capable,omitempty"`

	// mdm capable users
	MdmCapableUsers *ComputerGeneralMdmCapableUsers `json:"mdm_capable_users,omitempty"`

	// Name of computer
	// Example: Admins iMac
	Name string `json:"name,omitempty"`

	// network adapter type
	// Example: Ethernet
	NetworkAdapterType string `json:"network_adapter_type,omitempty"`

	// platform
	// Example: Mac
	Platform string `json:"platform,omitempty"`

	// remote management
	RemoteManagement *ComputerGeneralRemoteManagement `json:"remote_management,omitempty"`

	// report date
	// Example: 2017-07-07 18:37:04
	ReportDate string `json:"report_date,omitempty"`

	// report date epoch
	// Example: 1499470624555
	ReportDateEpoch int64 `json:"report_date_epoch,omitempty"`

	// report date utc
	// Example: 2017-07-07T18:37:04.555-0500
	ReportDateUtc string `json:"report_date_utc,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	SerialNumber string `json:"serial_number,omitempty"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// sus
	Sus string `json:"sus,omitempty"`

	// udid
	// Example: 55900BDC-347C-58B1-D249-F32244B11D30
	Udid string `json:"udid,omitempty"`
}

// Validate validates this computer general
func (m *ComputerGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagementStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdmCapableUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGeneral) validateManagementStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementStatus) { // not required
		return nil
	}

	if m.ManagementStatus != nil {
		if err := m.ManagementStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "management_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "management_status")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) validateMdmCapableUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.MdmCapableUsers) { // not required
		return nil
	}

	if m.MdmCapableUsers != nil {
		if err := m.MdmCapableUsers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "mdm_capable_users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "mdm_capable_users")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) validateRemoteManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteManagement) { // not required
		return nil
	}

	if m.RemoteManagement != nil {
		if err := m.RemoteManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "remote_management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "remote_management")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer general based on the context it is used
func (m *ComputerGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagementStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMdmCapableUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGeneral) contextValidateManagementStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementStatus != nil {

		if swag.IsZero(m.ManagementStatus) { // not required
			return nil
		}

		if err := m.ManagementStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "management_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "management_status")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) contextValidateMdmCapableUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.MdmCapableUsers != nil {

		if swag.IsZero(m.MdmCapableUsers) { // not required
			return nil
		}

		if err := m.MdmCapableUsers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "mdm_capable_users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "mdm_capable_users")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) contextValidateRemoteManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteManagement != nil {

		if swag.IsZero(m.RemoteManagement) { // not required
			return nil
		}

		if err := m.RemoteManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "remote_management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "remote_management")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerGeneral) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGeneral) UnmarshalBinary(b []byte) error {
	var res ComputerGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGeneralManagementStatus computer general management status
//
// swagger:model ComputerGeneralManagementStatus
type ComputerGeneralManagementStatus struct {

	// enrolled via dep
	EnrolledViaDep bool `json:"enrolled_via_dep,omitempty"`

	// user approved enrollment
	UserApprovedEnrollment bool `json:"user_approved_enrollment,omitempty"`

	// user approved mdm
	UserApprovedMdm bool `json:"user_approved_mdm,omitempty"`
}

// Validate validates this computer general management status
func (m *ComputerGeneralManagementStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer general management status based on context it is used
func (m *ComputerGeneralManagementStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGeneralManagementStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGeneralManagementStatus) UnmarshalBinary(b []byte) error {
	var res ComputerGeneralManagementStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGeneralMdmCapableUsers computer general mdm capable users
//
// swagger:model ComputerGeneralMdmCapableUsers
type ComputerGeneralMdmCapableUsers struct {

	// mdm capable user
	MdmCapableUser string `json:"mdm_capable_user,omitempty"`
}

// Validate validates this computer general mdm capable users
func (m *ComputerGeneralMdmCapableUsers) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer general mdm capable users based on context it is used
func (m *ComputerGeneralMdmCapableUsers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGeneralMdmCapableUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGeneralMdmCapableUsers) UnmarshalBinary(b []byte) error {
	var res ComputerGeneralMdmCapableUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGeneralRemoteManagement computer general remote management
//
// swagger:model ComputerGeneralRemoteManagement
type ComputerGeneralRemoteManagement struct {

	// managed
	Managed bool `json:"managed,omitempty"`

	// management username deprecated 10 48
	// Example: deprecated
	ManagementUsernameDeprecated1048 string `json:"management_username deprecated=\"10.48\",omitempty"`
}

// Validate validates this computer general remote management
func (m *ComputerGeneralRemoteManagement) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer general remote management based on context it is used
func (m *ComputerGeneralRemoteManagement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGeneralRemoteManagement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGeneralRemoteManagement) UnmarshalBinary(b []byte) error {
	var res ComputerGeneralRemoteManagement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGroupsAccounts computer groups accounts
//
// swagger:model ComputerGroupsAccounts
type ComputerGroupsAccounts struct {

	// computer group memberships
	ComputerGroupMemberships []*ComputerGroupsAccountsComputerGroupMembershipsItems0 `json:"computer_group_memberships"`

	// local accounts
	LocalAccounts []*ComputerGroupsAccountsLocalAccountsItems0 `json:"local_accounts"`
}

// Validate validates this computer groups accounts
func (m *ComputerGroupsAccounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerGroupMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalAccounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGroupsAccounts) validateComputerGroupMemberships(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerGroupMemberships) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputerGroupMemberships); i++ {
		if swag.IsZero(m.ComputerGroupMemberships[i]) { // not required
			continue
		}

		if m.ComputerGroupMemberships[i] != nil {
			if err := m.ComputerGroupMemberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups_accounts" + "." + "computer_group_memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups_accounts" + "." + "computer_group_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerGroupsAccounts) validateLocalAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.LocalAccounts); i++ {
		if swag.IsZero(m.LocalAccounts[i]) { // not required
			continue
		}

		if m.LocalAccounts[i] != nil {
			if err := m.LocalAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups_accounts" + "." + "local_accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups_accounts" + "." + "local_accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer groups accounts based on the context it is used
func (m *ComputerGroupsAccounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputerGroupMemberships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGroupsAccounts) contextValidateComputerGroupMemberships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ComputerGroupMemberships); i++ {

		if m.ComputerGroupMemberships[i] != nil {

			if swag.IsZero(m.ComputerGroupMemberships[i]) { // not required
				return nil
			}

			if err := m.ComputerGroupMemberships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups_accounts" + "." + "computer_group_memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups_accounts" + "." + "computer_group_memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerGroupsAccounts) contextValidateLocalAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LocalAccounts); i++ {

		if m.LocalAccounts[i] != nil {

			if swag.IsZero(m.LocalAccounts[i]) { // not required
				return nil
			}

			if err := m.LocalAccounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups_accounts" + "." + "local_accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups_accounts" + "." + "local_accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGroupsAccounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGroupsAccounts) UnmarshalBinary(b []byte) error {
	var res ComputerGroupsAccounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGroupsAccountsComputerGroupMembershipsItems0 computer groups accounts computer group memberships items0
//
// swagger:model ComputerGroupsAccountsComputerGroupMembershipsItems0
type ComputerGroupsAccountsComputerGroupMembershipsItems0 struct {

	// group
	// Example: All Managed Clients
	Group string `json:"group,omitempty"`
}

// Validate validates this computer groups accounts computer group memberships items0
func (m *ComputerGroupsAccountsComputerGroupMembershipsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer groups accounts computer group memberships items0 based on context it is used
func (m *ComputerGroupsAccountsComputerGroupMembershipsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGroupsAccountsComputerGroupMembershipsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGroupsAccountsComputerGroupMembershipsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerGroupsAccountsComputerGroupMembershipsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGroupsAccountsLocalAccountsItems0 computer groups accounts local accounts items0
//
// swagger:model ComputerGroupsAccountsLocalAccountsItems0
type ComputerGroupsAccountsLocalAccountsItems0 struct {

	// user
	User *ComputerGroupsAccountsLocalAccountsItems0User `json:"user,omitempty"`
}

// Validate validates this computer groups accounts local accounts items0
func (m *ComputerGroupsAccountsLocalAccountsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGroupsAccountsLocalAccountsItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer groups accounts local accounts items0 based on the context it is used
func (m *ComputerGroupsAccountsLocalAccountsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerGroupsAccountsLocalAccountsItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGroupsAccountsLocalAccountsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGroupsAccountsLocalAccountsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerGroupsAccountsLocalAccountsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerGroupsAccountsLocalAccountsItems0User computer groups accounts local accounts items0 user
//
// swagger:model ComputerGroupsAccountsLocalAccountsItems0User
type ComputerGroupsAccountsLocalAccountsItems0User struct {

	// administrator
	// Example: false
	Administrator bool `json:"administrator,omitempty"`

	// filevault enabled
	// Example: false
	FilevaultEnabled bool `json:"filevault_enabled,omitempty"`

	// home
	// Example: /var/virusmails
	Home string `json:"home,omitempty"`

	// home size
	// Example: -1MB
	HomeSize string `json:"home_size,omitempty"`

	// home size mb
	// Example: -1
	HomeSizeMb string `json:"home_size_mb,omitempty"`

	// name
	// Example: _amavisd
	Name string `json:"name,omitempty"`

	// realname
	// Example: AMaViS Daemon
	Realname string `json:"realname,omitempty"`

	// uid
	// Example: 83
	UID string `json:"uid,omitempty"`
}

// Validate validates this computer groups accounts local accounts items0 user
func (m *ComputerGroupsAccountsLocalAccountsItems0User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer groups accounts local accounts items0 user based on context it is used
func (m *ComputerGroupsAccountsLocalAccountsItems0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerGroupsAccountsLocalAccountsItems0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerGroupsAccountsLocalAccountsItems0User) UnmarshalBinary(b []byte) error {
	var res ComputerGroupsAccountsLocalAccountsItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardware computer hardware
//
// swagger:model ComputerHardware
type ComputerHardware struct {

	// active directory status
	// Example: AD.company.com
	ActiveDirectoryStatus string `json:"active_directory_status,omitempty"`

	// available ram slots
	// Example: 0
	AvailableRAMSlots int64 `json:"available_ram_slots,omitempty"`

	// battery capacity
	// Example: 90
	BatteryCapacity int64 `json:"battery_capacity,omitempty"`

	// ble capable
	BleCapable bool `json:"ble_capable,omitempty"`

	// boot rom
	// Example: MBP111.0142.B00
	BootRom string `json:"boot_rom,omitempty"`

	// bus speed
	// Example: 0
	BusSpeed int64 `json:"bus_speed,omitempty"`

	// bus speed mhz
	// Example: 0
	BusSpeedMhz int64 `json:"bus_speed_mhz,omitempty"`

	// cache size
	// Example: 3072
	CacheSize int64 `json:"cache_size,omitempty"`

	// cache size kb
	// Example: 3072
	CacheSizeKb int64 `json:"cache_size_kb,omitempty"`

	// disk encryption configuration
	// Example: Individual and Institutional Encryption
	DiskEncryptionConfiguration string `json:"disk_encryption_configuration,omitempty"`

	// filevault 2 users
	Filevault2Users []*ComputerHardwareFilevault2UsersItems0 `json:"filevault_2_users"`

	// gatekeeper status
	// Example: App Store and identified developers
	GatekeeperStatus string `json:"gatekeeper_status,omitempty"`

	// institutional recovery key
	// Example: Not Present
	InstitutionalRecoveryKey string `json:"institutional_recovery_key,omitempty"`

	// make
	// Example: Apple
	Make string `json:"make,omitempty"`

	// mapped printers
	MappedPrinters []*ComputerHardwareMappedPrintersItems0 `json:"mapped_printers"`

	// master password set
	MasterPasswordSet bool `json:"master_password_set,omitempty"`

	// model
	// Example: 13-inch Retina MacBook Pro (Late 2013)
	Model string `json:"model,omitempty"`

	// model identifier
	// Example: MacBookPro11,1
	ModelIdentifier string `json:"model_identifier,omitempty"`

	// nic speed
	// Example: n/a
	NicSpeed string `json:"nic_speed,omitempty"`

	// number cores
	// Example: 2
	NumberCores int64 `json:"number_cores,omitempty"`

	// number processors
	// Example: 1
	NumberProcessors int64 `json:"number_processors,omitempty"`

	// optical drive
	OpticalDrive string `json:"optical_drive,omitempty"`

	// os build
	// Example: 17C88
	OsBuild string `json:"os_build,omitempty"`

	// os name
	// Example: Mac OS X
	OsName string `json:"os_name,omitempty"`

	// os version
	// Example: 10.13.2
	OsVersion string `json:"os_version,omitempty"`

	// processor architechture
	// Example: x86_64
	ProcessorArchitechture string `json:"processor_architechture,omitempty"`

	// processor speed
	// Example: 2600
	ProcessorSpeed string `json:"processor_speed,omitempty"`

	// processor speed mhz
	// Example: 2600
	ProcessorSpeedMhz string `json:"processor_speed_mhz,omitempty"`

	// processor type
	// Example: Intel Core i5
	ProcessorType string `json:"processor_type,omitempty"`

	// service pack
	ServicePack string `json:"service_pack,omitempty"`

	// sip status
	// Enum: [Enabled Disabled]
	SipStatus string `json:"sip_status,omitempty"`

	// smc version
	// Example: 2.16f68
	SmcVersion string `json:"smc_version,omitempty"`

	// storage
	Storage []*ComputerHardwareStorageItems0 `json:"storage"`

	// total ram
	// Example: 16384
	TotalRAM int64 `json:"total_ram,omitempty"`

	// total ram mb
	// Example: 16384
	TotalRAMMb int64 `json:"total_ram_mb,omitempty"`

	// xprotect version
	// Example: 2098
	XprotectVersion string `json:"xprotect_version,omitempty"`
}

// Validate validates this computer hardware
func (m *ComputerHardware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilevault2Users(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappedPrinters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSipStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardware) validateFilevault2Users(formats strfmt.Registry) error {
	if swag.IsZero(m.Filevault2Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Filevault2Users); i++ {
		if swag.IsZero(m.Filevault2Users[i]) { // not required
			continue
		}

		if m.Filevault2Users[i] != nil {
			if err := m.Filevault2Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "filevault_2_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "filevault_2_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerHardware) validateMappedPrinters(formats strfmt.Registry) error {
	if swag.IsZero(m.MappedPrinters) { // not required
		return nil
	}

	for i := 0; i < len(m.MappedPrinters); i++ {
		if swag.IsZero(m.MappedPrinters[i]) { // not required
			continue
		}

		if m.MappedPrinters[i] != nil {
			if err := m.MappedPrinters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "mapped_printers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "mapped_printers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var computerHardwareTypeSipStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computerHardwareTypeSipStatusPropEnum = append(computerHardwareTypeSipStatusPropEnum, v)
	}
}

const (

	// ComputerHardwareSipStatusEnabled captures enum value "Enabled"
	ComputerHardwareSipStatusEnabled string = "Enabled"

	// ComputerHardwareSipStatusDisabled captures enum value "Disabled"
	ComputerHardwareSipStatusDisabled string = "Disabled"
)

// prop value enum
func (m *ComputerHardware) validateSipStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, computerHardwareTypeSipStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ComputerHardware) validateSipStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SipStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSipStatusEnum("hardware"+"."+"sip_status", "body", m.SipStatus); err != nil {
		return err
	}

	return nil
}

func (m *ComputerHardware) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	for i := 0; i < len(m.Storage); i++ {
		if swag.IsZero(m.Storage[i]) { // not required
			continue
		}

		if m.Storage[i] != nil {
			if err := m.Storage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "storage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "storage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer hardware based on the context it is used
func (m *ComputerHardware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilevault2Users(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappedPrinters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardware) contextValidateFilevault2Users(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Filevault2Users); i++ {

		if m.Filevault2Users[i] != nil {

			if swag.IsZero(m.Filevault2Users[i]) { // not required
				return nil
			}

			if err := m.Filevault2Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "filevault_2_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "filevault_2_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerHardware) contextValidateMappedPrinters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MappedPrinters); i++ {

		if m.MappedPrinters[i] != nil {

			if swag.IsZero(m.MappedPrinters[i]) { // not required
				return nil
			}

			if err := m.MappedPrinters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "mapped_printers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "mapped_printers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerHardware) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Storage); i++ {

		if m.Storage[i] != nil {

			if swag.IsZero(m.Storage[i]) { // not required
				return nil
			}

			if err := m.Storage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardware" + "." + "storage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hardware" + "." + "storage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardware) UnmarshalBinary(b []byte) error {
	var res ComputerHardware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareFilevault2UsersItems0 computer hardware filevault2 users items0
//
// swagger:model ComputerHardwareFilevault2UsersItems0
type ComputerHardwareFilevault2UsersItems0 struct {

	// user
	// Example: admin
	User string `json:"user,omitempty"`
}

// Validate validates this computer hardware filevault2 users items0
func (m *ComputerHardwareFilevault2UsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer hardware filevault2 users items0 based on context it is used
func (m *ComputerHardwareFilevault2UsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareFilevault2UsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareFilevault2UsersItems0) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareFilevault2UsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareMappedPrintersItems0 computer hardware mapped printers items0
//
// swagger:model ComputerHardwareMappedPrintersItems0
type ComputerHardwareMappedPrintersItems0 struct {

	// printer
	Printer *ComputerHardwareMappedPrintersItems0Printer `json:"printer,omitempty"`
}

// Validate validates this computer hardware mapped printers items0
func (m *ComputerHardwareMappedPrintersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrinter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareMappedPrintersItems0) validatePrinter(formats strfmt.Registry) error {
	if swag.IsZero(m.Printer) { // not required
		return nil
	}

	if m.Printer != nil {
		if err := m.Printer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("printer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("printer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer hardware mapped printers items0 based on the context it is used
func (m *ComputerHardwareMappedPrintersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrinter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareMappedPrintersItems0) contextValidatePrinter(ctx context.Context, formats strfmt.Registry) error {

	if m.Printer != nil {

		if swag.IsZero(m.Printer) { // not required
			return nil
		}

		if err := m.Printer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("printer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("printer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareMappedPrintersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareMappedPrintersItems0) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareMappedPrintersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareMappedPrintersItems0Printer computer hardware mapped printers items0 printer
//
// swagger:model ComputerHardwareMappedPrintersItems0Printer
type ComputerHardwareMappedPrintersItems0Printer struct {

	// location
	// Example: 2nd Floor / Stairwell
	Location string `json:"location,omitempty"`

	// name
	// Example: 2nd Floor HP
	Name string `json:"name,omitempty"`

	// type
	// Example: HP LaserJet 500 color MFP M575
	Type string `json:"type,omitempty"`

	// uri
	// Example: lpd://10.11.182.21/
	URI string `json:"uri,omitempty"`
}

// Validate validates this computer hardware mapped printers items0 printer
func (m *ComputerHardwareMappedPrintersItems0Printer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer hardware mapped printers items0 printer based on context it is used
func (m *ComputerHardwareMappedPrintersItems0Printer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareMappedPrintersItems0Printer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareMappedPrintersItems0Printer) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareMappedPrintersItems0Printer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareStorageItems0 computer hardware storage items0
//
// swagger:model ComputerHardwareStorageItems0
type ComputerHardwareStorageItems0 struct {

	// device
	Device *ComputerHardwareStorageItems0Device `json:"device,omitempty"`
}

// Validate validates this computer hardware storage items0
func (m *ComputerHardwareStorageItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareStorageItems0) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer hardware storage items0 based on the context it is used
func (m *ComputerHardwareStorageItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareStorageItems0) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {

		if swag.IsZero(m.Device) { // not required
			return nil
		}

		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareStorageItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareStorageItems0Device computer hardware storage items0 device
//
// swagger:model ComputerHardwareStorageItems0Device
type ComputerHardwareStorageItems0Device struct {

	// connection type
	// Example: NO
	ConnectionType string `json:"connection_type,omitempty"`

	// disk
	// Example: disk0
	Disk string `json:"disk,omitempty"`

	// drive capacity mb
	// Example: 512287
	DriveCapacityMb int64 `json:"drive_capacity_mb,omitempty"`

	// model
	// Example: Apple SSD SM0512F
	Model string `json:"model,omitempty"`

	// partition
	Partition []*ComputerHardwareStorageItems0DevicePartitionItems0 `json:"partition"`

	// revision
	// Example: UXM2JA1Q
	Revision string `json:"revision,omitempty"`

	// serial number
	// Example: S1K5NYADC12934
	SerialNumber string `json:"serial_number,omitempty"`

	// size
	// Example: 512287
	Size int64 `json:"size,omitempty"`

	// smart status
	// Example: Verified
	SmartStatus string `json:"smart_status,omitempty"`
}

// Validate validates this computer hardware storage items0 device
func (m *ComputerHardwareStorageItems0Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareStorageItems0Device) validatePartition(formats strfmt.Registry) error {
	if swag.IsZero(m.Partition) { // not required
		return nil
	}

	for i := 0; i < len(m.Partition); i++ {
		if swag.IsZero(m.Partition[i]) { // not required
			continue
		}

		if m.Partition[i] != nil {
			if err := m.Partition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device" + "." + "partition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("device" + "." + "partition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer hardware storage items0 device based on the context it is used
func (m *ComputerHardwareStorageItems0Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePartition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerHardwareStorageItems0Device) contextValidatePartition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Partition); i++ {

		if m.Partition[i] != nil {

			if swag.IsZero(m.Partition[i]) { // not required
				return nil
			}

			if err := m.Partition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device" + "." + "partition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("device" + "." + "partition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0Device) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareStorageItems0Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerHardwareStorageItems0DevicePartitionItems0 computer hardware storage items0 device partition items0
//
// swagger:model ComputerHardwareStorageItems0DevicePartitionItems0
type ComputerHardwareStorageItems0DevicePartitionItems0 struct {

	// boot drive available mb
	// Example: 425198
	BootDriveAvailableMb int64 `json:"boot_drive_available_mb,omitempty"`

	// filevault2 percent
	// Example: 100
	Filevault2Percent int64 `json:"filevault2_percent,omitempty"`

	// filevault2 status
	// Example: Encrypted
	Filevault2Status string `json:"filevault2_status,omitempty"`

	// filevault percent
	// Example: 100
	FilevaultPercent int64 `json:"filevault_percent,omitempty"`

	// filevault status
	// Example: Encrypted
	FilevaultStatus string `json:"filevault_status,omitempty"`

	// lv UUID
	LvUUID string `json:"lvUUID,omitempty"`

	// lvg UUID
	LvgUUID string `json:"lvgUUID,omitempty"`

	// name
	// Example: Macintosh HD
	Name string `json:"name,omitempty"`

	// partition capacity mb
	// Example: 94128
	PartitionCapacityMb int64 `json:"partition_capacity_mb,omitempty"`

	// percentage full
	// Example: 17
	PercentageFull int64 `json:"percentage_full,omitempty"`

	// pv UUID
	PvUUID string `json:"pvUUID,omitempty"`

	// size
	// Example: 94128
	Size int64 `json:"size,omitempty"`

	// type
	// Example: boot
	Type string `json:"type,omitempty"`
}

// Validate validates this computer hardware storage items0 device partition items0
func (m *ComputerHardwareStorageItems0DevicePartitionItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer hardware storage items0 device partition items0 based on context it is used
func (m *ComputerHardwareStorageItems0DevicePartitionItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0DevicePartitionItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerHardwareStorageItems0DevicePartitionItems0) UnmarshalBinary(b []byte) error {
	var res ComputerHardwareStorageItems0DevicePartitionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripherals computer peripherals
//
// swagger:model ComputerPeripherals
type ComputerPeripherals struct {

	// peripherals
	Peripherals []*ComputerPeripheralsPeripheralsItems0 `json:"peripherals"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer peripherals
func (m *ComputerPeripherals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeripherals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripherals) validatePeripherals(formats strfmt.Registry) error {
	if swag.IsZero(m.Peripherals) { // not required
		return nil
	}

	for i := 0; i < len(m.Peripherals); i++ {
		if swag.IsZero(m.Peripherals[i]) { // not required
			continue
		}

		if m.Peripherals[i] != nil {
			if err := m.Peripherals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peripherals" + "." + "peripherals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("peripherals" + "." + "peripherals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerPeripherals) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("peripherals" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("peripherals" + "." + "size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer peripherals based on the context it is used
func (m *ComputerPeripherals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeripherals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripherals) contextValidatePeripherals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Peripherals); i++ {

		if m.Peripherals[i] != nil {

			if swag.IsZero(m.Peripherals[i]) { // not required
				return nil
			}

			if err := m.Peripherals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("peripherals" + "." + "peripherals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("peripherals" + "." + "peripherals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerPeripherals) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("peripherals" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("peripherals" + "." + "size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripherals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripherals) UnmarshalBinary(b []byte) error {
	var res ComputerPeripherals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripheralsPeripheralsItems0 computer peripherals peripherals items0
//
// swagger:model ComputerPeripheralsPeripheralsItems0
type ComputerPeripheralsPeripheralsItems0 struct {

	// attachments
	Attachments []*ComputerPeripheralsPeripheralsItems0AttachmentsItems0 `json:"attachments"`

	// peripheral
	Peripheral *ComputerPeripheralsPeripheralsItems0Peripheral `json:"peripheral,omitempty"`

	// purchasing
	Purchasing *Purchasing `json:"purchasing,omitempty"`
}

// Validate validates this computer peripherals peripherals items0
func (m *ComputerPeripheralsPeripheralsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeripheral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) validateAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) validatePeripheral(formats strfmt.Registry) error {
	if swag.IsZero(m.Peripheral) { // not required
		return nil
	}

	if m.Peripheral != nil {
		if err := m.Peripheral.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) validatePurchasing(formats strfmt.Registry) error {
	if swag.IsZero(m.Purchasing) { // not required
		return nil
	}

	if m.Purchasing != nil {
		if err := m.Purchasing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer peripherals peripherals items0 based on the context it is used
func (m *ComputerPeripheralsPeripheralsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeripheral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurchasing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) contextValidateAttachments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attachments); i++ {

		if m.Attachments[i] != nil {

			if swag.IsZero(m.Attachments[i]) { // not required
				return nil
			}

			if err := m.Attachments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) contextValidatePeripheral(ctx context.Context, formats strfmt.Registry) error {

	if m.Peripheral != nil {

		if swag.IsZero(m.Peripheral) { // not required
			return nil
		}

		if err := m.Peripheral.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0) contextValidatePurchasing(ctx context.Context, formats strfmt.Registry) error {

	if m.Purchasing != nil {

		if swag.IsZero(m.Purchasing) { // not required
			return nil
		}

		if err := m.Purchasing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerPeripheralsPeripheralsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripheralsPeripheralsItems0AttachmentsItems0 computer peripherals peripherals items0 attachments items0
//
// swagger:model ComputerPeripheralsPeripheralsItems0AttachmentsItems0
type ComputerPeripheralsPeripheralsItems0AttachmentsItems0 struct {

	// attachment
	Attachment *Attachment `json:"attachment,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer peripherals peripherals items0 attachments items0
func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) validateAttachment(formats strfmt.Registry) error {
	if swag.IsZero(m.Attachment) { // not required
		return nil
	}

	if m.Attachment != nil {
		if err := m.Attachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer peripherals peripherals items0 attachments items0 based on the context it is used
func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) contextValidateAttachment(ctx context.Context, formats strfmt.Registry) error {

	if m.Attachment != nil {

		if swag.IsZero(m.Attachment) { // not required
			return nil
		}

		if err := m.Attachment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachment")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0AttachmentsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerPeripheralsPeripheralsItems0AttachmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripheralsPeripheralsItems0Peripheral computer peripherals peripherals items0 peripheral
//
// swagger:model ComputerPeripheralsPeripheralsItems0Peripheral
type ComputerPeripheralsPeripheralsItems0Peripheral struct {

	// bar code 1
	BarCode1 string `json:"bar_code_1,omitempty"`

	// bar code 2
	BarCode2 string `json:"bar_code_2,omitempty"`

	// fields
	Fields *ComputerPeripheralsPeripheralsItems0PeripheralFields `json:"fields,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the peripheral type
	// Example: Peripheral Type Name
	Type string `json:"type,omitempty"`
}

// Validate validates this computer peripherals peripherals items0 peripheral
func (m *ComputerPeripheralsPeripheralsItems0Peripheral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0Peripheral) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	if m.Fields != nil {
		if err := m.Fields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer peripherals peripherals items0 peripheral based on the context it is used
func (m *ComputerPeripheralsPeripheralsItems0Peripheral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0Peripheral) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	if m.Fields != nil {

		if swag.IsZero(m.Fields) { // not required
			return nil
		}

		if err := m.Fields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0Peripheral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0Peripheral) UnmarshalBinary(b []byte) error {
	var res ComputerPeripheralsPeripheralsItems0Peripheral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripheralsPeripheralsItems0PeripheralFields computer peripherals peripherals items0 peripheral fields
//
// swagger:model ComputerPeripheralsPeripheralsItems0PeripheralFields
type ComputerPeripheralsPeripheralsItems0PeripheralFields struct {

	// field
	Field *ComputerPeripheralsPeripheralsItems0PeripheralFieldsField `json:"field,omitempty"`
}

// Validate validates this computer peripherals peripherals items0 peripheral fields
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	if m.Field != nil {
		if err := m.Field.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral" + "." + "fields" + "." + "field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral" + "." + "fields" + "." + "field")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer peripherals peripherals items0 peripheral fields based on the context it is used
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if m.Field != nil {

		if swag.IsZero(m.Field) { // not required
			return nil
		}

		if err := m.Field.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peripheral" + "." + "fields" + "." + "field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peripheral" + "." + "fields" + "." + "field")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFields) UnmarshalBinary(b []byte) error {
	var res ComputerPeripheralsPeripheralsItems0PeripheralFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerPeripheralsPeripheralsItems0PeripheralFieldsField computer peripherals peripherals items0 peripheral fields field
//
// swagger:model ComputerPeripheralsPeripheralsItems0PeripheralFieldsField
type ComputerPeripheralsPeripheralsItems0PeripheralFieldsField struct {

	// name
	// Example: Peripheral Field Name
	Name string `json:"name,omitempty"`

	// value
	// Example: Value for menu type
	Value string `json:"value,omitempty"`
}

// Validate validates this computer peripherals peripherals items0 peripheral fields field
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFieldsField) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer peripherals peripherals items0 peripheral fields field based on context it is used
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFieldsField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFieldsField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerPeripheralsPeripheralsItems0PeripheralFieldsField) UnmarshalBinary(b []byte) error {
	var res ComputerPeripheralsPeripheralsItems0PeripheralFieldsField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSecurity computer security
//
// swagger:model ComputerSecurity
type ComputerSecurity struct {

	// activation lock
	// Example: false
	ActivationLock bool `json:"activation_lock,omitempty"`

	// external boot level
	// Example: unknown
	ExternalBootLevel string `json:"external_boot_level,omitempty"`

	// firewall enabled
	// Example: false
	FirewallEnabled bool `json:"firewall_enabled,omitempty"`

	// recovery lock enabled
	// Example: false
	RecoveryLockEnabled bool `json:"recovery_lock_enabled,omitempty"`

	// secure boot level
	// Example: unknown
	SecureBootLevel string `json:"secure_boot_level,omitempty"`
}

// Validate validates this computer security
func (m *ComputerSecurity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer security based on context it is used
func (m *ComputerSecurity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSecurity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSecurity) UnmarshalBinary(b []byte) error {
	var res ComputerSecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftware computer software
//
// swagger:model ComputerSoftware
type ComputerSoftware struct {

	// applications
	Applications []*ComputerSoftwareApplicationsItems0 `json:"applications"`

	// available software updates
	AvailableSoftwareUpdates []*ComputerSoftwareAvailableSoftwareUpdatesItems0 `json:"available_software_updates"`

	// available updates
	AvailableUpdates []*ComputerSoftwareAvailableUpdatesItems0 `json:"available_updates"`

	// cached by casper
	CachedByCasper []*ComputerSoftwareCachedByCasperItems0 `json:"cached_by_casper"`

	// fonts
	Fonts []*ComputerSoftwareFontsItems0 `json:"fonts"`

	// installed by casper
	InstalledByCasper []*ComputerSoftwareInstalledByCasperItems0 `json:"installed_by_casper"`

	// installed by installer swu
	InstalledByInstallerSwu []*ComputerSoftwareInstalledByInstallerSwuItems0 `json:"installed_by_installer_swu"`

	// licensed software
	LicensedSoftware []*ComputerSoftwareLicensedSoftwareItems0 `json:"licensed_software"`

	// plugins
	Plugins []*ComputerSoftwarePluginsItems0 `json:"plugins"`

	// running services
	RunningServices []*ComputerSoftwareRunningServicesItems0 `json:"running_services"`

	// unix executables
	UnixExecutables string `json:"unix_executables,omitempty"`
}

// Validate validates this computer software
func (m *ComputerSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableSoftwareUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableUpdates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCachedByCasper(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFonts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledByCasper(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledByInstallerSwu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicensedSoftware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftware) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateAvailableSoftwareUpdates(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableSoftwareUpdates) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableSoftwareUpdates); i++ {
		if swag.IsZero(m.AvailableSoftwareUpdates[i]) { // not required
			continue
		}

		if m.AvailableSoftwareUpdates[i] != nil {
			if err := m.AvailableSoftwareUpdates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "available_software_updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "available_software_updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateAvailableUpdates(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableUpdates) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableUpdates); i++ {
		if swag.IsZero(m.AvailableUpdates[i]) { // not required
			continue
		}

		if m.AvailableUpdates[i] != nil {
			if err := m.AvailableUpdates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "available_updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "available_updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateCachedByCasper(formats strfmt.Registry) error {
	if swag.IsZero(m.CachedByCasper) { // not required
		return nil
	}

	for i := 0; i < len(m.CachedByCasper); i++ {
		if swag.IsZero(m.CachedByCasper[i]) { // not required
			continue
		}

		if m.CachedByCasper[i] != nil {
			if err := m.CachedByCasper[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "cached_by_casper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "cached_by_casper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateFonts(formats strfmt.Registry) error {
	if swag.IsZero(m.Fonts) { // not required
		return nil
	}

	for i := 0; i < len(m.Fonts); i++ {
		if swag.IsZero(m.Fonts[i]) { // not required
			continue
		}

		if m.Fonts[i] != nil {
			if err := m.Fonts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "fonts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "fonts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateInstalledByCasper(formats strfmt.Registry) error {
	if swag.IsZero(m.InstalledByCasper) { // not required
		return nil
	}

	for i := 0; i < len(m.InstalledByCasper); i++ {
		if swag.IsZero(m.InstalledByCasper[i]) { // not required
			continue
		}

		if m.InstalledByCasper[i] != nil {
			if err := m.InstalledByCasper[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "installed_by_casper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "installed_by_casper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateInstalledByInstallerSwu(formats strfmt.Registry) error {
	if swag.IsZero(m.InstalledByInstallerSwu) { // not required
		return nil
	}

	for i := 0; i < len(m.InstalledByInstallerSwu); i++ {
		if swag.IsZero(m.InstalledByInstallerSwu[i]) { // not required
			continue
		}

		if m.InstalledByInstallerSwu[i] != nil {
			if err := m.InstalledByInstallerSwu[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "installed_by_installer_swu" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "installed_by_installer_swu" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateLicensedSoftware(formats strfmt.Registry) error {
	if swag.IsZero(m.LicensedSoftware) { // not required
		return nil
	}

	for i := 0; i < len(m.LicensedSoftware); i++ {
		if swag.IsZero(m.LicensedSoftware[i]) { // not required
			continue
		}

		if m.LicensedSoftware[i] != nil {
			if err := m.LicensedSoftware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "licensed_software" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "licensed_software" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) validateRunningServices(formats strfmt.Registry) error {
	if swag.IsZero(m.RunningServices) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningServices); i++ {
		if swag.IsZero(m.RunningServices[i]) { // not required
			continue
		}

		if m.RunningServices[i] != nil {
			if err := m.RunningServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "running_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "running_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer software based on the context it is used
func (m *ComputerSoftware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableSoftwareUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableUpdates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCachedByCasper(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFonts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstalledByCasper(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstalledByInstallerSwu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicensedSoftware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunningServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftware) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {

			if swag.IsZero(m.Applications[i]) { // not required
				return nil
			}

			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateAvailableSoftwareUpdates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailableSoftwareUpdates); i++ {

		if m.AvailableSoftwareUpdates[i] != nil {

			if swag.IsZero(m.AvailableSoftwareUpdates[i]) { // not required
				return nil
			}

			if err := m.AvailableSoftwareUpdates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "available_software_updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "available_software_updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateAvailableUpdates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailableUpdates); i++ {

		if m.AvailableUpdates[i] != nil {

			if swag.IsZero(m.AvailableUpdates[i]) { // not required
				return nil
			}

			if err := m.AvailableUpdates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "available_updates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "available_updates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateCachedByCasper(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CachedByCasper); i++ {

		if m.CachedByCasper[i] != nil {

			if swag.IsZero(m.CachedByCasper[i]) { // not required
				return nil
			}

			if err := m.CachedByCasper[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "cached_by_casper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "cached_by_casper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateFonts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fonts); i++ {

		if m.Fonts[i] != nil {

			if swag.IsZero(m.Fonts[i]) { // not required
				return nil
			}

			if err := m.Fonts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "fonts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "fonts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateInstalledByCasper(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstalledByCasper); i++ {

		if m.InstalledByCasper[i] != nil {

			if swag.IsZero(m.InstalledByCasper[i]) { // not required
				return nil
			}

			if err := m.InstalledByCasper[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "installed_by_casper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "installed_by_casper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateInstalledByInstallerSwu(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstalledByInstallerSwu); i++ {

		if m.InstalledByInstallerSwu[i] != nil {

			if swag.IsZero(m.InstalledByInstallerSwu[i]) { // not required
				return nil
			}

			if err := m.InstalledByInstallerSwu[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "installed_by_installer_swu" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "installed_by_installer_swu" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateLicensedSoftware(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicensedSoftware); i++ {

		if m.LicensedSoftware[i] != nil {

			if swag.IsZero(m.LicensedSoftware[i]) { // not required
				return nil
			}

			if err := m.LicensedSoftware[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "licensed_software" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "licensed_software" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {

			if swag.IsZero(m.Plugins[i]) { // not required
				return nil
			}

			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComputerSoftware) contextValidateRunningServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RunningServices); i++ {

		if m.RunningServices[i] != nil {

			if swag.IsZero(m.RunningServices[i]) { // not required
				return nil
			}

			if err := m.RunningServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("software" + "." + "running_services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("software" + "." + "running_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftware) UnmarshalBinary(b []byte) error {
	var res ComputerSoftware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareApplicationsItems0 computer software applications items0
//
// swagger:model ComputerSoftwareApplicationsItems0
type ComputerSoftwareApplicationsItems0 struct {

	// application
	Application *ComputerSoftwareApplicationsItems0Application `json:"application,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer software applications items0
func (m *ComputerSoftwareApplicationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareApplicationsItems0) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwareApplicationsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer software applications items0 based on the context it is used
func (m *ComputerSoftwareApplicationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareApplicationsItems0) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {

		if swag.IsZero(m.Application) { // not required
			return nil
		}

		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwareApplicationsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareApplicationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareApplicationsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareApplicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareApplicationsItems0Application computer software applications items0 application
//
// swagger:model ComputerSoftwareApplicationsItems0Application
type ComputerSoftwareApplicationsItems0Application struct {

	// name
	// Example: Activity Monitor.app
	Name string `json:"name,omitempty"`

	// path
	// Example: /Applications/Utilities/Activity Monitor.app
	Path string `json:"path,omitempty"`

	// version
	// Example: 10.13
	Version string `json:"version,omitempty"`
}

// Validate validates this computer software applications items0 application
func (m *ComputerSoftwareApplicationsItems0Application) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software applications items0 application based on context it is used
func (m *ComputerSoftwareApplicationsItems0Application) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareApplicationsItems0Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareApplicationsItems0Application) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareApplicationsItems0Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareAvailableSoftwareUpdatesItems0 computer software available software updates items0
//
// swagger:model ComputerSoftwareAvailableSoftwareUpdatesItems0
type ComputerSoftwareAvailableSoftwareUpdatesItems0 struct {

	// name
	// Example: iTunesXPatch-12.7.3
	Name string `json:"name,omitempty"`
}

// Validate validates this computer software available software updates items0
func (m *ComputerSoftwareAvailableSoftwareUpdatesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software available software updates items0 based on context it is used
func (m *ComputerSoftwareAvailableSoftwareUpdatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareAvailableSoftwareUpdatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareAvailableSoftwareUpdatesItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareAvailableSoftwareUpdatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareAvailableUpdatesItems0 computer software available updates items0
//
// swagger:model ComputerSoftwareAvailableUpdatesItems0
type ComputerSoftwareAvailableUpdatesItems0 struct {

	// update
	Update *ComputerSoftwareAvailableUpdatesItems0Update `json:"update,omitempty"`
}

// Validate validates this computer software available updates items0
func (m *ComputerSoftwareAvailableUpdatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareAvailableUpdatesItems0) validateUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.Update) { // not required
		return nil
	}

	if m.Update != nil {
		if err := m.Update.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer software available updates items0 based on the context it is used
func (m *ComputerSoftwareAvailableUpdatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareAvailableUpdatesItems0) contextValidateUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.Update != nil {

		if swag.IsZero(m.Update) { // not required
			return nil
		}

		if err := m.Update.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareAvailableUpdatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareAvailableUpdatesItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareAvailableUpdatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareAvailableUpdatesItems0Update computer software available updates items0 update
//
// swagger:model ComputerSoftwareAvailableUpdatesItems0Update
type ComputerSoftwareAvailableUpdatesItems0Update struct {

	// name
	// Example: iTunes
	Name string `json:"name,omitempty"`

	// package name
	// Example: iTunesXPatch-12.7.3
	PackageName string `json:"package_name,omitempty"`

	// version
	// Example: 12.7.3
	Version string `json:"version,omitempty"`
}

// Validate validates this computer software available updates items0 update
func (m *ComputerSoftwareAvailableUpdatesItems0Update) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software available updates items0 update based on context it is used
func (m *ComputerSoftwareAvailableUpdatesItems0Update) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareAvailableUpdatesItems0Update) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareAvailableUpdatesItems0Update) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareAvailableUpdatesItems0Update
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareCachedByCasperItems0 computer software cached by casper items0
//
// swagger:model ComputerSoftwareCachedByCasperItems0
type ComputerSoftwareCachedByCasperItems0 struct {

	// package
	// Example: GoogleChrome.pkg
	Package string `json:"package,omitempty"`
}

// Validate validates this computer software cached by casper items0
func (m *ComputerSoftwareCachedByCasperItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software cached by casper items0 based on context it is used
func (m *ComputerSoftwareCachedByCasperItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareCachedByCasperItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareCachedByCasperItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareCachedByCasperItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareFontsItems0 computer software fonts items0
//
// swagger:model ComputerSoftwareFontsItems0
type ComputerSoftwareFontsItems0 struct {

	// font
	Font *ComputerSoftwareFontsItems0Font `json:"font,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer software fonts items0
func (m *ComputerSoftwareFontsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFont(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareFontsItems0) validateFont(formats strfmt.Registry) error {
	if swag.IsZero(m.Font) { // not required
		return nil
	}

	if m.Font != nil {
		if err := m.Font.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("font")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("font")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwareFontsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer software fonts items0 based on the context it is used
func (m *ComputerSoftwareFontsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFont(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwareFontsItems0) contextValidateFont(ctx context.Context, formats strfmt.Registry) error {

	if m.Font != nil {

		if swag.IsZero(m.Font) { // not required
			return nil
		}

		if err := m.Font.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("font")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("font")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwareFontsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareFontsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareFontsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareFontsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareFontsItems0Font computer software fonts items0 font
//
// swagger:model ComputerSoftwareFontsItems0Font
type ComputerSoftwareFontsItems0Font struct {

	// name
	// Example: Al Nile.ttc
	Name string `json:"name,omitempty"`

	// path
	// Example: /Library/Fonts/Al Nile.ttc
	Path string `json:"path,omitempty"`

	// version
	// Example: n/a
	Version string `json:"version,omitempty"`
}

// Validate validates this computer software fonts items0 font
func (m *ComputerSoftwareFontsItems0Font) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software fonts items0 font based on context it is used
func (m *ComputerSoftwareFontsItems0Font) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareFontsItems0Font) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareFontsItems0Font) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareFontsItems0Font
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareInstalledByCasperItems0 computer software installed by casper items0
//
// swagger:model ComputerSoftwareInstalledByCasperItems0
type ComputerSoftwareInstalledByCasperItems0 struct {

	// package
	// Example: FireFox.pkg
	Package string `json:"package,omitempty"`
}

// Validate validates this computer software installed by casper items0
func (m *ComputerSoftwareInstalledByCasperItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software installed by casper items0 based on context it is used
func (m *ComputerSoftwareInstalledByCasperItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareInstalledByCasperItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareInstalledByCasperItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareInstalledByCasperItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareInstalledByInstallerSwuItems0 computer software installed by installer swu items0
//
// swagger:model ComputerSoftwareInstalledByInstallerSwuItems0
type ComputerSoftwareInstalledByInstallerSwuItems0 struct {

	// package
	// Example: com.apple.pkg.iTunesX
	Package string `json:"package,omitempty"`
}

// Validate validates this computer software installed by installer swu items0
func (m *ComputerSoftwareInstalledByInstallerSwuItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software installed by installer swu items0 based on context it is used
func (m *ComputerSoftwareInstalledByInstallerSwuItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareInstalledByInstallerSwuItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareInstalledByInstallerSwuItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareInstalledByInstallerSwuItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareLicensedSoftwareItems0 computer software licensed software items0
//
// swagger:model ComputerSoftwareLicensedSoftwareItems0
type ComputerSoftwareLicensedSoftwareItems0 struct {

	// name
	// Example: Adobe CS5
	Name string `json:"name,omitempty"`
}

// Validate validates this computer software licensed software items0
func (m *ComputerSoftwareLicensedSoftwareItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software licensed software items0 based on context it is used
func (m *ComputerSoftwareLicensedSoftwareItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareLicensedSoftwareItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareLicensedSoftwareItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareLicensedSoftwareItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwarePluginsItems0 computer software plugins items0
//
// swagger:model ComputerSoftwarePluginsItems0
type ComputerSoftwarePluginsItems0 struct {

	// plugin
	Plugin *ComputerSoftwarePluginsItems0Plugin `json:"plugin,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer software plugins items0
func (m *ComputerSoftwarePluginsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwarePluginsItems0) validatePlugin(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugin) { // not required
		return nil
	}

	if m.Plugin != nil {
		if err := m.Plugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwarePluginsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer software plugins items0 based on the context it is used
func (m *ComputerSoftwarePluginsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlugin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerSoftwarePluginsItems0) contextValidatePlugin(ctx context.Context, formats strfmt.Registry) error {

	if m.Plugin != nil {

		if swag.IsZero(m.Plugin) { // not required
			return nil
		}

		if err := m.Plugin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerSoftwarePluginsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwarePluginsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwarePluginsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwarePluginsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwarePluginsItems0Plugin computer software plugins items0 plugin
//
// swagger:model ComputerSoftwarePluginsItems0Plugin
type ComputerSoftwarePluginsItems0Plugin struct {

	// name
	// Example: QuickTime Plugin.plugin
	Name string `json:"name,omitempty"`

	// path
	// Example: /Library/Internet Plug-Ins/Disabled Plug-Ins/QuickTime Plugin.plugin
	Path string `json:"path,omitempty"`

	// version
	// Example: 7.7.3
	Version string `json:"version,omitempty"`
}

// Validate validates this computer software plugins items0 plugin
func (m *ComputerSoftwarePluginsItems0Plugin) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software plugins items0 plugin based on context it is used
func (m *ComputerSoftwarePluginsItems0Plugin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwarePluginsItems0Plugin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwarePluginsItems0Plugin) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwarePluginsItems0Plugin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerSoftwareRunningServicesItems0 computer software running services items0
//
// swagger:model ComputerSoftwareRunningServicesItems0
type ComputerSoftwareRunningServicesItems0 struct {

	// name
	// Example: com.apple.airportd
	Name string `json:"name,omitempty"`
}

// Validate validates this computer software running services items0
func (m *ComputerSoftwareRunningServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer software running services items0 based on context it is used
func (m *ComputerSoftwareRunningServicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerSoftwareRunningServicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerSoftwareRunningServicesItems0) UnmarshalBinary(b []byte) error {
	var res ComputerSoftwareRunningServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
