// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VppAccount vpp account
//
// swagger:model vpp_account
type VppAccount struct {

	// account name
	// Example: Company Name
	AccountName string `json:"account_name,omitempty"`

	// apple id
	// Example: vpp@company.com
	AppleID string `json:"apple_id,omitempty"`

	// auto register managed users
	AutoRegisterManagedUsers *bool `json:"auto_register_managed_users,omitempty"`

	// contact
	// Example: Company Admin
	Contact string `json:"contact,omitempty"`

	// country
	// Example: US
	Country string `json:"country,omitempty"`

	// expiration date
	// Example: 2018/09/13
	ExpirationDate string `json:"expiration_date,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the VPP account
	// Example: Company VPP Account
	// Required: true
	Name *string `json:"name"`

	// notify disassociation
	NotifyDisassociation *bool `json:"notify_disassociation,omitempty"`

	// populate catalog from vpp content
	PopulateCatalogFromVppContent bool `json:"populate_catalog_from_vpp_content,omitempty"`

	// service token
	// Example: eyJvcmdOYWadveaz40d2FyZSIsImV4cERhdGUiOiIyMDE3LTA5LTEzVDA5OjQ5OjA5LTA3MDAiLCJ0b2tlbiI6Ik5yVUtPK1RXeityUXQyWFpIeENtd0xxby8ydUFmSFU1NW40V1FTZU8wR1E5eFh4UUZTckVJQjlzbGdYei95WkpaeVZ3SklJbW0rWEhJdGtKM1BEZGRRPT0ifQ==
	// Required: true
	ServiceToken *string `json:"service_token"`

	// site
	Site *SiteObject `json:"site,omitempty"`
}

// Validate validates this vpp account
func (m *VppAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAccount) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VppAccount) validateServiceToken(formats strfmt.Registry) error {

	if err := validate.Required("service_token", "body", m.ServiceToken); err != nil {
		return err
	}

	return nil
}

func (m *VppAccount) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vpp account based on the context it is used
func (m *VppAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAccount) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VppAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VppAccount) UnmarshalBinary(b []byte) error {
	var res VppAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
