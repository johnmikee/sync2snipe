// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EbookPost ebook post
//
// swagger:model ebook_post
type EbookPost struct {

	// general
	General *EbookPostGeneral `json:"general,omitempty"`

	// scope
	Scope *EbookPostScope `json:"scope,omitempty"`
}

// Validate validates this ebook post
func (m *EbookPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbookPost) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *EbookPost) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ebook post based on the context it is used
func (m *EbookPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbookPost) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *EbookPost) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EbookPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EbookPost) UnmarshalBinary(b []byte) error {
	var res EbookPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EbookPostGeneral ebook post general
//
// swagger:model EbookPostGeneral
type EbookPostGeneral struct {

	// author
	// Example: Apple Inc.
	Author string `json:"author,omitempty"`

	// category
	Category *CategoryObject `json:"category,omitempty"`

	// deploy as managed
	DeployAsManaged bool `json:"deploy_as_managed,omitempty"`

	// deployment type
	// Example: Install Automatically/Prompt Users to Install
	// Enum: [Make Available in Self Service Install Automatically/Prompt Users to Install]
	DeploymentType string `json:"deployment_type,omitempty"`

	// file type
	// Enum: [PDF IBOOK EPUB]
	FileType string `json:"file_type,omitempty"`

	// free
	// Example: true
	Free bool `json:"free,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Name of the ebook
	// Example: iPhone User Guide for iOS 10.3
	// Required: true
	Name *string `json:"name"`

	// self service icon
	SelfServiceIcon string `json:"self_service_icon,omitempty"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// Download URL for the ebook
	// Example: https://itunes.apple.com/us/book/iphone-user-guide-for-ios-10-3/id1134772174?mt=11\u0026amp;uo=4
	URL string `json:"url,omitempty"`

	// version
	// Example: 1
	Version string `json:"version,omitempty"`
}

// Validate validates this ebook post general
func (m *EbookPostGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbookPostGeneral) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

var ebookPostGeneralTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Make Available in Self Service","Install Automatically/Prompt Users to Install"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ebookPostGeneralTypeDeploymentTypePropEnum = append(ebookPostGeneralTypeDeploymentTypePropEnum, v)
	}
}

const (

	// EbookPostGeneralDeploymentTypeMakeAvailableInSelfService captures enum value "Make Available in Self Service"
	EbookPostGeneralDeploymentTypeMakeAvailableInSelfService string = "Make Available in Self Service"

	// EbookPostGeneralDeploymentTypeInstallAutomaticallyPromptUsersToInstall captures enum value "Install Automatically/Prompt Users to Install"
	EbookPostGeneralDeploymentTypeInstallAutomaticallyPromptUsersToInstall string = "Install Automatically/Prompt Users to Install"
)

// prop value enum
func (m *EbookPostGeneral) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ebookPostGeneralTypeDeploymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EbookPostGeneral) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("general"+"."+"deployment_type", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

var ebookPostGeneralTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PDF","IBOOK","EPUB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ebookPostGeneralTypeFileTypePropEnum = append(ebookPostGeneralTypeFileTypePropEnum, v)
	}
}

const (

	// EbookPostGeneralFileTypePDF captures enum value "PDF"
	EbookPostGeneralFileTypePDF string = "PDF"

	// EbookPostGeneralFileTypeIBOOK captures enum value "IBOOK"
	EbookPostGeneralFileTypeIBOOK string = "IBOOK"

	// EbookPostGeneralFileTypeEPUB captures enum value "EPUB"
	EbookPostGeneralFileTypeEPUB string = "EPUB"
)

// prop value enum
func (m *EbookPostGeneral) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ebookPostGeneralTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EbookPostGeneral) validateFileType(formats strfmt.Registry) error {
	if swag.IsZero(m.FileType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileTypeEnum("general"+"."+"file_type", "body", m.FileType); err != nil {
		return err
	}

	return nil
}

func (m *EbookPostGeneral) validateName(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EbookPostGeneral) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ebook post general based on the context it is used
func (m *EbookPostGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EbookPostGeneral) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

func (m *EbookPostGeneral) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EbookPostGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EbookPostGeneral) UnmarshalBinary(b []byte) error {
	var res EbookPostGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EbookPostScope ebook post scope
//
// swagger:model EbookPostScope
type EbookPostScope struct {

	// all computers
	AllComputers *bool `json:"all_computers,omitempty"`

	// all jss users
	AllJssUsers *bool `json:"all_jss_users,omitempty"`

	// all mobile devices
	AllMobileDevices *bool `json:"all_mobile_devices,omitempty"`
}

// Validate validates this ebook post scope
func (m *EbookPostScope) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ebook post scope based on context it is used
func (m *EbookPostScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EbookPostScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EbookPostScope) UnmarshalBinary(b []byte) error {
	var res EbookPostScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
