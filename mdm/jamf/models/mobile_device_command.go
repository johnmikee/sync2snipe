// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MobileDeviceCommand mobile device command
//
// swagger:model mobile_device_command
type MobileDeviceCommand struct {

	// general
	General *MobileDeviceCommandGeneral `json:"general,omitempty"`

	// mobile devices
	MobileDevices *MobileDeviceCommandMobileDevices `json:"mobile_devices,omitempty"`
}

// Validate validates this mobile device command
func (m *MobileDeviceCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommand) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommand) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	if m.MobileDevices != nil {
		if err := m.MobileDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device command based on the context it is used
func (m *MobileDeviceCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommand) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommand) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevices != nil {

		if swag.IsZero(m.MobileDevices) { // not required
			return nil
		}

		if err := m.MobileDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommand) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandGeneral mobile device command general
//
// swagger:model MobileDeviceCommandGeneral
type MobileDeviceCommandGeneral struct {

	// apns result status
	// Example: Acknowledged
	ApnsResultStatus string `json:"apns_result_status,omitempty"`

	// command
	// Example: ClearPasscode
	Command string `json:"command,omitempty"`

	// date sent
	// Example: 2017-07-07 18:37:04
	DateSent string `json:"date_sent,omitempty"`

	// date sent epoch
	// Example: 1499470624555
	DateSentEpoch string `json:"date_sent_epoch,omitempty"`

	// date sent utc
	// Example: 2017-07-07T18:37:04.555-0500
	DateSentUtc string `json:"date_sent_utc,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// profile id
	ProfileID int64 `json:"profile_id,omitempty"`

	// profile udid
	ProfileUdid string `json:"profile_udid,omitempty"`

	// udid
	// Example: be597b7d-d0a4-42e6-ab98-18d1fd0c5640
	Udid string `json:"udid,omitempty"`

	// uuid
	// Example: be597b7d-d0a4-42e6-ab98-18d1fd0c5640
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this mobile device command general
func (m *MobileDeviceCommandGeneral) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device command general based on context it is used
func (m *MobileDeviceCommandGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandGeneral) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandMobileDevices mobile device command mobile devices
//
// swagger:model MobileDeviceCommandMobileDevices
type MobileDeviceCommandMobileDevices struct {

	// mobile device
	MobileDevice *MobileDeviceCommandMobileDevicesMobileDevice `json:"mobile_device,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device command mobile devices
func (m *MobileDeviceCommandMobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandMobileDevices) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandMobileDevices) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mobile_devices" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mobile_devices" + "." + "size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device command mobile devices based on the context it is used
func (m *MobileDeviceCommandMobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandMobileDevices) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandMobileDevices) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mobile_devices" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mobile_devices" + "." + "size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandMobileDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandMobileDevices) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandMobileDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandMobileDevicesMobileDevice mobile device command mobile devices mobile device
//
// swagger:model MobileDeviceCommandMobileDevicesMobileDevice
type MobileDeviceCommandMobileDevicesMobileDevice struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// serial number
	// Example: F19QMFBYFRY7
	SerialNumber string `json:"serial_number,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile device command mobile devices mobile device
func (m *MobileDeviceCommandMobileDevicesMobileDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device command mobile devices mobile device based on context it is used
func (m *MobileDeviceCommandMobileDevicesMobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandMobileDevicesMobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandMobileDevicesMobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandMobileDevicesMobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
