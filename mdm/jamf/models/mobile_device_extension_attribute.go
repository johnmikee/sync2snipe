// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDeviceExtensionAttribute mobile device extension attribute
//
// swagger:model mobile_device_extension_attribute
type MobileDeviceExtensionAttribute struct {

	// date type
	// Enum: [String Date Integer]
	DateType *string `json:"date_type,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// input type
	InputType *MobileDeviceExtensionAttributeInputType `json:"input_type,omitempty"`

	// inventory display
	// Enum: [General Hardware User and Location Purchasing Extension Attributes]
	InventoryDisplay *string `json:"inventory_display,omitempty"`

	// name
	// Example: Asset Selector
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this mobile device extension attribute
func (m *MobileDeviceExtensionAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryDisplay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mobileDeviceExtensionAttributeTypeDateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["String","Date","Integer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceExtensionAttributeTypeDateTypePropEnum = append(mobileDeviceExtensionAttributeTypeDateTypePropEnum, v)
	}
}

const (

	// MobileDeviceExtensionAttributeDateTypeString captures enum value "String"
	MobileDeviceExtensionAttributeDateTypeString string = "String"

	// MobileDeviceExtensionAttributeDateTypeDate captures enum value "Date"
	MobileDeviceExtensionAttributeDateTypeDate string = "Date"

	// MobileDeviceExtensionAttributeDateTypeInteger captures enum value "Integer"
	MobileDeviceExtensionAttributeDateTypeInteger string = "Integer"
)

// prop value enum
func (m *MobileDeviceExtensionAttribute) validateDateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceExtensionAttributeTypeDateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceExtensionAttribute) validateDateType(formats strfmt.Registry) error {
	if swag.IsZero(m.DateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateTypeEnum("date_type", "body", *m.DateType); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceExtensionAttribute) validateInputType(formats strfmt.Registry) error {
	if swag.IsZero(m.InputType) { // not required
		return nil
	}

	if m.InputType != nil {
		if err := m.InputType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input_type")
			}
			return err
		}
	}

	return nil
}

var mobileDeviceExtensionAttributeTypeInventoryDisplayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["General","Hardware","User and Location","Purchasing","Extension Attributes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceExtensionAttributeTypeInventoryDisplayPropEnum = append(mobileDeviceExtensionAttributeTypeInventoryDisplayPropEnum, v)
	}
}

const (

	// MobileDeviceExtensionAttributeInventoryDisplayGeneral captures enum value "General"
	MobileDeviceExtensionAttributeInventoryDisplayGeneral string = "General"

	// MobileDeviceExtensionAttributeInventoryDisplayHardware captures enum value "Hardware"
	MobileDeviceExtensionAttributeInventoryDisplayHardware string = "Hardware"

	// MobileDeviceExtensionAttributeInventoryDisplayUserAndLocation captures enum value "User and Location"
	MobileDeviceExtensionAttributeInventoryDisplayUserAndLocation string = "User and Location"

	// MobileDeviceExtensionAttributeInventoryDisplayPurchasing captures enum value "Purchasing"
	MobileDeviceExtensionAttributeInventoryDisplayPurchasing string = "Purchasing"

	// MobileDeviceExtensionAttributeInventoryDisplayExtensionAttributes captures enum value "Extension Attributes"
	MobileDeviceExtensionAttributeInventoryDisplayExtensionAttributes string = "Extension Attributes"
)

// prop value enum
func (m *MobileDeviceExtensionAttribute) validateInventoryDisplayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceExtensionAttributeTypeInventoryDisplayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceExtensionAttribute) validateInventoryDisplay(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryDisplay) { // not required
		return nil
	}

	// value enum
	if err := m.validateInventoryDisplayEnum("inventory_display", "body", *m.InventoryDisplay); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceExtensionAttribute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mobile device extension attribute based on the context it is used
func (m *MobileDeviceExtensionAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceExtensionAttribute) contextValidateInputType(ctx context.Context, formats strfmt.Registry) error {

	if m.InputType != nil {

		if swag.IsZero(m.InputType) { // not required
			return nil
		}

		if err := m.InputType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceExtensionAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceExtensionAttribute) UnmarshalBinary(b []byte) error {
	var res MobileDeviceExtensionAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceExtensionAttributeInputType mobile device extension attribute input type
//
// swagger:model MobileDeviceExtensionAttributeInputType
type MobileDeviceExtensionAttributeInputType struct {

	// type
	// Enum: [Text Field Pop-up Menu LDAP Attribute Mapping]
	Type *string `json:"type,omitempty"`
}

// Validate validates this mobile device extension attribute input type
func (m *MobileDeviceExtensionAttributeInputType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mobileDeviceExtensionAttributeInputTypeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text Field","Pop-up Menu","LDAP Attribute Mapping"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceExtensionAttributeInputTypeTypeTypePropEnum = append(mobileDeviceExtensionAttributeInputTypeTypeTypePropEnum, v)
	}
}

const (

	// MobileDeviceExtensionAttributeInputTypeTypeTextField captures enum value "Text Field"
	MobileDeviceExtensionAttributeInputTypeTypeTextField string = "Text Field"

	// MobileDeviceExtensionAttributeInputTypeTypePopDashUpMenu captures enum value "Pop-up Menu"
	MobileDeviceExtensionAttributeInputTypeTypePopDashUpMenu string = "Pop-up Menu"

	// MobileDeviceExtensionAttributeInputTypeTypeLDAPAttributeMapping captures enum value "LDAP Attribute Mapping"
	MobileDeviceExtensionAttributeInputTypeTypeLDAPAttributeMapping string = "LDAP Attribute Mapping"
)

// prop value enum
func (m *MobileDeviceExtensionAttributeInputType) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceExtensionAttributeInputTypeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceExtensionAttributeInputType) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("input_type"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mobile device extension attribute input type based on context it is used
func (m *MobileDeviceExtensionAttributeInputType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceExtensionAttributeInputType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceExtensionAttributeInputType) UnmarshalBinary(b []byte) error {
	var res MobileDeviceExtensionAttributeInputType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
