// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OsxConfigurationProfile os x configuration profile
//
// swagger:model os_x_configuration_profile
type OsxConfigurationProfile struct {

	// general
	General *OsxConfigurationProfileGeneral `json:"general,omitempty"`

	// scope
	Scope *OsxConfigurationProfileScope `json:"scope,omitempty"`

	// self service
	SelfService *OsxConfigurationProfileSelfService `json:"self_service,omitempty"`
}

// Validate validates this os x configuration profile
func (m *OsxConfigurationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfile) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfile) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfile) validateSelfService(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfService) { // not required
		return nil
	}

	if m.SelfService != nil {
		if err := m.SelfService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this os x configuration profile based on the context it is used
func (m *OsxConfigurationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfile) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfile) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfile) contextValidateSelfService(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfService != nil {

		if swag.IsZero(m.SelfService) { // not required
			return nil
		}

		if err := m.SelfService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfile) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileGeneral osx configuration profile general
//
// swagger:model OsxConfigurationProfileGeneral
type OsxConfigurationProfileGeneral struct {

	// category
	Category *CategoryObject `json:"category,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// distribution method
	// Enum: [Install Automatically Make Available in Self Service]
	DistributionMethod string `json:"distribution_method,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// level
	// Enum: [computer user]
	Level string `json:"level,omitempty"`

	// Name of the configuration profile
	// Example: Corporate Wireless
	// Required: true
	Name *string `json:"name"`

	// payloads
	Payloads string `json:"payloads,omitempty"`

	// redeploy on update
	// Example: Newly Assigned
	RedeployOnUpdate string `json:"redeploy_on_update,omitempty"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// user removable
	UserRemovable bool `json:"user_removable,omitempty"`

	// uuid
	// Example: 88F8C1DB-D92A-4D10-95FB-CE7EDE82B93E
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this osx configuration profile general
func (m *OsxConfigurationProfileGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributionMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileGeneral) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

var osxConfigurationProfileGeneralTypeDistributionMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Install Automatically","Make Available in Self Service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osxConfigurationProfileGeneralTypeDistributionMethodPropEnum = append(osxConfigurationProfileGeneralTypeDistributionMethodPropEnum, v)
	}
}

const (

	// OsxConfigurationProfileGeneralDistributionMethodInstallAutomatically captures enum value "Install Automatically"
	OsxConfigurationProfileGeneralDistributionMethodInstallAutomatically string = "Install Automatically"

	// OsxConfigurationProfileGeneralDistributionMethodMakeAvailableInSelfService captures enum value "Make Available in Self Service"
	OsxConfigurationProfileGeneralDistributionMethodMakeAvailableInSelfService string = "Make Available in Self Service"
)

// prop value enum
func (m *OsxConfigurationProfileGeneral) validateDistributionMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, osxConfigurationProfileGeneralTypeDistributionMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OsxConfigurationProfileGeneral) validateDistributionMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.DistributionMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateDistributionMethodEnum("general"+"."+"distribution_method", "body", m.DistributionMethod); err != nil {
		return err
	}

	return nil
}

var osxConfigurationProfileGeneralTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["computer","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osxConfigurationProfileGeneralTypeLevelPropEnum = append(osxConfigurationProfileGeneralTypeLevelPropEnum, v)
	}
}

const (

	// OsxConfigurationProfileGeneralLevelComputer captures enum value "computer"
	OsxConfigurationProfileGeneralLevelComputer string = "computer"

	// OsxConfigurationProfileGeneralLevelUser captures enum value "user"
	OsxConfigurationProfileGeneralLevelUser string = "user"
)

// prop value enum
func (m *OsxConfigurationProfileGeneral) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, osxConfigurationProfileGeneralTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OsxConfigurationProfileGeneral) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("general"+"."+"level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *OsxConfigurationProfileGeneral) validateName(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OsxConfigurationProfileGeneral) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile general based on the context it is used
func (m *OsxConfigurationProfileGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileGeneral) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfileGeneral) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileGeneral) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScope osx configuration profile scope
//
// swagger:model OsxConfigurationProfileScope
type OsxConfigurationProfileScope struct {

	// all computers
	AllComputers *bool `json:"all_computers,omitempty"`

	// all jss users
	AllJssUsers *bool `json:"all_jss_users,omitempty"`

	// buildings
	Buildings []*OsxConfigurationProfileScopeBuildingsItems0 `json:"buildings"`

	// computer groups
	ComputerGroups []*OsxConfigurationProfileScopeComputerGroupsItems0 `json:"computer_groups"`

	// computers
	Computers []*OsxConfigurationProfileScopeComputersItems0 `json:"computers"`

	// departments
	Departments []*OsxConfigurationProfileScopeDepartmentsItems0 `json:"departments"`

	// exclusions
	Exclusions *OsxConfigurationProfileScopeExclusions `json:"exclusions,omitempty"`

	// jss user groups
	JssUserGroups []*OsxConfigurationProfileScopeJssUserGroupsItems0 `json:"jss_user_groups"`

	// jss users
	JssUsers []*OsxConfigurationProfileScopeJssUsersItems0 `json:"jss_users"`

	// limitations
	Limitations *OsxConfigurationProfileScopeLimitations `json:"limitations,omitempty"`
}

// Validate validates this osx configuration profile scope
func (m *OsxConfigurationProfileScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputerGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScope) validateBuildings(formats strfmt.Registry) error {
	if swag.IsZero(m.Buildings) { // not required
		return nil
	}

	for i := 0; i < len(m.Buildings); i++ {
		if swag.IsZero(m.Buildings[i]) { // not required
			continue
		}

		if m.Buildings[i] != nil {
			if err := m.Buildings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateComputerGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputerGroups); i++ {
		if swag.IsZero(m.ComputerGroups[i]) { // not required
			continue
		}

		if m.ComputerGroups[i] != nil {
			if err := m.ComputerGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "computer_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "computer_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	for i := 0; i < len(m.Computers); i++ {
		if swag.IsZero(m.Computers[i]) { // not required
			continue
		}

		if m.Computers[i] != nil {
			if err := m.Computers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {
		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {
			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateExclusions(formats strfmt.Registry) error {
	if swag.IsZero(m.Exclusions) { // not required
		return nil
	}

	if m.Exclusions != nil {
		if err := m.Exclusions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "exclusions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateJssUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUserGroups); i++ {
		if swag.IsZero(m.JssUserGroups[i]) { // not required
			continue
		}

		if m.JssUserGroups[i] != nil {
			if err := m.JssUserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateJssUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUsers); i++ {
		if swag.IsZero(m.JssUsers[i]) { // not required
			continue
		}

		if m.JssUsers[i] != nil {
			if err := m.JssUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) validateLimitations(formats strfmt.Registry) error {
	if swag.IsZero(m.Limitations) { // not required
		return nil
	}

	if m.Limitations != nil {
		if err := m.Limitations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "limitations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "limitations")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope based on the context it is used
func (m *OsxConfigurationProfileScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputerGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExclusions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimitations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateBuildings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Buildings); i++ {

		if m.Buildings[i] != nil {

			if swag.IsZero(m.Buildings[i]) { // not required
				return nil
			}

			if err := m.Buildings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateComputerGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ComputerGroups); i++ {

		if m.ComputerGroups[i] != nil {

			if swag.IsZero(m.ComputerGroups[i]) { // not required
				return nil
			}

			if err := m.ComputerGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "computer_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "computer_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Computers); i++ {

		if m.Computers[i] != nil {

			if swag.IsZero(m.Computers[i]) { // not required
				return nil
			}

			if err := m.Computers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateDepartments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departments); i++ {

		if m.Departments[i] != nil {

			if swag.IsZero(m.Departments[i]) { // not required
				return nil
			}

			if err := m.Departments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateExclusions(ctx context.Context, formats strfmt.Registry) error {

	if m.Exclusions != nil {

		if swag.IsZero(m.Exclusions) { // not required
			return nil
		}

		if err := m.Exclusions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "exclusions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateJssUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUserGroups); i++ {

		if m.JssUserGroups[i] != nil {

			if swag.IsZero(m.JssUserGroups[i]) { // not required
				return nil
			}

			if err := m.JssUserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateJssUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUsers); i++ {

		if m.JssUsers[i] != nil {

			if swag.IsZero(m.JssUsers[i]) { // not required
				return nil
			}

			if err := m.JssUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScope) contextValidateLimitations(ctx context.Context, formats strfmt.Registry) error {

	if m.Limitations != nil {

		if swag.IsZero(m.Limitations) { // not required
			return nil
		}

		if err := m.Limitations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "limitations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "limitations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScope) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeBuildingsItems0 osx configuration profile scope buildings items0
//
// swagger:model OsxConfigurationProfileScopeBuildingsItems0
type OsxConfigurationProfileScopeBuildingsItems0 struct {

	// building
	Building *IDName `json:"building,omitempty"`
}

// Validate validates this osx configuration profile scope buildings items0
func (m *OsxConfigurationProfileScopeBuildingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeBuildingsItems0) validateBuilding(formats strfmt.Registry) error {
	if swag.IsZero(m.Building) { // not required
		return nil
	}

	if m.Building != nil {
		if err := m.Building.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope buildings items0 based on the context it is used
func (m *OsxConfigurationProfileScopeBuildingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeBuildingsItems0) contextValidateBuilding(ctx context.Context, formats strfmt.Registry) error {

	if m.Building != nil {

		if swag.IsZero(m.Building) { // not required
			return nil
		}

		if err := m.Building.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeBuildingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeBuildingsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeBuildingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeComputerGroupsItems0 osx configuration profile scope computer groups items0
//
// swagger:model OsxConfigurationProfileScopeComputerGroupsItems0
type OsxConfigurationProfileScopeComputerGroupsItems0 struct {

	// computer group
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

// Validate validates this osx configuration profile scope computer groups items0
func (m *OsxConfigurationProfileScopeComputerGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeComputerGroupsItems0) validateComputerGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerGroup) { // not required
		return nil
	}

	if m.ComputerGroup != nil {
		if err := m.ComputerGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope computer groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeComputerGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputerGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeComputerGroupsItems0) contextValidateComputerGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputerGroup != nil {

		if swag.IsZero(m.ComputerGroup) { // not required
			return nil
		}

		if err := m.ComputerGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputerGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputerGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeComputerGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeComputersItems0 osx configuration profile scope computers items0
//
// swagger:model OsxConfigurationProfileScopeComputersItems0
type OsxConfigurationProfileScopeComputersItems0 struct {

	// computer
	Computer *OsxConfigurationProfileScopeComputersItems0Computer `json:"computer,omitempty"`
}

// Validate validates this osx configuration profile scope computers items0
func (m *OsxConfigurationProfileScopeComputersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeComputersItems0) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope computers items0 based on the context it is used
func (m *OsxConfigurationProfileScopeComputersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeComputersItems0) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeComputersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeComputersItems0Computer osx configuration profile scope computers items0 computer
//
// swagger:model OsxConfigurationProfileScopeComputersItems0Computer
type OsxConfigurationProfileScopeComputersItems0Computer struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the computer
	// Example: Admins MacBook Pro
	Name string `json:"name,omitempty"`

	// udid
	// Example: 55900BDC-347C-58B1-D249-F32244B11D30
	Udid string `json:"udid,omitempty"`
}

// Validate validates this osx configuration profile scope computers items0 computer
func (m *OsxConfigurationProfileScopeComputersItems0Computer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile scope computers items0 computer based on context it is used
func (m *OsxConfigurationProfileScopeComputersItems0Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputersItems0Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeComputersItems0Computer) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeComputersItems0Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeDepartmentsItems0 osx configuration profile scope departments items0
//
// swagger:model OsxConfigurationProfileScopeDepartmentsItems0
type OsxConfigurationProfileScopeDepartmentsItems0 struct {

	// department
	Department *IDName `json:"department,omitempty"`
}

// Validate validates this osx configuration profile scope departments items0
func (m *OsxConfigurationProfileScopeDepartmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeDepartmentsItems0) validateDepartment(formats strfmt.Registry) error {
	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if m.Department != nil {
		if err := m.Department.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope departments items0 based on the context it is used
func (m *OsxConfigurationProfileScopeDepartmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeDepartmentsItems0) contextValidateDepartment(ctx context.Context, formats strfmt.Registry) error {

	if m.Department != nil {

		if swag.IsZero(m.Department) { // not required
			return nil
		}

		if err := m.Department.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeDepartmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeDepartmentsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeDepartmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusions osx configuration profile scope exclusions
//
// swagger:model OsxConfigurationProfileScopeExclusions
type OsxConfigurationProfileScopeExclusions struct {

	// buildings
	Buildings []*OsxConfigurationProfileScopeExclusionsBuildingsItems0 `json:"buildings"`

	// computer groups
	ComputerGroups []*OsxConfigurationProfileScopeExclusionsComputerGroupsItems0 `json:"computer_groups"`

	// computers
	Computers []*OsxConfigurationProfileScopeExclusionsComputersItems0 `json:"computers"`

	// departments
	Departments []*OsxConfigurationProfileScopeExclusionsDepartmentsItems0 `json:"departments"`

	// ibeacons
	Ibeacons []*OsxConfigurationProfileScopeExclusionsIbeaconsItems0 `json:"ibeacons"`

	// jss user groups
	JssUserGroups []*OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0 `json:"jss_user_groups"`

	// jss users
	JssUsers []*OsxConfigurationProfileScopeExclusionsJssUsersItems0 `json:"jss_users"`

	// network segments
	NetworkSegments []*OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0 `json:"network_segments"`

	// user groups
	UserGroups []*OsxConfigurationProfileScopeExclusionsUserGroupsItems0 `json:"user_groups"`

	// users
	Users []*OsxConfigurationProfileScopeExclusionsUsersItems0 `json:"users"`
}

// Validate validates this osx configuration profile scope exclusions
func (m *OsxConfigurationProfileScopeExclusions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputerGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbeacons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateBuildings(formats strfmt.Registry) error {
	if swag.IsZero(m.Buildings) { // not required
		return nil
	}

	for i := 0; i < len(m.Buildings); i++ {
		if swag.IsZero(m.Buildings[i]) { // not required
			continue
		}

		if m.Buildings[i] != nil {
			if err := m.Buildings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateComputerGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputerGroups); i++ {
		if swag.IsZero(m.ComputerGroups[i]) { // not required
			continue
		}

		if m.ComputerGroups[i] != nil {
			if err := m.ComputerGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "computer_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "computer_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	for i := 0; i < len(m.Computers); i++ {
		if swag.IsZero(m.Computers[i]) { // not required
			continue
		}

		if m.Computers[i] != nil {
			if err := m.Computers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {
		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {
			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateIbeacons(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacons) { // not required
		return nil
	}

	for i := 0; i < len(m.Ibeacons); i++ {
		if swag.IsZero(m.Ibeacons[i]) { // not required
			continue
		}

		if m.Ibeacons[i] != nil {
			if err := m.Ibeacons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateJssUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUserGroups); i++ {
		if swag.IsZero(m.JssUserGroups[i]) { // not required
			continue
		}

		if m.JssUserGroups[i] != nil {
			if err := m.JssUserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateJssUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUsers); i++ {
		if swag.IsZero(m.JssUsers[i]) { // not required
			continue
		}

		if m.JssUsers[i] != nil {
			if err := m.JssUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateNetworkSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkSegments); i++ {
		if swag.IsZero(m.NetworkSegments[i]) { // not required
			continue
		}

		if m.NetworkSegments[i] != nil {
			if err := m.NetworkSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions based on the context it is used
func (m *OsxConfigurationProfileScopeExclusions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputerGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbeacons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateBuildings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Buildings); i++ {

		if m.Buildings[i] != nil {

			if swag.IsZero(m.Buildings[i]) { // not required
				return nil
			}

			if err := m.Buildings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateComputerGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ComputerGroups); i++ {

		if m.ComputerGroups[i] != nil {

			if swag.IsZero(m.ComputerGroups[i]) { // not required
				return nil
			}

			if err := m.ComputerGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "computer_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "computer_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Computers); i++ {

		if m.Computers[i] != nil {

			if swag.IsZero(m.Computers[i]) { // not required
				return nil
			}

			if err := m.Computers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateDepartments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departments); i++ {

		if m.Departments[i] != nil {

			if swag.IsZero(m.Departments[i]) { // not required
				return nil
			}

			if err := m.Departments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateIbeacons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ibeacons); i++ {

		if m.Ibeacons[i] != nil {

			if swag.IsZero(m.Ibeacons[i]) { // not required
				return nil
			}

			if err := m.Ibeacons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateJssUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUserGroups); i++ {

		if m.JssUserGroups[i] != nil {

			if swag.IsZero(m.JssUserGroups[i]) { // not required
				return nil
			}

			if err := m.JssUserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateJssUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUsers); i++ {

		if m.JssUsers[i] != nil {

			if swag.IsZero(m.JssUsers[i]) { // not required
				return nil
			}

			if err := m.JssUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateNetworkSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSegments); i++ {

		if m.NetworkSegments[i] != nil {

			if swag.IsZero(m.NetworkSegments[i]) { // not required
				return nil
			}

			if err := m.NetworkSegments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserGroups); i++ {

		if m.UserGroups[i] != nil {

			if swag.IsZero(m.UserGroups[i]) { // not required
				return nil
			}

			if err := m.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeExclusions) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusions) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsBuildingsItems0 osx configuration profile scope exclusions buildings items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsBuildingsItems0
type OsxConfigurationProfileScopeExclusionsBuildingsItems0 struct {

	// building
	Building *IDName `json:"building,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions buildings items0
func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) validateBuilding(formats strfmt.Registry) error {
	if swag.IsZero(m.Building) { // not required
		return nil
	}

	if m.Building != nil {
		if err := m.Building.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions buildings items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) contextValidateBuilding(ctx context.Context, formats strfmt.Registry) error {

	if m.Building != nil {

		if swag.IsZero(m.Building) { // not required
			return nil
		}

		if err := m.Building.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsBuildingsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsBuildingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsComputerGroupsItems0 osx configuration profile scope exclusions computer groups items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsComputerGroupsItems0
type OsxConfigurationProfileScopeExclusionsComputerGroupsItems0 struct {

	// computer group
	ComputerGroup *IDName `json:"computer_group,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions computer groups items0
func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) validateComputerGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerGroup) { // not required
		return nil
	}

	if m.ComputerGroup != nil {
		if err := m.ComputerGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions computer groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputerGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) contextValidateComputerGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputerGroup != nil {

		if swag.IsZero(m.ComputerGroup) { // not required
			return nil
		}

		if err := m.ComputerGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputerGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsComputerGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsComputersItems0 osx configuration profile scope exclusions computers items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsComputersItems0
type OsxConfigurationProfileScopeExclusionsComputersItems0 struct {

	// computer
	Computer *OsxConfigurationProfileScopeExclusionsComputersItems0Computer `json:"computer,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions computers items0
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions computers items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsComputersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsComputersItems0Computer osx configuration profile scope exclusions computers items0 computer
//
// swagger:model OsxConfigurationProfileScopeExclusionsComputersItems0Computer
type OsxConfigurationProfileScopeExclusionsComputersItems0Computer struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the computer
	// Example: Johns iMac
	Name string `json:"name,omitempty"`

	// udid
	// Example: 55900BDC-347C-58B1-D249-F32244B11D30
	Udid string `json:"udid,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions computers items0 computer
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0Computer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile scope exclusions computers items0 computer based on context it is used
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsComputersItems0Computer) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsComputersItems0Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsDepartmentsItems0 osx configuration profile scope exclusions departments items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsDepartmentsItems0
type OsxConfigurationProfileScopeExclusionsDepartmentsItems0 struct {

	// department
	Department *IDName `json:"department,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions departments items0
func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) validateDepartment(formats strfmt.Registry) error {
	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if m.Department != nil {
		if err := m.Department.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions departments items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) contextValidateDepartment(ctx context.Context, formats strfmt.Registry) error {

	if m.Department != nil {

		if swag.IsZero(m.Department) { // not required
			return nil
		}

		if err := m.Department.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsDepartmentsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsDepartmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsIbeaconsItems0 osx configuration profile scope exclusions ibeacons items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsIbeaconsItems0
type OsxConfigurationProfileScopeExclusionsIbeaconsItems0 struct {

	// ibeacon
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions ibeacons items0
func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) validateIbeacon(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacon) { // not required
		return nil
	}

	if m.Ibeacon != nil {
		if err := m.Ibeacon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions ibeacons items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) contextValidateIbeacon(ctx context.Context, formats strfmt.Registry) error {

	if m.Ibeacon != nil {

		if swag.IsZero(m.Ibeacon) { // not required
			return nil
		}

		if err := m.Ibeacon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsIbeaconsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsIbeaconsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0 osx configuration profile scope exclusions jss user groups items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0
type OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0 struct {

	// jss user group
	JssUserGroup *IDName `json:"jss_user_group,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions jss user groups items0
func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJssUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) validateJssUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroup) { // not required
		return nil
	}

	if m.JssUserGroup != nil {
		if err := m.JssUserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions jss user groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJssUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) contextValidateJssUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.JssUserGroup != nil {

		if swag.IsZero(m.JssUserGroup) { // not required
			return nil
		}

		if err := m.JssUserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsJssUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsJssUsersItems0 osx configuration profile scope exclusions jss users items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsJssUsersItems0
type OsxConfigurationProfileScopeExclusionsJssUsersItems0 struct {

	// jss user
	JssUser *IDName `json:"jss_user,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions jss users items0
func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJssUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) validateJssUser(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUser) { // not required
		return nil
	}

	if m.JssUser != nil {
		if err := m.JssUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions jss users items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJssUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) contextValidateJssUser(ctx context.Context, formats strfmt.Registry) error {

	if m.JssUser != nil {

		if swag.IsZero(m.JssUser) { // not required
			return nil
		}

		if err := m.JssUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsJssUsersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsJssUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0 osx configuration profile scope exclusions network segments items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0
type OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0 struct {

	// network segment
	NetworkSegment *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment `json:"network_segment,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions network segments items0
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) validateNetworkSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegment) { // not required
		return nil
	}

	if m.NetworkSegment != nil {
		if err := m.NetworkSegment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions network segments items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) contextValidateNetworkSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSegment != nil {

		if swag.IsZero(m.NetworkSegment) { // not required
			return nil
		}

		if err := m.NetworkSegment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment osx configuration profile scope exclusions network segments items0 network segment
//
// swagger:model OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment
type OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the network segment
	// Example: New York
	Name string `json:"name,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions network segments items0 network segment
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile scope exclusions network segments items0 network segment based on context it is used
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsUserGroupsItems0 osx configuration profile scope exclusions user groups items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsUserGroupsItems0
type OsxConfigurationProfileScopeExclusionsUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions user groups items0
func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions user groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsUsersItems0 osx configuration profile scope exclusions users items0
//
// swagger:model OsxConfigurationProfileScopeExclusionsUsersItems0
type OsxConfigurationProfileScopeExclusionsUsersItems0 struct {

	// user
	User *OsxConfigurationProfileScopeExclusionsUsersItems0User `json:"user,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions users items0
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope exclusions users items0 based on the context it is used
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeExclusionsUsersItems0User osx configuration profile scope exclusions users items0 user
//
// swagger:model OsxConfigurationProfileScopeExclusionsUsersItems0User
type OsxConfigurationProfileScopeExclusionsUsersItems0User struct {

	// name
	// Example: Adam
	Name string `json:"name,omitempty"`
}

// Validate validates this osx configuration profile scope exclusions users items0 user
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile scope exclusions users items0 user based on context it is used
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeExclusionsUsersItems0User) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeExclusionsUsersItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeJssUserGroupsItems0 osx configuration profile scope jss user groups items0
//
// swagger:model OsxConfigurationProfileScopeJssUserGroupsItems0
type OsxConfigurationProfileScopeJssUserGroupsItems0 struct {

	// jss user group
	JssUserGroup *IDName `json:"jss_user_group,omitempty"`
}

// Validate validates this osx configuration profile scope jss user groups items0
func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJssUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) validateJssUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroup) { // not required
		return nil
	}

	if m.JssUserGroup != nil {
		if err := m.JssUserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope jss user groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJssUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) contextValidateJssUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.JssUserGroup != nil {

		if swag.IsZero(m.JssUserGroup) { // not required
			return nil
		}

		if err := m.JssUserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jss_user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jss_user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeJssUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeJssUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeJssUsersItems0 osx configuration profile scope jss users items0
//
// swagger:model OsxConfigurationProfileScopeJssUsersItems0
type OsxConfigurationProfileScopeJssUsersItems0 struct {

	// users
	Users *IDName `json:"users,omitempty"`
}

// Validate validates this osx configuration profile scope jss users items0
func (m *OsxConfigurationProfileScopeJssUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeJssUsersItems0) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope jss users items0 based on the context it is used
func (m *OsxConfigurationProfileScopeJssUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeJssUsersItems0) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {

		if swag.IsZero(m.Users) { // not required
			return nil
		}

		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeJssUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeJssUsersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeJssUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeLimitations osx configuration profile scope limitations
//
// swagger:model OsxConfigurationProfileScopeLimitations
type OsxConfigurationProfileScopeLimitations struct {

	// ibeacons
	Ibeacons []*OsxConfigurationProfileScopeLimitationsIbeaconsItems0 `json:"ibeacons"`

	// network segments
	NetworkSegments []*OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0 `json:"network_segments"`

	// user groups
	UserGroups []*OsxConfigurationProfileScopeLimitationsUserGroupsItems0 `json:"user_groups"`

	// users
	Users []*OsxConfigurationProfileScopeLimitationsUsersItems0 `json:"users"`
}

// Validate validates this osx configuration profile scope limitations
func (m *OsxConfigurationProfileScopeLimitations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) validateIbeacons(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacons) { // not required
		return nil
	}

	for i := 0; i < len(m.Ibeacons); i++ {
		if swag.IsZero(m.Ibeacons[i]) { // not required
			continue
		}

		if m.Ibeacons[i] != nil {
			if err := m.Ibeacons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) validateNetworkSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkSegments); i++ {
		if swag.IsZero(m.NetworkSegments[i]) { // not required
			continue
		}

		if m.NetworkSegments[i] != nil {
			if err := m.NetworkSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this osx configuration profile scope limitations based on the context it is used
func (m *OsxConfigurationProfileScopeLimitations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) contextValidateIbeacons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ibeacons); i++ {

		if m.Ibeacons[i] != nil {

			if swag.IsZero(m.Ibeacons[i]) { // not required
				return nil
			}

			if err := m.Ibeacons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) contextValidateNetworkSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSegments); i++ {

		if m.NetworkSegments[i] != nil {

			if swag.IsZero(m.NetworkSegments[i]) { // not required
				return nil
			}

			if err := m.NetworkSegments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserGroups); i++ {

		if m.UserGroups[i] != nil {

			if swag.IsZero(m.UserGroups[i]) { // not required
				return nil
			}

			if err := m.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OsxConfigurationProfileScopeLimitations) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitations) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeLimitations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeLimitationsIbeaconsItems0 osx configuration profile scope limitations ibeacons items0
//
// swagger:model OsxConfigurationProfileScopeLimitationsIbeaconsItems0
type OsxConfigurationProfileScopeLimitationsIbeaconsItems0 struct {

	// ibeacon
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

// Validate validates this osx configuration profile scope limitations ibeacons items0
func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) validateIbeacon(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacon) { // not required
		return nil
	}

	if m.Ibeacon != nil {
		if err := m.Ibeacon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope limitations ibeacons items0 based on the context it is used
func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) contextValidateIbeacon(ctx context.Context, formats strfmt.Registry) error {

	if m.Ibeacon != nil {

		if swag.IsZero(m.Ibeacon) { // not required
			return nil
		}

		if err := m.Ibeacon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsIbeaconsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeLimitationsIbeaconsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0 osx configuration profile scope limitations network segments items0
//
// swagger:model OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0
type OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0 struct {

	// network segment
	NetworkSegment *IDName `json:"network_segment,omitempty"`
}

// Validate validates this osx configuration profile scope limitations network segments items0
func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) validateNetworkSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegment) { // not required
		return nil
	}

	if m.NetworkSegment != nil {
		if err := m.NetworkSegment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope limitations network segments items0 based on the context it is used
func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) contextValidateNetworkSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSegment != nil {

		if swag.IsZero(m.NetworkSegment) { // not required
			return nil
		}

		if err := m.NetworkSegment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeLimitationsNetworkSegmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeLimitationsUserGroupsItems0 osx configuration profile scope limitations user groups items0
//
// swagger:model OsxConfigurationProfileScopeLimitationsUserGroupsItems0
type OsxConfigurationProfileScopeLimitationsUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this osx configuration profile scope limitations user groups items0
func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope limitations user groups items0 based on the context it is used
func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeLimitationsUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileScopeLimitationsUsersItems0 osx configuration profile scope limitations users items0
//
// swagger:model OsxConfigurationProfileScopeLimitationsUsersItems0
type OsxConfigurationProfileScopeLimitationsUsersItems0 struct {

	// user
	User *IDName `json:"user,omitempty"`
}

// Validate validates this osx configuration profile scope limitations users items0
func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile scope limitations users items0 based on the context it is used
func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileScopeLimitationsUsersItems0) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileScopeLimitationsUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileSelfService osx configuration profile self service
//
// swagger:model OsxConfigurationProfileSelfService
type OsxConfigurationProfileSelfService struct {

	// feature on main page
	FeatureOnMainPage bool `json:"feature_on_main_page,omitempty"`

	// force users to view description
	ForceUsersToViewDescription bool `json:"force_users_to_view_description,omitempty"`

	// install button text
	// Example: Install
	InstallButtonText string `json:"install_button_text,omitempty"`

	// notification
	Notification string `json:"notification,omitempty"`

	// notification message
	// Example: You need access to corporate resources. Install this profile to get the premium WiFis.
	NotificationMessage string `json:"notification_message,omitempty"`

	// notification subject
	// Example: Install Me!!!
	NotificationSubject string `json:"notification_subject,omitempty"`

	// self service categories
	SelfServiceCategories *OsxConfigurationProfileSelfServiceSelfServiceCategories `json:"self_service_categories,omitempty"`

	// self service description
	SelfServiceDescription string `json:"self_service_description,omitempty"`

	// self service icon
	SelfServiceIcon *OsxConfigurationProfileSelfServiceSelfServiceIcon `json:"self_service_icon,omitempty"`
}

// Validate validates this osx configuration profile self service
func (m *OsxConfigurationProfileSelfService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfServiceCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfServiceIcon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileSelfService) validateSelfServiceCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfServiceCategories) { // not required
		return nil
	}

	if m.SelfServiceCategories != nil {
		if err := m.SelfServiceCategories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_categories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_categories")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfileSelfService) validateSelfServiceIcon(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfServiceIcon) { // not required
		return nil
	}

	if m.SelfServiceIcon != nil {
		if err := m.SelfServiceIcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_icon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile self service based on the context it is used
func (m *OsxConfigurationProfileSelfService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelfServiceCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfServiceIcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileSelfService) contextValidateSelfServiceCategories(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfServiceCategories != nil {

		if swag.IsZero(m.SelfServiceCategories) { // not required
			return nil
		}

		if err := m.SelfServiceCategories.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_categories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_categories")
			}
			return err
		}
	}

	return nil
}

func (m *OsxConfigurationProfileSelfService) contextValidateSelfServiceIcon(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfServiceIcon != nil {

		if swag.IsZero(m.SelfServiceIcon) { // not required
			return nil
		}

		if err := m.SelfServiceIcon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_icon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfService) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileSelfService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileSelfServiceSelfServiceCategories osx configuration profile self service self service categories
//
// swagger:model OsxConfigurationProfileSelfServiceSelfServiceCategories
type OsxConfigurationProfileSelfServiceSelfServiceCategories struct {

	// category
	Category *OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory `json:"category,omitempty"`
}

// Validate validates this osx configuration profile self service self service categories
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_categories" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_categories" + "." + "category")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osx configuration profile self service self service categories based on the context it is used
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_categories" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_categories" + "." + "category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategories) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileSelfServiceSelfServiceCategories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory osx configuration profile self service self service categories category
//
// swagger:model OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory
type OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory struct {

	// display in
	DisplayIn *bool `json:"display_in,omitempty"`

	// feature in
	FeatureIn *bool `json:"feature_in,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Compliance
	Name string `json:"name,omitempty"`
}

// Validate validates this osx configuration profile self service self service categories category
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile self service self service categories category based on context it is used
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileSelfServiceSelfServiceCategoriesCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsxConfigurationProfileSelfServiceSelfServiceIcon osx configuration profile self service self service icon
//
// swagger:model OsxConfigurationProfileSelfServiceSelfServiceIcon
type OsxConfigurationProfileSelfServiceSelfServiceIcon struct {

	// data
	Data string `json:"data,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// uri
	// Example: https://company.jamfcloud.com/iconservlet/?id=1
	URI string `json:"uri,omitempty"`
}

// Validate validates this osx configuration profile self service self service icon
func (m *OsxConfigurationProfileSelfServiceSelfServiceIcon) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this osx configuration profile self service self service icon based on context it is used
func (m *OsxConfigurationProfileSelfServiceSelfServiceIcon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceIcon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsxConfigurationProfileSelfServiceSelfServiceIcon) UnmarshalBinary(b []byte) error {
	var res OsxConfigurationProfileSelfServiceSelfServiceIcon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
