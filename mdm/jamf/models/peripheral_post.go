// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeripheralPost peripheral post
//
// swagger:model peripheral_post
type PeripheralPost struct {

	// general
	General *PeripheralPostGeneral `json:"general,omitempty"`
}

// Validate validates this peripheral post
func (m *PeripheralPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPost) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this peripheral post based on the context it is used
func (m *PeripheralPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPost) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeripheralPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeripheralPost) UnmarshalBinary(b []byte) error {
	var res PeripheralPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeripheralPostGeneral peripheral post general
//
// swagger:model PeripheralPostGeneral
type PeripheralPostGeneral struct {

	// bar code 1
	BarCode1 string `json:"bar_code_1,omitempty"`

	// bar code 2
	BarCode2 string `json:"bar_code_2,omitempty"`

	// fields
	Fields *PeripheralPostGeneralFields `json:"fields,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Name of the peripheral type
	// Example: Peripheral Type Name
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this peripheral post general
func (m *PeripheralPostGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPostGeneral) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	if m.Fields != nil {
		if err := m.Fields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

func (m *PeripheralPostGeneral) validateType(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this peripheral post general based on the context it is used
func (m *PeripheralPostGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPostGeneral) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	if m.Fields != nil {

		if swag.IsZero(m.Fields) { // not required
			return nil
		}

		if err := m.Fields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeripheralPostGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeripheralPostGeneral) UnmarshalBinary(b []byte) error {
	var res PeripheralPostGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeripheralPostGeneralFields peripheral post general fields
//
// swagger:model PeripheralPostGeneralFields
type PeripheralPostGeneralFields struct {

	// field
	Field *PeripheralPostGeneralFieldsField `json:"field,omitempty"`
}

// Validate validates this peripheral post general fields
func (m *PeripheralPostGeneralFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPostGeneralFields) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	if m.Field != nil {
		if err := m.Field.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "fields" + "." + "field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "fields" + "." + "field")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this peripheral post general fields based on the context it is used
func (m *PeripheralPostGeneralFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeripheralPostGeneralFields) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if m.Field != nil {

		if swag.IsZero(m.Field) { // not required
			return nil
		}

		if err := m.Field.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "fields" + "." + "field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "fields" + "." + "field")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeripheralPostGeneralFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeripheralPostGeneralFields) UnmarshalBinary(b []byte) error {
	var res PeripheralPostGeneralFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PeripheralPostGeneralFieldsField peripheral post general fields field
//
// swagger:model PeripheralPostGeneralFieldsField
type PeripheralPostGeneralFieldsField struct {

	// name
	// Example: Peripheral Field Name
	Name string `json:"name,omitempty"`

	// value
	// Example: Value for menu type
	Value string `json:"value,omitempty"`
}

// Validate validates this peripheral post general fields field
func (m *PeripheralPostGeneralFieldsField) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this peripheral post general fields field based on context it is used
func (m *PeripheralPostGeneralFieldsField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PeripheralPostGeneralFieldsField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeripheralPostGeneralFieldsField) UnmarshalBinary(b []byte) error {
	var res PeripheralPostGeneralFieldsField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
