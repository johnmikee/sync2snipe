// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthcareListenerRule healthcare listener rule
//
// swagger:model healthcare_listener_rule
type HealthcareListenerRule struct {

	// adt message
	// Example: A03
	// Required: true
	AdtMessage *string `json:"adt_message"`

	// adt message field
	// Example: PV1-6-3
	// Required: true
	AdtMessageField *string `json:"adt_message_field"`

	// -1 represents the location field 'Room'; any other number is a mobile device extension attribute ID.
	DeviceInventoryField *int64 `json:"device_inventory_field,omitempty"`

	// hcl id
	// Example: 1
	HclID int64 `json:"hcl_id,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// mdm command
	// Enum: [EraseDevice DeviceLock ClearPasscode EnableLostMode DisableLostMode]
	MdmCommand string `json:"mdm_command,omitempty"`

	// mdm command additional data
	MdmCommandAdditionalData string `json:"mdm_command_additional_data,omitempty"`

	// name
	// Example: Patient Discharge - Wipe
	// Required: true
	Name *string `json:"name"`

	// notification emails
	NotificationEmails *HealthcareListenerRuleNotificationEmails `json:"notification_emails,omitempty"`

	// notification enabled
	NotificationEnabled *bool `json:"notification_enabled,omitempty"`

	// notification threshold
	NotificationThreshold *int64 `json:"notification_threshold,omitempty"`

	// notify unsupported enabled
	NotifyUnsupportedEnabled *bool `json:"notify_unsupported_enabled,omitempty"`

	// operating system
	// Enum: [iPhone TV]
	OperatingSystem string `json:"operating_system,omitempty"`
}

// Validate validates this healthcare listener rule
func (m *HealthcareListenerRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdtMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdtMessageField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdmCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerRule) validateAdtMessage(formats strfmt.Registry) error {

	if err := validate.Required("adt_message", "body", m.AdtMessage); err != nil {
		return err
	}

	return nil
}

func (m *HealthcareListenerRule) validateAdtMessageField(formats strfmt.Registry) error {

	if err := validate.Required("adt_message_field", "body", m.AdtMessageField); err != nil {
		return err
	}

	return nil
}

var healthcareListenerRuleTypeMdmCommandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EraseDevice","DeviceLock","ClearPasscode","EnableLostMode","DisableLostMode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthcareListenerRuleTypeMdmCommandPropEnum = append(healthcareListenerRuleTypeMdmCommandPropEnum, v)
	}
}

const (

	// HealthcareListenerRuleMdmCommandEraseDevice captures enum value "EraseDevice"
	HealthcareListenerRuleMdmCommandEraseDevice string = "EraseDevice"

	// HealthcareListenerRuleMdmCommandDeviceLock captures enum value "DeviceLock"
	HealthcareListenerRuleMdmCommandDeviceLock string = "DeviceLock"

	// HealthcareListenerRuleMdmCommandClearPasscode captures enum value "ClearPasscode"
	HealthcareListenerRuleMdmCommandClearPasscode string = "ClearPasscode"

	// HealthcareListenerRuleMdmCommandEnableLostMode captures enum value "EnableLostMode"
	HealthcareListenerRuleMdmCommandEnableLostMode string = "EnableLostMode"

	// HealthcareListenerRuleMdmCommandDisableLostMode captures enum value "DisableLostMode"
	HealthcareListenerRuleMdmCommandDisableLostMode string = "DisableLostMode"
)

// prop value enum
func (m *HealthcareListenerRule) validateMdmCommandEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthcareListenerRuleTypeMdmCommandPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthcareListenerRule) validateMdmCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.MdmCommand) { // not required
		return nil
	}

	// value enum
	if err := m.validateMdmCommandEnum("mdm_command", "body", m.MdmCommand); err != nil {
		return err
	}

	return nil
}

func (m *HealthcareListenerRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HealthcareListenerRule) validateNotificationEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationEmails) { // not required
		return nil
	}

	if m.NotificationEmails != nil {
		if err := m.NotificationEmails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification_emails")
			}
			return err
		}
	}

	return nil
}

var healthcareListenerRuleTypeOperatingSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iPhone","TV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthcareListenerRuleTypeOperatingSystemPropEnum = append(healthcareListenerRuleTypeOperatingSystemPropEnum, v)
	}
}

const (

	// HealthcareListenerRuleOperatingSystemIPhone captures enum value "iPhone"
	HealthcareListenerRuleOperatingSystemIPhone string = "iPhone"

	// HealthcareListenerRuleOperatingSystemTV captures enum value "TV"
	HealthcareListenerRuleOperatingSystemTV string = "TV"
)

// prop value enum
func (m *HealthcareListenerRule) validateOperatingSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthcareListenerRuleTypeOperatingSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthcareListenerRule) validateOperatingSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatingSystemEnum("operating_system", "body", m.OperatingSystem); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this healthcare listener rule based on the context it is used
func (m *HealthcareListenerRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotificationEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerRule) contextValidateNotificationEmails(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationEmails != nil {

		if swag.IsZero(m.NotificationEmails) { // not required
			return nil
		}

		if err := m.NotificationEmails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification_emails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerRule) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthcareListenerRuleNotificationEmails healthcare listener rule notification emails
//
// swagger:model HealthcareListenerRuleNotificationEmails
type HealthcareListenerRuleNotificationEmails struct {

	// email
	// Example: travis@company.com
	Email string `json:"email,omitempty"`
}

// Validate validates this healthcare listener rule notification emails
func (m *HealthcareListenerRuleNotificationEmails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this healthcare listener rule notification emails based on context it is used
func (m *HealthcareListenerRuleNotificationEmails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerRuleNotificationEmails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerRuleNotificationEmails) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerRuleNotificationEmails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
