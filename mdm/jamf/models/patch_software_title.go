// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchSoftwareTitle patch software title
//
// swagger:model patch_software_title
type PatchSoftwareTitle struct {

	// categories
	Categories *CategoryObject `json:"categories,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Google Chrome
	Name string `json:"name,omitempty"`

	// name id
	// Example: GoogleChrome
	NameID string `json:"name_id,omitempty"`

	// notifications
	Notifications *PatchSoftwareTitleNotifications `json:"notifications,omitempty"`

	// source id
	// Example: 1
	SourceID int64 `json:"source_id,omitempty"`

	// versions
	Versions []*PatchSoftwareTitleVersionsItems0 `json:"versions"`
}

// Validate validates this patch software title
func (m *PatchSoftwareTitle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitle) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	if m.Categories != nil {
		if err := m.Categories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categories")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSoftwareTitle) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	if m.Notifications != nil {
		if err := m.Notifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSoftwareTitle) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this patch software title based on the context it is used
func (m *PatchSoftwareTitle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitle) contextValidateCategories(ctx context.Context, formats strfmt.Registry) error {

	if m.Categories != nil {

		if swag.IsZero(m.Categories) { // not required
			return nil
		}

		if err := m.Categories.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categories")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSoftwareTitle) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.Notifications != nil {

		if swag.IsZero(m.Notifications) { // not required
			return nil
		}

		if err := m.Notifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *PatchSoftwareTitle) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Versions); i++ {

		if m.Versions[i] != nil {

			if swag.IsZero(m.Versions[i]) { // not required
				return nil
			}

			if err := m.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchSoftwareTitle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSoftwareTitle) UnmarshalBinary(b []byte) error {
	var res PatchSoftwareTitle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchSoftwareTitleNotifications patch software title notifications
//
// swagger:model PatchSoftwareTitleNotifications
type PatchSoftwareTitleNotifications struct {

	// email notification
	EmailNotification *bool `json:"email_notification,omitempty"`

	// web notification
	WebNotification *bool `json:"web_notification,omitempty"`
}

// Validate validates this patch software title notifications
func (m *PatchSoftwareTitleNotifications) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch software title notifications based on context it is used
func (m *PatchSoftwareTitleNotifications) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchSoftwareTitleNotifications) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSoftwareTitleNotifications) UnmarshalBinary(b []byte) error {
	var res PatchSoftwareTitleNotifications
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchSoftwareTitleVersionsItems0 patch software title versions items0
//
// swagger:model PatchSoftwareTitleVersionsItems0
type PatchSoftwareTitleVersionsItems0 struct {

	// version
	Version *PatchSoftwareTitleVersionsItems0Version `json:"version,omitempty"`
}

// Validate validates this patch software title versions items0
func (m *PatchSoftwareTitleVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitleVersionsItems0) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch software title versions items0 based on the context it is used
func (m *PatchSoftwareTitleVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitleVersionsItems0) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {

		if swag.IsZero(m.Version) { // not required
			return nil
		}

		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0) UnmarshalBinary(b []byte) error {
	var res PatchSoftwareTitleVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchSoftwareTitleVersionsItems0Version patch software title versions items0 version
//
// swagger:model PatchSoftwareTitleVersionsItems0Version
type PatchSoftwareTitleVersionsItems0Version struct {

	// package
	Package *PatchSoftwareTitleVersionsItems0VersionPackage `json:"package,omitempty"`

	// software version
	// Example: 65.0.3325.181
	SoftwareVersion string `json:"software_version,omitempty"`
}

// Validate validates this patch software title versions items0 version
func (m *PatchSoftwareTitleVersionsItems0Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitleVersionsItems0Version) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version" + "." + "package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version" + "." + "package")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch software title versions items0 version based on the context it is used
func (m *PatchSoftwareTitleVersionsItems0Version) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchSoftwareTitleVersionsItems0Version) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version" + "." + "package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version" + "." + "package")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0Version) UnmarshalBinary(b []byte) error {
	var res PatchSoftwareTitleVersionsItems0Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchSoftwareTitleVersionsItems0VersionPackage patch software title versions items0 version package
//
// swagger:model PatchSoftwareTitleVersionsItems0VersionPackage
type PatchSoftwareTitleVersionsItems0VersionPackage struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Google Chrome.dmg
	Name string `json:"name,omitempty"`
}

// Validate validates this patch software title versions items0 version package
func (m *PatchSoftwareTitleVersionsItems0VersionPackage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch software title versions items0 version package based on context it is used
func (m *PatchSoftwareTitleVersionsItems0VersionPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0VersionPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSoftwareTitleVersionsItems0VersionPackage) UnmarshalBinary(b []byte) error {
	var res PatchSoftwareTitleVersionsItems0VersionPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
