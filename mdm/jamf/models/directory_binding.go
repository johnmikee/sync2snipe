// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectoryBinding directory binding
//
// swagger:model directory_binding
type DirectoryBinding struct {

	// OU to bind computers to
	// Example: CN=Computers,DC=ad,DC=company,DC=com
	ComputerOu string `json:"computer_ou,omitempty"`

	// domain
	// Example: ad.company.com
	Domain string `json:"domain,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the binding
	// Example: AD Binding
	// Required: true
	Name *string `json:"name"`

	// Password for the network administrator account
	Password string `json:"password,omitempty"`

	// priority
	// Example: 1
	Priority int64 `json:"priority,omitempty"`

	// type
	// Example: Active Directory
	Type string `json:"type,omitempty"`

	// Network administrator account to bind with
	// Example: AD\\Administrator
	Username string `json:"username,omitempty"`
}

// Validate validates this directory binding
func (m *DirectoryBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryBinding) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this directory binding based on context it is used
func (m *DirectoryBinding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryBinding) UnmarshalBinary(b []byte) error {
	var res DirectoryBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
