// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Package package
//
// swagger:model package
type Package struct {

	// allow uninstalled
	AllowUninstalled bool `json:"allow_uninstalled,omitempty"`

	// category
	// Example: Unknown
	Category string `json:"category,omitempty"`

	// filename
	// Example: Firefox.dmg
	// Required: true
	Filename *string `json:"filename"`

	// fill existing users
	FillExistingUsers bool `json:"fill_existing_users,omitempty"`

	// fill user template
	FillUserTemplate bool `json:"fill_user_template,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// install if reported available
	InstallIfReportedAvailable bool `json:"install_if_reported_available,omitempty"`

	// Name of the package
	// Example: Firefox.dmg
	// Required: true
	Name *string `json:"name"`

	// notes
	Notes string `json:"notes,omitempty"`

	// os requirements
	OsRequirements string `json:"os_requirements,omitempty"`

	// priority
	// Example: 5
	Priority int64 `json:"priority,omitempty"`

	// reboot required
	RebootRequired bool `json:"reboot_required,omitempty"`

	// reinstall option
	// Example: Do Not Reinstall
	ReinstallOption string `json:"reinstall_option,omitempty"`

	// required processor
	// Enum: [None ppc x86]
	RequiredProcessor *string `json:"required_processor,omitempty"`

	// send notification
	SendNotification bool `json:"send_notification,omitempty"`

	// switch with package
	// Example: Do Not Install
	SwitchWithPackage string `json:"switch_with_package,omitempty"`

	// triggering files
	TriggeringFiles string `json:"triggering_files,omitempty"`
}

// Validate validates this package
func (m *Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

func (m *Package) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var packageTypeRequiredProcessorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","ppc","x86"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageTypeRequiredProcessorPropEnum = append(packageTypeRequiredProcessorPropEnum, v)
	}
}

const (

	// PackageRequiredProcessorNone captures enum value "None"
	PackageRequiredProcessorNone string = "None"

	// PackageRequiredProcessorPpc captures enum value "ppc"
	PackageRequiredProcessorPpc string = "ppc"

	// PackageRequiredProcessorX86 captures enum value "x86"
	PackageRequiredProcessorX86 string = "x86"
)

// prop value enum
func (m *Package) validateRequiredProcessorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packageTypeRequiredProcessorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Package) validateRequiredProcessor(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredProcessor) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequiredProcessorEnum("required_processor", "body", *m.RequiredProcessor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this package based on context it is used
func (m *Package) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Package) UnmarshalBinary(b []byte) error {
	var res Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
