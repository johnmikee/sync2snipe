// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GsxConnection gsx connection
//
// swagger:model gsx_connection
type GsxConnection struct {

	// account number
	// Example: 123456
	AccountNumber int64 `json:"account_number,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// region
	// Enum: [Americas APAC EMEA LatinAmerica]
	Region string `json:"region,omitempty"`

	// uri
	// Example: https://gsxws2.apple.com/gsx-ws/services/am/asp
	URI string `json:"uri,omitempty"`

	// username
	// Example: applegsx@company.com
	Username string `json:"username,omitempty"`
}

// Validate validates this gsx connection
func (m *GsxConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gsxConnectionTypeRegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Americas","APAC","EMEA","LatinAmerica"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gsxConnectionTypeRegionPropEnum = append(gsxConnectionTypeRegionPropEnum, v)
	}
}

const (

	// GsxConnectionRegionAmericas captures enum value "Americas"
	GsxConnectionRegionAmericas string = "Americas"

	// GsxConnectionRegionAPAC captures enum value "APAC"
	GsxConnectionRegionAPAC string = "APAC"

	// GsxConnectionRegionEMEA captures enum value "EMEA"
	GsxConnectionRegionEMEA string = "EMEA"

	// GsxConnectionRegionLatinAmerica captures enum value "LatinAmerica"
	GsxConnectionRegionLatinAmerica string = "LatinAmerica"
)

// prop value enum
func (m *GsxConnection) validateRegionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gsxConnectionTypeRegionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GsxConnection) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegionEnum("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gsx connection based on context it is used
func (m *GsxConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GsxConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GsxConnection) UnmarshalBinary(b []byte) error {
	var res GsxConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
