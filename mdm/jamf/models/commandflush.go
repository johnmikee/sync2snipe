// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commandflush commandflush
//
// swagger:model commandflush
type Commandflush struct {

	// mobile devices
	MobileDevices *CommandflushMobileDevices `json:"mobile_devices,omitempty"`

	// status
	// Required: true
	// Enum: [Pending Failed Pending+Failed]
	Status *string `json:"status"`
}

// Validate validates this commandflush
func (m *Commandflush) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commandflush) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	if m.MobileDevices != nil {
		if err := m.MobileDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

var commandflushTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Failed","Pending+Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandflushTypeStatusPropEnum = append(commandflushTypeStatusPropEnum, v)
	}
}

const (

	// CommandflushStatusPending captures enum value "Pending"
	CommandflushStatusPending string = "Pending"

	// CommandflushStatusFailed captures enum value "Failed"
	CommandflushStatusFailed string = "Failed"

	// CommandflushStatusPendingPlusFailed captures enum value "Pending+Failed"
	CommandflushStatusPendingPlusFailed string = "Pending+Failed"
)

// prop value enum
func (m *Commandflush) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commandflushTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Commandflush) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this commandflush based on the context it is used
func (m *Commandflush) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commandflush) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevices != nil {

		if swag.IsZero(m.MobileDevices) { // not required
			return nil
		}

		if err := m.MobileDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commandflush) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commandflush) UnmarshalBinary(b []byte) error {
	var res Commandflush
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommandflushMobileDevices commandflush mobile devices
//
// swagger:model CommandflushMobileDevices
type CommandflushMobileDevices struct {

	// mobile device
	MobileDevice *CommandflushMobileDevicesMobileDevice `json:"mobile_device,omitempty"`
}

// Validate validates this commandflush mobile devices
func (m *CommandflushMobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandflushMobileDevices) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this commandflush mobile devices based on the context it is used
func (m *CommandflushMobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandflushMobileDevices) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandflushMobileDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandflushMobileDevices) UnmarshalBinary(b []byte) error {
	var res CommandflushMobileDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommandflushMobileDevicesMobileDevice commandflush mobile devices mobile device
//
// swagger:model CommandflushMobileDevicesMobileDevice
type CommandflushMobileDevicesMobileDevice struct {

	// id
	// Required: true
	ID *int64 `json:"id"`
}

// Validate validates this commandflush mobile devices mobile device
func (m *CommandflushMobileDevicesMobileDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandflushMobileDevicesMobileDevice) validateID(formats strfmt.Registry) error {

	if err := validate.Required("mobile_devices"+"."+"mobile_device"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this commandflush mobile devices mobile device based on context it is used
func (m *CommandflushMobileDevicesMobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommandflushMobileDevicesMobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandflushMobileDevicesMobileDevice) UnmarshalBinary(b []byte) error {
	var res CommandflushMobileDevicesMobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
