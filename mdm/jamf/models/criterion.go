// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Criterion criterion
//
// swagger:model criterion
type Criterion struct {

	// and or
	// Enum: [and or]
	AndOr string `json:"and_or,omitempty"`

	// closing paren
	ClosingParen *bool `json:"closing_paren,omitempty"`

	// Name of the criteria
	// Example: Last Inventory Update
	Name string `json:"name,omitempty"`

	// opening paren
	OpeningParen *bool `json:"opening_paren,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// Operator
	// Example: more than x days ago
	SearchType string `json:"search_type,omitempty"`

	// value
	// Example: 7
	Value string `json:"value,omitempty"`
}

// Validate validates this criterion
func (m *Criterion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAndOr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var criterionTypeAndOrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["and","or"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		criterionTypeAndOrPropEnum = append(criterionTypeAndOrPropEnum, v)
	}
}

const (

	// CriterionAndOrAnd captures enum value "and"
	CriterionAndOrAnd string = "and"

	// CriterionAndOrOr captures enum value "or"
	CriterionAndOrOr string = "or"
)

// prop value enum
func (m *Criterion) validateAndOrEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, criterionTypeAndOrPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Criterion) validateAndOr(formats strfmt.Registry) error {
	if swag.IsZero(m.AndOr) { // not required
		return nil
	}

	// value enum
	if err := m.validateAndOrEnum("and_or", "body", m.AndOr); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this criterion based on context it is used
func (m *Criterion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Criterion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Criterion) UnmarshalBinary(b []byte) error {
	var res Criterion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
