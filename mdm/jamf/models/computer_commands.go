// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComputerCommands computer commands
//
// swagger:model computer_commands
type ComputerCommands []*ComputerCommandsItems0

// Validate validates this computer commands
func (m ComputerCommands) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this computer commands based on the context it is used
func (m ComputerCommands) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ComputerCommandsItems0 computer commands items0
//
// swagger:model ComputerCommandsItems0
type ComputerCommandsItems0 struct {

	// computer command
	ComputerCommand *ComputerCommandsItems0ComputerCommand `json:"computer_command,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer commands items0
func (m *ComputerCommandsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0) validateComputerCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputerCommand) { // not required
		return nil
	}

	if m.ComputerCommand != nil {
		if err := m.ComputerCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_command")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer commands items0 based on the context it is used
func (m *ComputerCommandsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputerCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0) contextValidateComputerCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputerCommand != nil {

		if swag.IsZero(m.ComputerCommand) { // not required
			return nil
		}

		if err := m.ComputerCommand.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer_command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer_command")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandsItems0) UnmarshalBinary(b []byte) error {
	var res ComputerCommandsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandsItems0ComputerCommand computer commands items0 computer command
//
// swagger:model ComputerCommandsItems0ComputerCommand
type ComputerCommandsItems0ComputerCommand struct {

	// Command type
	// Example: EraseDevice
	Command string `json:"command,omitempty"`

	// computers
	Computers []*ComputerCommandsItems0ComputerCommandComputersItems0 `json:"computers"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// profile id
	// Example: -1
	ProfileID int64 `json:"profile_id,omitempty"`

	// udid
	// Example: 002d47b9-ad68-4d58-9fc7-0c4a50950020
	Udid string `json:"udid,omitempty"`

	// uuid
	// Example: 002d47b9-ad68-4d58-9fc7-0c4a50950020
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this computer commands items0 computer command
func (m *ComputerCommandsItems0ComputerCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0ComputerCommand) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	for i := 0; i < len(m.Computers); i++ {
		if swag.IsZero(m.Computers[i]) { // not required
			continue
		}

		if m.Computers[i] != nil {
			if err := m.Computers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computer_command" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computer_command" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer commands items0 computer command based on the context it is used
func (m *ComputerCommandsItems0ComputerCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0ComputerCommand) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Computers); i++ {

		if m.Computers[i] != nil {

			if swag.IsZero(m.Computers[i]) { // not required
				return nil
			}

			if err := m.Computers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computer_command" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computer_command" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommand) UnmarshalBinary(b []byte) error {
	var res ComputerCommandsItems0ComputerCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandsItems0ComputerCommandComputersItems0 computer commands items0 computer command computers items0
//
// swagger:model ComputerCommandsItems0ComputerCommandComputersItems0
type ComputerCommandsItems0ComputerCommandComputersItems0 struct {

	// computer
	Computer *ComputerCommandsItems0ComputerCommandComputersItems0Computer `json:"computer,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer commands items0 computer command computers items0
func (m *ComputerCommandsItems0ComputerCommandComputersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0ComputerCommandComputersItems0) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandsItems0ComputerCommandComputersItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer commands items0 computer command computers items0 based on the context it is used
func (m *ComputerCommandsItems0ComputerCommandComputersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandsItems0ComputerCommandComputersItems0) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandsItems0ComputerCommandComputersItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommandComputersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommandComputersItems0) UnmarshalBinary(b []byte) error {
	var res ComputerCommandsItems0ComputerCommandComputersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandsItems0ComputerCommandComputersItems0Computer computer commands items0 computer command computers items0 computer
//
// swagger:model ComputerCommandsItems0ComputerCommandComputersItems0Computer
type ComputerCommandsItems0ComputerCommandComputersItems0Computer struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// ip address
	// Example: 10.1.1.1
	IPAddress string `json:"ip_address,omitempty"`

	// udid
	// Example: 002d47b9-ad68-4d58-9fc7-0c4a50950020
	Udid string `json:"udid,omitempty"`

	// users
	// Example: Username
	Users string `json:"users,omitempty"`
}

// Validate validates this computer commands items0 computer command computers items0 computer
func (m *ComputerCommandsItems0ComputerCommandComputersItems0Computer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer commands items0 computer command computers items0 computer based on context it is used
func (m *ComputerCommandsItems0ComputerCommandComputersItems0Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommandComputersItems0Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandsItems0ComputerCommandComputersItems0Computer) UnmarshalBinary(b []byte) error {
	var res ComputerCommandsItems0ComputerCommandComputersItems0Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
