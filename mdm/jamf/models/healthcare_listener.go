// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HealthcareListener healthcare listener
//
// swagger:model healthcare_listener
type HealthcareListener []*HealthcareListenerItems0

// Validate validates this healthcare listener
func (m HealthcareListener) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this healthcare listener based on the context it is used
func (m HealthcareListener) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// HealthcareListenerItems0 healthcare listener items0
//
// swagger:model HealthcareListenerItems0
type HealthcareListenerItems0 struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// infratructure manager id
	// Example: 1
	InfratructureManagerID int64 `json:"infratructure_manager_id,omitempty"`

	// name
	// Example: Healthcare Listener
	Name string `json:"name,omitempty"`

	// port
	// Example: 8080
	Port int64 `json:"port,omitempty"`

	// range ips
	RangeIps string `json:"range_ips,omitempty"`

	// rules
	Rules []*HealthcareListenerItems0RulesItems0 `json:"rules"`

	// single ips
	SingleIps string `json:"single_ips,omitempty"`
}

// Validate validates this healthcare listener items0
func (m *HealthcareListenerItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this healthcare listener items0 based on the context it is used
func (m *HealthcareListenerItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerItems0) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthcareListenerItems0RulesItems0 healthcare listener items0 rules items0
//
// swagger:model HealthcareListenerItems0RulesItems0
type HealthcareListenerItems0RulesItems0 struct {

	// rule
	Rule *HealthcareListenerItems0RulesItems0Rule `json:"rule,omitempty"`
}

// Validate validates this healthcare listener items0 rules items0
func (m *HealthcareListenerItems0RulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0RulesItems0) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this healthcare listener items0 rules items0 based on the context it is used
func (m *HealthcareListenerItems0RulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0RulesItems0) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {

		if swag.IsZero(m.Rule) { // not required
			return nil
		}

		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerItems0RulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthcareListenerItems0RulesItems0Rule healthcare listener items0 rules items0 rule
//
// swagger:model HealthcareListenerItems0RulesItems0Rule
type HealthcareListenerItems0RulesItems0Rule struct {

	// adt message
	AdtMessage string `json:"adt_message,omitempty"`

	// adt message field
	AdtMessageField string `json:"adt_message_field,omitempty"`

	// device inventory field
	// Example: -1
	DeviceInventoryField int64 `json:"device_inventory_field,omitempty"`

	// hcl id
	// Example: 1
	HclID int64 `json:"hcl_id,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// mdm command
	// Example: EnableLostMode
	MdmCommand string `json:"mdm_command,omitempty"`

	// mdm command additional data
	MdmCommandAdditionalData *HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData `json:"mdm_command_additional_data,omitempty"`

	// name
	// Example: Patient Discharge
	Name string `json:"name,omitempty"`

	// notification emails
	NotificationEmails *HealthcareListenerItems0RulesItems0RuleNotificationEmails `json:"notification_emails,omitempty"`

	// notification enabled
	NotificationEnabled bool `json:"notification_enabled,omitempty"`

	// notification threshold
	// Example: 15
	NotificationThreshold int64 `json:"notification_threshold,omitempty"`

	// notify unsupported enabled
	NotifyUnsupportedEnabled bool `json:"notify_unsupported_enabled,omitempty"`

	// operating system
	// Example: iPhone
	OperatingSystem string `json:"operating_system,omitempty"`
}

// Validate validates this healthcare listener items0 rules items0 rule
func (m *HealthcareListenerItems0RulesItems0Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMdmCommandAdditionalData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationEmails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0RulesItems0Rule) validateMdmCommandAdditionalData(formats strfmt.Registry) error {
	if swag.IsZero(m.MdmCommandAdditionalData) { // not required
		return nil
	}

	if m.MdmCommandAdditionalData != nil {
		if err := m.MdmCommandAdditionalData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule" + "." + "mdm_command_additional_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule" + "." + "mdm_command_additional_data")
			}
			return err
		}
	}

	return nil
}

func (m *HealthcareListenerItems0RulesItems0Rule) validateNotificationEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationEmails) { // not required
		return nil
	}

	if m.NotificationEmails != nil {
		if err := m.NotificationEmails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule" + "." + "notification_emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule" + "." + "notification_emails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this healthcare listener items0 rules items0 rule based on the context it is used
func (m *HealthcareListenerItems0RulesItems0Rule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMdmCommandAdditionalData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotificationEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthcareListenerItems0RulesItems0Rule) contextValidateMdmCommandAdditionalData(ctx context.Context, formats strfmt.Registry) error {

	if m.MdmCommandAdditionalData != nil {

		if swag.IsZero(m.MdmCommandAdditionalData) { // not required
			return nil
		}

		if err := m.MdmCommandAdditionalData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule" + "." + "mdm_command_additional_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule" + "." + "mdm_command_additional_data")
			}
			return err
		}
	}

	return nil
}

func (m *HealthcareListenerItems0RulesItems0Rule) contextValidateNotificationEmails(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationEmails != nil {

		if swag.IsZero(m.NotificationEmails) { // not required
			return nil
		}

		if err := m.NotificationEmails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule" + "." + "notification_emails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule" + "." + "notification_emails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0Rule) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerItems0RulesItems0Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData healthcare listener items0 rules items0 rule mdm command additional data
//
// swagger:model HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData
type HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData struct {

	// lost mode footnote
	LostModeFootnote string `json:"lost_mode_footnote,omitempty"`

	// lost mode message
	LostModeMessage string `json:"lost_mode_message,omitempty"`

	// lost mode option
	LostModeOption string `json:"lost_mode_option,omitempty"`

	// lost mode persistent
	LostModePersistent string `json:"lost_mode_persistent,omitempty"`

	// lost mode phone
	LostModePhone string `json:"lost_mode_phone,omitempty"`

	// lost mode sound
	LostModeSound bool `json:"lost_mode_sound,omitempty"`
}

// Validate validates this healthcare listener items0 rules items0 rule mdm command additional data
func (m *HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this healthcare listener items0 rules items0 rule mdm command additional data based on context it is used
func (m *HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerItems0RulesItems0RuleMdmCommandAdditionalData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthcareListenerItems0RulesItems0RuleNotificationEmails healthcare listener items0 rules items0 rule notification emails
//
// swagger:model HealthcareListenerItems0RulesItems0RuleNotificationEmails
type HealthcareListenerItems0RulesItems0RuleNotificationEmails struct {

	// email
	// Example: travis@company.com
	Email string `json:"email,omitempty"`
}

// Validate validates this healthcare listener items0 rules items0 rule notification emails
func (m *HealthcareListenerItems0RulesItems0RuleNotificationEmails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this healthcare listener items0 rules items0 rule notification emails based on context it is used
func (m *HealthcareListenerItems0RulesItems0RuleNotificationEmails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0RuleNotificationEmails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthcareListenerItems0RulesItems0RuleNotificationEmails) UnmarshalBinary(b []byte) error {
	var res HealthcareListenerItems0RulesItems0RuleNotificationEmails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
