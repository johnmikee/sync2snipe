// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClassPost class
//
// swagger:model class_post
type ClassPost struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// meeting times
	MeetingTimes *ClassPostMeetingTimes `json:"meeting_times,omitempty"`

	// Name of the class
	// Example: Math 101
	// Required: true
	Name *string `json:"name"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// source
	// Example: N/A
	Source string `json:"source,omitempty"`
}

// Validate validates this class post
func (m *ClassPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeetingTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClassPost) validateMeetingTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.MeetingTimes) { // not required
		return nil
	}

	if m.MeetingTimes != nil {
		if err := m.MeetingTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meeting_times")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meeting_times")
			}
			return err
		}
	}

	return nil
}

func (m *ClassPost) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClassPost) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this class post based on the context it is used
func (m *ClassPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeetingTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClassPost) contextValidateMeetingTimes(ctx context.Context, formats strfmt.Registry) error {

	if m.MeetingTimes != nil {

		if swag.IsZero(m.MeetingTimes) { // not required
			return nil
		}

		if err := m.MeetingTimes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meeting_times")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meeting_times")
			}
			return err
		}
	}

	return nil
}

func (m *ClassPost) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClassPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClassPost) UnmarshalBinary(b []byte) error {
	var res ClassPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClassPostMeetingTimes class post meeting times
//
// swagger:model ClassPostMeetingTimes
type ClassPostMeetingTimes struct {

	// meeting time
	MeetingTime *ClassPostMeetingTimesMeetingTime `json:"meeting_time,omitempty"`
}

// Validate validates this class post meeting times
func (m *ClassPostMeetingTimes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeetingTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClassPostMeetingTimes) validateMeetingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.MeetingTime) { // not required
		return nil
	}

	if m.MeetingTime != nil {
		if err := m.MeetingTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meeting_times" + "." + "meeting_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meeting_times" + "." + "meeting_time")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this class post meeting times based on the context it is used
func (m *ClassPostMeetingTimes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeetingTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClassPostMeetingTimes) contextValidateMeetingTime(ctx context.Context, formats strfmt.Registry) error {

	if m.MeetingTime != nil {

		if swag.IsZero(m.MeetingTime) { // not required
			return nil
		}

		if err := m.MeetingTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meeting_times" + "." + "meeting_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meeting_times" + "." + "meeting_time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClassPostMeetingTimes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClassPostMeetingTimes) UnmarshalBinary(b []byte) error {
	var res ClassPostMeetingTimes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClassPostMeetingTimesMeetingTime class post meeting times meeting time
//
// swagger:model ClassPostMeetingTimesMeetingTime
type ClassPostMeetingTimesMeetingTime struct {

	// days
	// Example: M W F
	// Enum: [M T W Th F Sa Su]
	Days string `json:"days,omitempty"`

	// end time
	// Example: 1345
	EndTime int64 `json:"end_time,omitempty"`

	// start time
	// Example: 1300
	StartTime int64 `json:"start_time,omitempty"`
}

// Validate validates this class post meeting times meeting time
func (m *ClassPostMeetingTimesMeetingTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var classPostMeetingTimesMeetingTimeTypeDaysPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M","T","W","Th","F","Sa","Su"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		classPostMeetingTimesMeetingTimeTypeDaysPropEnum = append(classPostMeetingTimesMeetingTimeTypeDaysPropEnum, v)
	}
}

const (

	// ClassPostMeetingTimesMeetingTimeDaysM captures enum value "M"
	ClassPostMeetingTimesMeetingTimeDaysM string = "M"

	// ClassPostMeetingTimesMeetingTimeDaysT captures enum value "T"
	ClassPostMeetingTimesMeetingTimeDaysT string = "T"

	// ClassPostMeetingTimesMeetingTimeDaysW captures enum value "W"
	ClassPostMeetingTimesMeetingTimeDaysW string = "W"

	// ClassPostMeetingTimesMeetingTimeDaysTh captures enum value "Th"
	ClassPostMeetingTimesMeetingTimeDaysTh string = "Th"

	// ClassPostMeetingTimesMeetingTimeDaysF captures enum value "F"
	ClassPostMeetingTimesMeetingTimeDaysF string = "F"

	// ClassPostMeetingTimesMeetingTimeDaysSa captures enum value "Sa"
	ClassPostMeetingTimesMeetingTimeDaysSa string = "Sa"

	// ClassPostMeetingTimesMeetingTimeDaysSu captures enum value "Su"
	ClassPostMeetingTimesMeetingTimeDaysSu string = "Su"
)

// prop value enum
func (m *ClassPostMeetingTimesMeetingTime) validateDaysEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, classPostMeetingTimesMeetingTimeTypeDaysPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClassPostMeetingTimesMeetingTime) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	// value enum
	if err := m.validateDaysEnum("meeting_times"+"."+"meeting_time"+"."+"days", "body", m.Days); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this class post meeting times meeting time based on context it is used
func (m *ClassPostMeetingTimesMeetingTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClassPostMeetingTimesMeetingTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClassPostMeetingTimesMeetingTime) UnmarshalBinary(b []byte) error {
	var res ClassPostMeetingTimesMeetingTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
