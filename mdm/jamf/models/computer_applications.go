// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComputerApplications computer applications
//
// swagger:model computer_applications
type ComputerApplications struct {

	// unique computers
	UniqueComputers *ComputerApplicationsUniqueComputers `json:"unique_computers,omitempty"`

	// versions
	Versions *ComputerApplicationsVersions `json:"versions,omitempty"`
}

// Validate validates this computer applications
func (m *ComputerApplications) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUniqueComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplications) validateUniqueComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.UniqueComputers) { // not required
		return nil
	}

	if m.UniqueComputers != nil {
		if err := m.UniqueComputers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unique_computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unique_computers")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerApplications) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	if m.Versions != nil {
		if err := m.Versions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer applications based on the context it is used
func (m *ComputerApplications) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUniqueComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplications) contextValidateUniqueComputers(ctx context.Context, formats strfmt.Registry) error {

	if m.UniqueComputers != nil {

		if swag.IsZero(m.UniqueComputers) { // not required
			return nil
		}

		if err := m.UniqueComputers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unique_computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unique_computers")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerApplications) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	if m.Versions != nil {

		if swag.IsZero(m.Versions) { // not required
			return nil
		}

		if err := m.Versions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerApplications) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerApplications) UnmarshalBinary(b []byte) error {
	var res ComputerApplications
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerApplicationsUniqueComputers computer applications unique computers
//
// swagger:model ComputerApplicationsUniqueComputers
type ComputerApplicationsUniqueComputers struct {

	// computer
	Computer []*ComputerApplicationsComputer `json:"computer"`
}

// Validate validates this computer applications unique computers
func (m *ComputerApplicationsUniqueComputers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplicationsUniqueComputers) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	for i := 0; i < len(m.Computer); i++ {
		if swag.IsZero(m.Computer[i]) { // not required
			continue
		}

		if m.Computer[i] != nil {
			if err := m.Computer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unique_computers" + "." + "computer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unique_computers" + "." + "computer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this computer applications unique computers based on the context it is used
func (m *ComputerApplicationsUniqueComputers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplicationsUniqueComputers) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Computer); i++ {

		if m.Computer[i] != nil {

			if swag.IsZero(m.Computer[i]) { // not required
				return nil
			}

			if err := m.Computer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unique_computers" + "." + "computer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unique_computers" + "." + "computer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerApplicationsUniqueComputers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerApplicationsUniqueComputers) UnmarshalBinary(b []byte) error {
	var res ComputerApplicationsUniqueComputers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerApplicationsVersions computer applications versions
//
// swagger:model ComputerApplicationsVersions
type ComputerApplicationsVersions struct {

	// version
	Version []ComputerApplicationsVersion `json:"version"`
}

// Validate validates this computer applications versions
func (m *ComputerApplicationsVersions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplicationsVersions) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	for i := 0; i < len(m.Version); i++ {

		if err := m.Version[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versions" + "." + "version" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versions" + "." + "version" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this computer applications versions based on the context it is used
func (m *ComputerApplicationsVersions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerApplicationsVersions) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Version); i++ {

		if err := m.Version[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versions" + "." + "version" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versions" + "." + "version" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerApplicationsVersions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerApplicationsVersions) UnmarshalBinary(b []byte) error {
	var res ComputerApplicationsVersions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
