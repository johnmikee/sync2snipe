// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
//
// swagger:model group
type Group struct {

	// access level
	// Enum: [Full Access Site Access Group Access]
	AccessLevel string `json:"access_level,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// members
	Members []*GroupMembersItems0 `json:"members"`

	// Group name
	// Example: Administrators
	// Required: true
	Name *string `json:"name"`

	// privilege set
	// Enum: [Administrator Auditor Enrollment Only Custom]
	PrivilegeSet string `json:"privilege_set,omitempty"`

	// privileges
	Privileges *GroupPrivileges `json:"privileges,omitempty"`

	// site
	Site *Site `json:"site,omitempty"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegeSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var groupTypeAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Full Access","Site Access","Group Access"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupTypeAccessLevelPropEnum = append(groupTypeAccessLevelPropEnum, v)
	}
}

const (

	// GroupAccessLevelFullAccess captures enum value "Full Access"
	GroupAccessLevelFullAccess string = "Full Access"

	// GroupAccessLevelSiteAccess captures enum value "Site Access"
	GroupAccessLevelSiteAccess string = "Site Access"

	// GroupAccessLevelGroupAccess captures enum value "Group Access"
	GroupAccessLevelGroupAccess string = "Group Access"
)

// prop value enum
func (m *Group) validateAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupTypeAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Group) validateAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessLevelEnum("access_level", "body", m.AccessLevel); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var groupTypePrivilegeSetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Administrator","Auditor","Enrollment Only","Custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupTypePrivilegeSetPropEnum = append(groupTypePrivilegeSetPropEnum, v)
	}
}

const (

	// GroupPrivilegeSetAdministrator captures enum value "Administrator"
	GroupPrivilegeSetAdministrator string = "Administrator"

	// GroupPrivilegeSetAuditor captures enum value "Auditor"
	GroupPrivilegeSetAuditor string = "Auditor"

	// GroupPrivilegeSetEnrollmentOnly captures enum value "Enrollment Only"
	GroupPrivilegeSetEnrollmentOnly string = "Enrollment Only"

	// GroupPrivilegeSetCustom captures enum value "Custom"
	GroupPrivilegeSetCustom string = "Custom"
)

// prop value enum
func (m *Group) validatePrivilegeSetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, groupTypePrivilegeSetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Group) validatePrivilegeSet(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivilegeSet) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivilegeSetEnum("privilege_set", "body", m.PrivilegeSet); err != nil {
		return err
	}

	return nil
}

func (m *Group) validatePrivileges(formats strfmt.Registry) error {
	if swag.IsZero(m.Privileges) { // not required
		return nil
	}

	if m.Privileges != nil {
		if err := m.Privileges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privileges")
			}
			return err
		}
	}

	return nil
}

func (m *Group) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this group based on the context it is used
func (m *Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivileges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {

			if swag.IsZero(m.Members[i]) { // not required
				return nil
			}

			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Group) contextValidatePrivileges(ctx context.Context, formats strfmt.Registry) error {

	if m.Privileges != nil {

		if swag.IsZero(m.Privileges) { // not required
			return nil
		}

		if err := m.Privileges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privileges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privileges")
			}
			return err
		}
	}

	return nil
}

func (m *Group) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupMembersItems0 group members items0
//
// swagger:model GroupMembersItems0
type GroupMembersItems0 struct {

	// user
	User *IDName `json:"user,omitempty"`
}

// Validate validates this group members items0
func (m *GroupMembersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupMembersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this group members items0 based on the context it is used
func (m *GroupMembersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupMembersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupMembersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupMembersItems0) UnmarshalBinary(b []byte) error {
	var res GroupMembersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivileges group privileges
//
// swagger:model GroupPrivileges
type GroupPrivileges struct {

	// casper admin
	CasperAdmin []*GroupPrivilegesCasperAdminItems0 `json:"casper_admin"`

	// casper imaging
	CasperImaging []*GroupPrivilegesCasperImagingItems0 `json:"casper_imaging"`

	// casper remote
	CasperRemote []*GroupPrivilegesCasperRemoteItems0 `json:"casper_remote"`

	// jss actions
	JssActions []*GroupPrivilegesJssActionsItems0 `json:"jss_actions"`

	// jss objects
	JssObjects []*GroupPrivilegesJssObjectsItems0 `json:"jss_objects"`

	// jss settings
	JssSettings []*GroupPrivilegesJssSettingsItems0 `json:"jss_settings"`

	// recon
	Recon []*GroupPrivilegesReconItems0 `json:"recon"`
}

// Validate validates this group privileges
func (m *GroupPrivileges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCasperAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCasperImaging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCasperRemote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupPrivileges) validateCasperAdmin(formats strfmt.Registry) error {
	if swag.IsZero(m.CasperAdmin) { // not required
		return nil
	}

	for i := 0; i < len(m.CasperAdmin); i++ {
		if swag.IsZero(m.CasperAdmin[i]) { // not required
			continue
		}

		if m.CasperAdmin[i] != nil {
			if err := m.CasperAdmin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_admin" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_admin" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateCasperImaging(formats strfmt.Registry) error {
	if swag.IsZero(m.CasperImaging) { // not required
		return nil
	}

	for i := 0; i < len(m.CasperImaging); i++ {
		if swag.IsZero(m.CasperImaging[i]) { // not required
			continue
		}

		if m.CasperImaging[i] != nil {
			if err := m.CasperImaging[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_imaging" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_imaging" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateCasperRemote(formats strfmt.Registry) error {
	if swag.IsZero(m.CasperRemote) { // not required
		return nil
	}

	for i := 0; i < len(m.CasperRemote); i++ {
		if swag.IsZero(m.CasperRemote[i]) { // not required
			continue
		}

		if m.CasperRemote[i] != nil {
			if err := m.CasperRemote[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_remote" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_remote" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateJssActions(formats strfmt.Registry) error {
	if swag.IsZero(m.JssActions) { // not required
		return nil
	}

	for i := 0; i < len(m.JssActions); i++ {
		if swag.IsZero(m.JssActions[i]) { // not required
			continue
		}

		if m.JssActions[i] != nil {
			if err := m.JssActions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateJssObjects(formats strfmt.Registry) error {
	if swag.IsZero(m.JssObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.JssObjects); i++ {
		if swag.IsZero(m.JssObjects[i]) { // not required
			continue
		}

		if m.JssObjects[i] != nil {
			if err := m.JssObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateJssSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.JssSettings) { // not required
		return nil
	}

	for i := 0; i < len(m.JssSettings); i++ {
		if swag.IsZero(m.JssSettings[i]) { // not required
			continue
		}

		if m.JssSettings[i] != nil {
			if err := m.JssSettings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_settings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) validateRecon(formats strfmt.Registry) error {
	if swag.IsZero(m.Recon) { // not required
		return nil
	}

	for i := 0; i < len(m.Recon); i++ {
		if swag.IsZero(m.Recon[i]) { // not required
			continue
		}

		if m.Recon[i] != nil {
			if err := m.Recon[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "recon" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "recon" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this group privileges based on the context it is used
func (m *GroupPrivileges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCasperAdmin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCasperImaging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCasperRemote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupPrivileges) contextValidateCasperAdmin(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CasperAdmin); i++ {

		if m.CasperAdmin[i] != nil {

			if swag.IsZero(m.CasperAdmin[i]) { // not required
				return nil
			}

			if err := m.CasperAdmin[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_admin" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_admin" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateCasperImaging(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CasperImaging); i++ {

		if m.CasperImaging[i] != nil {

			if swag.IsZero(m.CasperImaging[i]) { // not required
				return nil
			}

			if err := m.CasperImaging[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_imaging" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_imaging" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateCasperRemote(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CasperRemote); i++ {

		if m.CasperRemote[i] != nil {

			if swag.IsZero(m.CasperRemote[i]) { // not required
				return nil
			}

			if err := m.CasperRemote[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "casper_remote" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "casper_remote" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateJssActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssActions); i++ {

		if m.JssActions[i] != nil {

			if swag.IsZero(m.JssActions[i]) { // not required
				return nil
			}

			if err := m.JssActions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateJssObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssObjects); i++ {

		if m.JssObjects[i] != nil {

			if swag.IsZero(m.JssObjects[i]) { // not required
				return nil
			}

			if err := m.JssObjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateJssSettings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssSettings); i++ {

		if m.JssSettings[i] != nil {

			if swag.IsZero(m.JssSettings[i]) { // not required
				return nil
			}

			if err := m.JssSettings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "jss_settings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "jss_settings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupPrivileges) contextValidateRecon(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Recon); i++ {

		if m.Recon[i] != nil {

			if swag.IsZero(m.Recon[i]) { // not required
				return nil
			}

			if err := m.Recon[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privileges" + "." + "recon" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("privileges" + "." + "recon" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivileges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivileges) UnmarshalBinary(b []byte) error {
	var res GroupPrivileges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesCasperAdminItems0 group privileges casper admin items0
//
// swagger:model GroupPrivilegesCasperAdminItems0
type GroupPrivilegesCasperAdminItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges casper admin items0
func (m *GroupPrivilegesCasperAdminItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges casper admin items0 based on context it is used
func (m *GroupPrivilegesCasperAdminItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesCasperAdminItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesCasperAdminItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesCasperAdminItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesCasperImagingItems0 group privileges casper imaging items0
//
// swagger:model GroupPrivilegesCasperImagingItems0
type GroupPrivilegesCasperImagingItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges casper imaging items0
func (m *GroupPrivilegesCasperImagingItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges casper imaging items0 based on context it is used
func (m *GroupPrivilegesCasperImagingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesCasperImagingItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesCasperImagingItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesCasperImagingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesCasperRemoteItems0 group privileges casper remote items0
//
// swagger:model GroupPrivilegesCasperRemoteItems0
type GroupPrivilegesCasperRemoteItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges casper remote items0
func (m *GroupPrivilegesCasperRemoteItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges casper remote items0 based on context it is used
func (m *GroupPrivilegesCasperRemoteItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesCasperRemoteItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesCasperRemoteItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesCasperRemoteItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesJssActionsItems0 group privileges jss actions items0
//
// swagger:model GroupPrivilegesJssActionsItems0
type GroupPrivilegesJssActionsItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges jss actions items0
func (m *GroupPrivilegesJssActionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges jss actions items0 based on context it is used
func (m *GroupPrivilegesJssActionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesJssActionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesJssActionsItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesJssActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesJssObjectsItems0 group privileges jss objects items0
//
// swagger:model GroupPrivilegesJssObjectsItems0
type GroupPrivilegesJssObjectsItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges jss objects items0
func (m *GroupPrivilegesJssObjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges jss objects items0 based on context it is used
func (m *GroupPrivilegesJssObjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesJssObjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesJssObjectsItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesJssObjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesJssSettingsItems0 group privileges jss settings items0
//
// swagger:model GroupPrivilegesJssSettingsItems0
type GroupPrivilegesJssSettingsItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges jss settings items0
func (m *GroupPrivilegesJssSettingsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges jss settings items0 based on context it is used
func (m *GroupPrivilegesJssSettingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesJssSettingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesJssSettingsItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesJssSettingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupPrivilegesReconItems0 group privileges recon items0
//
// swagger:model GroupPrivilegesReconItems0
type GroupPrivilegesReconItems0 struct {

	// privilege
	Privilege string `json:"privilege,omitempty"`
}

// Validate validates this group privileges recon items0
func (m *GroupPrivilegesReconItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group privileges recon items0 based on context it is used
func (m *GroupPrivilegesReconItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupPrivilegesReconItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupPrivilegesReconItems0) UnmarshalBinary(b []byte) error {
	var res GroupPrivilegesReconItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
