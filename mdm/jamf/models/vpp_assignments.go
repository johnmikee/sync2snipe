// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VppAssignments vpp assignments
//
// swagger:model vpp_assignments
type VppAssignments []*VppAssignmentsItems0

// Validate validates this vpp assignments
func (m VppAssignments) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this vpp assignments based on the context it is used
func (m VppAssignments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// VppAssignmentsItems0 vpp assignments items0
//
// swagger:model VppAssignmentsItems0
type VppAssignmentsItems0 struct {

	// vpp assignment
	VppAssignment *VppAssignmentsItems0VppAssignment `json:"vpp_assignment,omitempty"`
}

// Validate validates this vpp assignments items0
func (m *VppAssignmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVppAssignment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAssignmentsItems0) validateVppAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.VppAssignment) { // not required
		return nil
	}

	if m.VppAssignment != nil {
		if err := m.VppAssignment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpp_assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpp_assignment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vpp assignments items0 based on the context it is used
func (m *VppAssignmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVppAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAssignmentsItems0) contextValidateVppAssignment(ctx context.Context, formats strfmt.Registry) error {

	if m.VppAssignment != nil {

		if swag.IsZero(m.VppAssignment) { // not required
			return nil
		}

		if err := m.VppAssignment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpp_assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpp_assignment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VppAssignmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VppAssignmentsItems0) UnmarshalBinary(b []byte) error {
	var res VppAssignmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VppAssignmentsItems0VppAssignment vpp assignments items0 vpp assignment
//
// swagger:model VppAssignmentsItems0VppAssignment
type VppAssignmentsItems0VppAssignment struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: 9th Grade VPP Assignments
	Name string `json:"name,omitempty"`

	// vpp admin account id
	// Example: 1
	VppAdminAccountID int64 `json:"vpp_admin_account_id,omitempty"`
}

// Validate validates this vpp assignments items0 vpp assignment
func (m *VppAssignmentsItems0VppAssignment) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vpp assignments items0 vpp assignment based on context it is used
func (m *VppAssignmentsItems0VppAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VppAssignmentsItems0VppAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VppAssignmentsItems0VppAssignment) UnmarshalBinary(b []byte) error {
	var res VppAssignmentsItems0VppAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
