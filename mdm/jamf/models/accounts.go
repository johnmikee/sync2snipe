// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Accounts accounts
//
// swagger:model accounts
type Accounts struct {

	// groups
	Groups *AccountsGroups `json:"groups,omitempty"`

	// users
	Users *AccountsUsers `json:"users,omitempty"`
}

// Validate validates this accounts
func (m *Accounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Accounts) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if m.Groups != nil {
		if err := m.Groups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

func (m *Accounts) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this accounts based on the context it is used
func (m *Accounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Accounts) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.Groups != nil {

		if swag.IsZero(m.Groups) { // not required
			return nil
		}

		if err := m.Groups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

func (m *Accounts) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {

		if swag.IsZero(m.Users) { // not required
			return nil
		}

		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Accounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Accounts) UnmarshalBinary(b []byte) error {
	var res Accounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountsGroups accounts groups
//
// swagger:model AccountsGroups
type AccountsGroups struct {

	// group
	Group []*AccountsGroupsGroupItems0 `json:"group"`
}

// Validate validates this accounts groups
func (m *AccountsGroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsGroups) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	for i := 0; i < len(m.Group); i++ {
		if swag.IsZero(m.Group[i]) { // not required
			continue
		}

		if m.Group[i] != nil {
			if err := m.Group[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + "group" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + "group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this accounts groups based on the context it is used
func (m *AccountsGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsGroups) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Group); i++ {

		if m.Group[i] != nil {

			if swag.IsZero(m.Group[i]) { // not required
				return nil
			}

			if err := m.Group[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + "group" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + "group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountsGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountsGroups) UnmarshalBinary(b []byte) error {
	var res AccountsGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountsGroupsGroupItems0 accounts groups group items0
//
// swagger:model AccountsGroupsGroupItems0
type AccountsGroupsGroupItems0 struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the group
	// Example: Information Technology
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this accounts groups group items0
func (m *AccountsGroupsGroupItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsGroupsGroupItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this accounts groups group items0 based on context it is used
func (m *AccountsGroupsGroupItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountsGroupsGroupItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountsGroupsGroupItems0) UnmarshalBinary(b []byte) error {
	var res AccountsGroupsGroupItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountsUsers accounts users
//
// swagger:model AccountsUsers
type AccountsUsers struct {

	// user
	User []*AccountsUsersUserItems0 `json:"user"`
}

// Validate validates this accounts users
func (m *AccountsUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsUsers) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	for i := 0; i < len(m.User); i++ {
		if swag.IsZero(m.User[i]) { // not required
			continue
		}

		if m.User[i] != nil {
			if err := m.User[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + "user" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + "user" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this accounts users based on the context it is used
func (m *AccountsUsers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsUsers) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.User); i++ {

		if m.User[i] != nil {

			if swag.IsZero(m.User[i]) { // not required
				return nil
			}

			if err := m.User[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + "user" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + "user" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountsUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountsUsers) UnmarshalBinary(b []byte) error {
	var res AccountsUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountsUsersUserItems0 accounts users user items0
//
// swagger:model AccountsUsersUserItems0
type AccountsUsersUserItems0 struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the account
	// Example: Steve Jobs
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this accounts users user items0
func (m *AccountsUsersUserItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsUsersUserItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this accounts users user items0 based on context it is used
func (m *AccountsUsersUserItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountsUsersUserItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountsUsersUserItems0) UnmarshalBinary(b []byte) error {
	var res AccountsUsersUserItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
