// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDeviceConfigurationProfile mobile device configuration profile
//
// swagger:model mobile_device_configuration_profile
type MobileDeviceConfigurationProfile struct {

	// general
	General *MobileDeviceConfigurationProfileGeneral `json:"general,omitempty"`

	// scope
	Scope *MobileDeviceConfigurationProfileScope `json:"scope,omitempty"`

	// self service
	SelfService *MobileDeviceConfigurationProfileSelfService `json:"self_service,omitempty"`
}

// Validate validates this mobile device configuration profile
func (m *MobileDeviceConfigurationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfile) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfile) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfile) validateSelfService(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfService) { // not required
		return nil
	}

	if m.SelfService != nil {
		if err := m.SelfService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile based on the context it is used
func (m *MobileDeviceConfigurationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfile) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfile) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfile) contextValidateSelfService(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfService != nil {

		if swag.IsZero(m.SelfService) { // not required
			return nil
		}

		if err := m.SelfService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfile) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileGeneral mobile device configuration profile general
//
// swagger:model MobileDeviceConfigurationProfileGeneral
type MobileDeviceConfigurationProfileGeneral struct {

	// category
	Category *CategoryObject `json:"category,omitempty"`

	// deployment method
	// Enum: [Install Automatically Make Available in Self Service]
	DeploymentMethod string `json:"deployment_method,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Level of the configuration profile
	// Enum: [System User]
	Level *string `json:"level,omitempty"`

	// Name of the configuration profile
	// Example: Corporate Wireless
	// Required: true
	Name *string `json:"name"`

	// payloads
	Payloads string `json:"payloads,omitempty"`

	// redeploy dayss before certificate expires
	RedeployDayssBeforeCertificateExpires int64 `json:"redeploy_Dayss_before_certificate_expires,omitempty"`

	// redeploy on update
	// Example: Newly Assigned
	RedeployOnUpdate string `json:"redeploy_on_update,omitempty"`

	// site
	Site *SiteObject `json:"site,omitempty"`

	// uuid
	// Example: 55900BDC-347C-58B1-D249-F32244B11D30
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this mobile device configuration profile general
func (m *MobileDeviceConfigurationProfileGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

var mobileDeviceConfigurationProfileGeneralTypeDeploymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Install Automatically","Make Available in Self Service"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceConfigurationProfileGeneralTypeDeploymentMethodPropEnum = append(mobileDeviceConfigurationProfileGeneralTypeDeploymentMethodPropEnum, v)
	}
}

const (

	// MobileDeviceConfigurationProfileGeneralDeploymentMethodInstallAutomatically captures enum value "Install Automatically"
	MobileDeviceConfigurationProfileGeneralDeploymentMethodInstallAutomatically string = "Install Automatically"

	// MobileDeviceConfigurationProfileGeneralDeploymentMethodMakeAvailableInSelfService captures enum value "Make Available in Self Service"
	MobileDeviceConfigurationProfileGeneralDeploymentMethodMakeAvailableInSelfService string = "Make Available in Self Service"
)

// prop value enum
func (m *MobileDeviceConfigurationProfileGeneral) validateDeploymentMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceConfigurationProfileGeneralTypeDeploymentMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) validateDeploymentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentMethodEnum("general"+"."+"deployment_method", "body", m.DeploymentMethod); err != nil {
		return err
	}

	return nil
}

var mobileDeviceConfigurationProfileGeneralTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["System","User"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceConfigurationProfileGeneralTypeLevelPropEnum = append(mobileDeviceConfigurationProfileGeneralTypeLevelPropEnum, v)
	}
}

const (

	// MobileDeviceConfigurationProfileGeneralLevelSystem captures enum value "System"
	MobileDeviceConfigurationProfileGeneralLevelSystem string = "System"

	// MobileDeviceConfigurationProfileGeneralLevelUser captures enum value "User"
	MobileDeviceConfigurationProfileGeneralLevelUser string = "User"
)

// prop value enum
func (m *MobileDeviceConfigurationProfileGeneral) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceConfigurationProfileGeneralTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("general"+"."+"level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) validateName(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile general based on the context it is used
func (m *MobileDeviceConfigurationProfileGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "category")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileGeneral) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileGeneral) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScope mobile device configuration profile scope
//
// swagger:model MobileDeviceConfigurationProfileScope
type MobileDeviceConfigurationProfileScope struct {

	// all jss users
	AllJssUsers bool `json:"all_jss_users,omitempty"`

	// all mobile devices
	AllMobileDevices bool `json:"all_mobile_devices,omitempty"`

	// buildings
	Buildings []*MobileDeviceConfigurationProfileScopeBuildingsItems0 `json:"buildings"`

	// departments
	Departments []*MobileDeviceConfigurationProfileScopeDepartmentsItems0 `json:"departments"`

	// exclusions
	Exclusions *MobileDeviceConfigurationProfileScopeExclusions `json:"exclusions,omitempty"`

	// jss user groups
	JssUserGroups []*MobileDeviceConfigurationProfileScopeJssUserGroupsItems0 `json:"jss_user_groups"`

	// jss users
	JssUsers []*MobileDeviceConfigurationProfileScopeJssUsersItems0 `json:"jss_users"`

	// limitations
	Limitations *MobileDeviceConfigurationProfileScopeLimitations `json:"limitations,omitempty"`

	// mobile device groups
	MobileDeviceGroups []*MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0 `json:"mobile_device_groups"`

	// mobile devices
	MobileDevices []*MobileDeviceConfigurationProfileScopeMobileDevicesItems0 `json:"mobile_devices"`
}

// Validate validates this mobile device configuration profile scope
func (m *MobileDeviceConfigurationProfileScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDeviceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateBuildings(formats strfmt.Registry) error {
	if swag.IsZero(m.Buildings) { // not required
		return nil
	}

	for i := 0; i < len(m.Buildings); i++ {
		if swag.IsZero(m.Buildings[i]) { // not required
			continue
		}

		if m.Buildings[i] != nil {
			if err := m.Buildings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {
		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {
			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateExclusions(formats strfmt.Registry) error {
	if swag.IsZero(m.Exclusions) { // not required
		return nil
	}

	if m.Exclusions != nil {
		if err := m.Exclusions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "exclusions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateJssUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUserGroups); i++ {
		if swag.IsZero(m.JssUserGroups[i]) { // not required
			continue
		}

		if m.JssUserGroups[i] != nil {
			if err := m.JssUserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateJssUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUsers); i++ {
		if swag.IsZero(m.JssUsers[i]) { // not required
			continue
		}

		if m.JssUsers[i] != nil {
			if err := m.JssUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateLimitations(formats strfmt.Registry) error {
	if swag.IsZero(m.Limitations) { // not required
		return nil
	}

	if m.Limitations != nil {
		if err := m.Limitations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "limitations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "limitations")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateMobileDeviceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.MobileDeviceGroups); i++ {
		if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
			continue
		}

		if m.MobileDeviceGroups[i] != nil {
			if err := m.MobileDeviceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.MobileDevices); i++ {
		if swag.IsZero(m.MobileDevices[i]) { // not required
			continue
		}

		if m.MobileDevices[i] != nil {
			if err := m.MobileDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope based on the context it is used
func (m *MobileDeviceConfigurationProfileScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExclusions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimitations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDeviceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateBuildings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Buildings); i++ {

		if m.Buildings[i] != nil {

			if swag.IsZero(m.Buildings[i]) { // not required
				return nil
			}

			if err := m.Buildings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateDepartments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departments); i++ {

		if m.Departments[i] != nil {

			if swag.IsZero(m.Departments[i]) { // not required
				return nil
			}

			if err := m.Departments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateExclusions(ctx context.Context, formats strfmt.Registry) error {

	if m.Exclusions != nil {

		if swag.IsZero(m.Exclusions) { // not required
			return nil
		}

		if err := m.Exclusions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "exclusions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateJssUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUserGroups); i++ {

		if m.JssUserGroups[i] != nil {

			if swag.IsZero(m.JssUserGroups[i]) { // not required
				return nil
			}

			if err := m.JssUserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateJssUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUsers); i++ {

		if m.JssUsers[i] != nil {

			if swag.IsZero(m.JssUsers[i]) { // not required
				return nil
			}

			if err := m.JssUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateLimitations(ctx context.Context, formats strfmt.Registry) error {

	if m.Limitations != nil {

		if swag.IsZero(m.Limitations) { // not required
			return nil
		}

		if err := m.Limitations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope" + "." + "limitations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope" + "." + "limitations")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateMobileDeviceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MobileDeviceGroups); i++ {

		if m.MobileDeviceGroups[i] != nil {

			if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
				return nil
			}

			if err := m.MobileDeviceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScope) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MobileDevices); i++ {

		if m.MobileDevices[i] != nil {

			if swag.IsZero(m.MobileDevices[i]) { // not required
				return nil
			}

			if err := m.MobileDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScope) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeBuildingsItems0 mobile device configuration profile scope buildings items0
//
// swagger:model MobileDeviceConfigurationProfileScopeBuildingsItems0
type MobileDeviceConfigurationProfileScopeBuildingsItems0 struct {

	// building
	Building *IDName `json:"building,omitempty"`
}

// Validate validates this mobile device configuration profile scope buildings items0
func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) validateBuilding(formats strfmt.Registry) error {
	if swag.IsZero(m.Building) { // not required
		return nil
	}

	if m.Building != nil {
		if err := m.Building.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope buildings items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) contextValidateBuilding(ctx context.Context, formats strfmt.Registry) error {

	if m.Building != nil {

		if swag.IsZero(m.Building) { // not required
			return nil
		}

		if err := m.Building.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeBuildingsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeBuildingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeDepartmentsItems0 mobile device configuration profile scope departments items0
//
// swagger:model MobileDeviceConfigurationProfileScopeDepartmentsItems0
type MobileDeviceConfigurationProfileScopeDepartmentsItems0 struct {

	// department
	Department *IDName `json:"department,omitempty"`
}

// Validate validates this mobile device configuration profile scope departments items0
func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) validateDepartment(formats strfmt.Registry) error {
	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if m.Department != nil {
		if err := m.Department.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope departments items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) contextValidateDepartment(ctx context.Context, formats strfmt.Registry) error {

	if m.Department != nil {

		if swag.IsZero(m.Department) { // not required
			return nil
		}

		if err := m.Department.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeDepartmentsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeDepartmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusions mobile device configuration profile scope exclusions
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusions
type MobileDeviceConfigurationProfileScopeExclusions struct {

	// buildings
	Buildings []*MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0 `json:"buildings"`

	// departments
	Departments []*MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0 `json:"departments"`

	// ibeacons
	Ibeacons []*MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0 `json:"ibeacons"`

	// jss user groups
	JssUserGroups []*MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0 `json:"jss_user_groups"`

	// jss users
	JssUsers []*MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0 `json:"jss_users"`

	// mobile device groups
	MobileDeviceGroups []*MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0 `json:"mobile_device_groups"`

	// mobile devices
	MobileDevices []*MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0 `json:"mobile_devices"`

	// network segments
	NetworkSegments []*MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0 `json:"network_segments"`

	// user groups
	UserGroups []*MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0 `json:"user_groups"`

	// users
	Users []*MobileDeviceConfigurationProfileScopeExclusionsUsersItems0 `json:"users"`
}

// Validate validates this mobile device configuration profile scope exclusions
func (m *MobileDeviceConfigurationProfileScopeExclusions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbeacons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJssUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDeviceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateBuildings(formats strfmt.Registry) error {
	if swag.IsZero(m.Buildings) { // not required
		return nil
	}

	for i := 0; i < len(m.Buildings); i++ {
		if swag.IsZero(m.Buildings[i]) { // not required
			continue
		}

		if m.Buildings[i] != nil {
			if err := m.Buildings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {
		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {
			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateIbeacons(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacons) { // not required
		return nil
	}

	for i := 0; i < len(m.Ibeacons); i++ {
		if swag.IsZero(m.Ibeacons[i]) { // not required
			continue
		}

		if m.Ibeacons[i] != nil {
			if err := m.Ibeacons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateJssUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUserGroups); i++ {
		if swag.IsZero(m.JssUserGroups[i]) { // not required
			continue
		}

		if m.JssUserGroups[i] != nil {
			if err := m.JssUserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateJssUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.JssUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.JssUsers); i++ {
		if swag.IsZero(m.JssUsers[i]) { // not required
			continue
		}

		if m.JssUsers[i] != nil {
			if err := m.JssUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateMobileDeviceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.MobileDeviceGroups); i++ {
		if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
			continue
		}

		if m.MobileDeviceGroups[i] != nil {
			if err := m.MobileDeviceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.MobileDevices); i++ {
		if swag.IsZero(m.MobileDevices[i]) { // not required
			continue
		}

		if m.MobileDevices[i] != nil {
			if err := m.MobileDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateNetworkSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkSegments); i++ {
		if swag.IsZero(m.NetworkSegments[i]) { // not required
			continue
		}

		if m.NetworkSegments[i] != nil {
			if err := m.NetworkSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbeacons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJssUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDeviceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateBuildings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Buildings); i++ {

		if m.Buildings[i] != nil {

			if swag.IsZero(m.Buildings[i]) { // not required
				return nil
			}

			if err := m.Buildings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "buildings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateDepartments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departments); i++ {

		if m.Departments[i] != nil {

			if swag.IsZero(m.Departments[i]) { // not required
				return nil
			}

			if err := m.Departments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateIbeacons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ibeacons); i++ {

		if m.Ibeacons[i] != nil {

			if swag.IsZero(m.Ibeacons[i]) { // not required
				return nil
			}

			if err := m.Ibeacons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateJssUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUserGroups); i++ {

		if m.JssUserGroups[i] != nil {

			if swag.IsZero(m.JssUserGroups[i]) { // not required
				return nil
			}

			if err := m.JssUserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateJssUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JssUsers); i++ {

		if m.JssUsers[i] != nil {

			if swag.IsZero(m.JssUsers[i]) { // not required
				return nil
			}

			if err := m.JssUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "jss_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateMobileDeviceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MobileDeviceGroups); i++ {

		if m.MobileDeviceGroups[i] != nil {

			if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
				return nil
			}

			if err := m.MobileDeviceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MobileDevices); i++ {

		if m.MobileDevices[i] != nil {

			if swag.IsZero(m.MobileDevices[i]) { // not required
				return nil
			}

			if err := m.MobileDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "mobile_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateNetworkSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSegments); i++ {

		if m.NetworkSegments[i] != nil {

			if swag.IsZero(m.NetworkSegments[i]) { // not required
				return nil
			}

			if err := m.NetworkSegments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserGroups); i++ {

		if m.UserGroups[i] != nil {

			if swag.IsZero(m.UserGroups[i]) { // not required
				return nil
			}

			if err := m.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusions) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "exclusions" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusions) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0 mobile device configuration profile scope exclusions buildings items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0
type MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0 struct {

	// building
	Building *IDName `json:"building,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions buildings items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) validateBuilding(formats strfmt.Registry) error {
	if swag.IsZero(m.Building) { // not required
		return nil
	}

	if m.Building != nil {
		if err := m.Building.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions buildings items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) contextValidateBuilding(ctx context.Context, formats strfmt.Registry) error {

	if m.Building != nil {

		if swag.IsZero(m.Building) { // not required
			return nil
		}

		if err := m.Building.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("building")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("building")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsBuildingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0 mobile device configuration profile scope exclusions departments items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0
type MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0 struct {

	// department
	Department *IDName `json:"department,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions departments items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) validateDepartment(formats strfmt.Registry) error {
	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if m.Department != nil {
		if err := m.Department.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions departments items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) contextValidateDepartment(ctx context.Context, formats strfmt.Registry) error {

	if m.Department != nil {

		if swag.IsZero(m.Department) { // not required
			return nil
		}

		if err := m.Department.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsDepartmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0 mobile device configuration profile scope exclusions ibeacons items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0
type MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0 struct {

	// ibeacon
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions ibeacons items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) validateIbeacon(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacon) { // not required
		return nil
	}

	if m.Ibeacon != nil {
		if err := m.Ibeacon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions ibeacons items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) contextValidateIbeacon(ctx context.Context, formats strfmt.Registry) error {

	if m.Ibeacon != nil {

		if swag.IsZero(m.Ibeacon) { // not required
			return nil
		}

		if err := m.Ibeacon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsIbeaconsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0 mobile device configuration profile scope exclusions jss user groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0
type MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions jss user groups items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions jss user groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsJssUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0 mobile device configuration profile scope exclusions jss users items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0
type MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0 struct {

	// user
	User *IDName `json:"user,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions jss users items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions jss users items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsJssUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0 mobile device configuration profile scope exclusions mobile device groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0
type MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0 struct {

	// mobile device group
	MobileDeviceGroup *IDName `json:"mobile_device_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions mobile device groups items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDeviceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) validateMobileDeviceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroup) { // not required
		return nil
	}

	if m.MobileDeviceGroup != nil {
		if err := m.MobileDeviceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions mobile device groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDeviceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) contextValidateMobileDeviceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDeviceGroup != nil {

		if swag.IsZero(m.MobileDeviceGroup) { // not required
			return nil
		}

		if err := m.MobileDeviceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsMobileDeviceGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0 mobile device configuration profile scope exclusions mobile devices items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0
type MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0 struct {

	// mobile device
	MobileDevice *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice `json:"mobile_device,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions mobile devices items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions mobile devices items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice mobile device configuration profile scope exclusions mobile devices items0 mobile device
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice
type MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the device
	// Example: Johns iPad
	Name string `json:"name,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions mobile devices items0 mobile device
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile scope exclusions mobile devices items0 mobile device based on context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsMobileDevicesItems0MobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0 mobile device configuration profile scope exclusions network segments items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0
type MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0 struct {

	// network segment
	NetworkSegment *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment `json:"network_segment,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions network segments items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) validateNetworkSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegment) { // not required
		return nil
	}

	if m.NetworkSegment != nil {
		if err := m.NetworkSegment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions network segments items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) contextValidateNetworkSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSegment != nil {

		if swag.IsZero(m.NetworkSegment) { // not required
			return nil
		}

		if err := m.NetworkSegment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment mobile device configuration profile scope exclusions network segments items0 network segment
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment
type MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the network segment
	// Example: New York
	Name string `json:"name,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions network segments items0 network segment
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile scope exclusions network segments items0 network segment based on context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsNetworkSegmentsItems0NetworkSegment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0 mobile device configuration profile scope exclusions user groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0
type MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions user groups items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions user groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsUsersItems0 mobile device configuration profile scope exclusions users items0
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsUsersItems0
type MobileDeviceConfigurationProfileScopeExclusionsUsersItems0 struct {

	// user
	User *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User `json:"user,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions users items0
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope exclusions users items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User mobile device configuration profile scope exclusions users items0 user
//
// swagger:model MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User
type MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User struct {

	// name
	// Example: Adam
	Name string `json:"name,omitempty"`
}

// Validate validates this mobile device configuration profile scope exclusions users items0 user
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile scope exclusions users items0 user based on context it is used
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeExclusionsUsersItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeJssUserGroupsItems0 mobile device configuration profile scope jss user groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeJssUserGroupsItems0
type MobileDeviceConfigurationProfileScopeJssUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope jss user groups items0
func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope jss user groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeJssUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeJssUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeJssUsersItems0 mobile device configuration profile scope jss users items0
//
// swagger:model MobileDeviceConfigurationProfileScopeJssUsersItems0
type MobileDeviceConfigurationProfileScopeJssUsersItems0 struct {

	// user
	User *IDName `json:"user,omitempty"`
}

// Validate validates this mobile device configuration profile scope jss users items0
func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope jss users items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeJssUsersItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeJssUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeLimitations mobile device configuration profile scope limitations
//
// swagger:model MobileDeviceConfigurationProfileScopeLimitations
type MobileDeviceConfigurationProfileScopeLimitations struct {

	// ibeacons
	Ibeacons []*MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0 `json:"ibeacons"`

	// network segments
	NetworkSegments []*MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0 `json:"network_segments"`

	// user groups
	UserGroups []*MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0 `json:"user_groups"`

	// users
	Users []*MobileDeviceConfigurationProfileScopeLimitationsUsersItems0 `json:"users"`
}

// Validate validates this mobile device configuration profile scope limitations
func (m *MobileDeviceConfigurationProfileScopeLimitations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) validateIbeacons(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacons) { // not required
		return nil
	}

	for i := 0; i < len(m.Ibeacons); i++ {
		if swag.IsZero(m.Ibeacons[i]) { // not required
			continue
		}

		if m.Ibeacons[i] != nil {
			if err := m.Ibeacons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) validateNetworkSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkSegments); i++ {
		if swag.IsZero(m.NetworkSegments[i]) { // not required
			continue
		}

		if m.NetworkSegments[i] != nil {
			if err := m.NetworkSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope limitations based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeLimitations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) contextValidateIbeacons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ibeacons); i++ {

		if m.Ibeacons[i] != nil {

			if swag.IsZero(m.Ibeacons[i]) { // not required
				return nil
			}

			if err := m.Ibeacons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "ibeacons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) contextValidateNetworkSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSegments); i++ {

		if m.NetworkSegments[i] != nil {

			if swag.IsZero(m.NetworkSegments[i]) { // not required
				return nil
			}

			if err := m.NetworkSegments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "network_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserGroups); i++ {

		if m.UserGroups[i] != nil {

			if swag.IsZero(m.UserGroups[i]) { // not required
				return nil
			}

			if err := m.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "user_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitations) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scope" + "." + "limitations" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitations) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeLimitations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0 mobile device configuration profile scope limitations ibeacons items0
//
// swagger:model MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0
type MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0 struct {

	// ibeacon
	Ibeacon *IDName `json:"ibeacon,omitempty"`
}

// Validate validates this mobile device configuration profile scope limitations ibeacons items0
func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbeacon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) validateIbeacon(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibeacon) { // not required
		return nil
	}

	if m.Ibeacon != nil {
		if err := m.Ibeacon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope limitations ibeacons items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbeacon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) contextValidateIbeacon(ctx context.Context, formats strfmt.Registry) error {

	if m.Ibeacon != nil {

		if swag.IsZero(m.Ibeacon) { // not required
			return nil
		}

		if err := m.Ibeacon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibeacon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibeacon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeLimitationsIbeaconsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0 mobile device configuration profile scope limitations network segments items0
//
// swagger:model MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0
type MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0 struct {

	// network segment
	NetworkSegment *IDName `json:"network_segment,omitempty"`
}

// Validate validates this mobile device configuration profile scope limitations network segments items0
func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) validateNetworkSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkSegment) { // not required
		return nil
	}

	if m.NetworkSegment != nil {
		if err := m.NetworkSegment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope limitations network segments items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) contextValidateNetworkSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkSegment != nil {

		if swag.IsZero(m.NetworkSegment) { // not required
			return nil
		}

		if err := m.NetworkSegment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeLimitationsNetworkSegmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0 mobile device configuration profile scope limitations user groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0
type MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0 struct {

	// user group
	UserGroup *IDName `json:"user_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope limitations user groups items0
func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) validateUserGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroup) { // not required
		return nil
	}

	if m.UserGroup != nil {
		if err := m.UserGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope limitations user groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) contextValidateUserGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.UserGroup != nil {

		if swag.IsZero(m.UserGroup) { // not required
			return nil
		}

		if err := m.UserGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeLimitationsUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeLimitationsUsersItems0 mobile device configuration profile scope limitations users items0
//
// swagger:model MobileDeviceConfigurationProfileScopeLimitationsUsersItems0
type MobileDeviceConfigurationProfileScopeLimitationsUsersItems0 struct {

	// user
	User *IDName `json:"user,omitempty"`
}

// Validate validates this mobile device configuration profile scope limitations users items0
func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope limitations users items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeLimitationsUsersItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeLimitationsUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0 mobile device configuration profile scope mobile device groups items0
//
// swagger:model MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0
type MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0 struct {

	// mobile device group
	MobileDeviceGroup *IDName `json:"mobile_device_group,omitempty"`
}

// Validate validates this mobile device configuration profile scope mobile device groups items0
func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDeviceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) validateMobileDeviceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroup) { // not required
		return nil
	}

	if m.MobileDeviceGroup != nil {
		if err := m.MobileDeviceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope mobile device groups items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDeviceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) contextValidateMobileDeviceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDeviceGroup != nil {

		if swag.IsZero(m.MobileDeviceGroup) { // not required
			return nil
		}

		if err := m.MobileDeviceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeMobileDeviceGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeMobileDevicesItems0 mobile device configuration profile scope mobile devices items0
//
// swagger:model MobileDeviceConfigurationProfileScopeMobileDevicesItems0
type MobileDeviceConfigurationProfileScopeMobileDevicesItems0 struct {

	// mobile device
	MobileDevice *MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice `json:"mobile_device,omitempty"`
}

// Validate validates this mobile device configuration profile scope mobile devices items0
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile scope mobile devices items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeMobileDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice mobile device configuration profile scope mobile devices items0 mobile device
//
// swagger:model MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice
type MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Name of the device
	// Example: Admins iPad
	Name string `json:"name,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile device configuration profile scope mobile devices items0 mobile device
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile scope mobile devices items0 mobile device based on context it is used
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileScopeMobileDevicesItems0MobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileSelfService mobile device configuration profile self service
//
// swagger:model MobileDeviceConfigurationProfileSelfService
type MobileDeviceConfigurationProfileSelfService struct {

	// feature on main page
	FeatureOnMainPage bool `json:"feature_on_main_page,omitempty"`

	// security name
	SecurityName *MobileDeviceConfigurationProfileSelfServiceSecurityName `json:"security_name,omitempty"`

	// self service categories
	SelfServiceCategories []*MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0 `json:"self_service_categories"`

	// self service description
	// Example: Install this profile to access resources on the corporate network
	SelfServiceDescription string `json:"self_service_description,omitempty"`

	// self service icon
	SelfServiceIcon *MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon `json:"self_service_icon,omitempty"`
}

// Validate validates this mobile device configuration profile self service
func (m *MobileDeviceConfigurationProfileSelfService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecurityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfServiceCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfServiceIcon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) validateSecurityName(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityName) { // not required
		return nil
	}

	if m.SecurityName != nil {
		if err := m.SecurityName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "security_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "security_name")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) validateSelfServiceCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfServiceCategories) { // not required
		return nil
	}

	for i := 0; i < len(m.SelfServiceCategories); i++ {
		if swag.IsZero(m.SelfServiceCategories[i]) { // not required
			continue
		}

		if m.SelfServiceCategories[i] != nil {
			if err := m.SelfServiceCategories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("self_service" + "." + "self_service_categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("self_service" + "." + "self_service_categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) validateSelfServiceIcon(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfServiceIcon) { // not required
		return nil
	}

	if m.SelfServiceIcon != nil {
		if err := m.SelfServiceIcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_icon")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile self service based on the context it is used
func (m *MobileDeviceConfigurationProfileSelfService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfServiceCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfServiceIcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) contextValidateSecurityName(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityName != nil {

		if swag.IsZero(m.SecurityName) { // not required
			return nil
		}

		if err := m.SecurityName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "security_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "security_name")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) contextValidateSelfServiceCategories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SelfServiceCategories); i++ {

		if m.SelfServiceCategories[i] != nil {

			if swag.IsZero(m.SelfServiceCategories[i]) { // not required
				return nil
			}

			if err := m.SelfServiceCategories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("self_service" + "." + "self_service_categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("self_service" + "." + "self_service_categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceConfigurationProfileSelfService) contextValidateSelfServiceIcon(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfServiceIcon != nil {

		if swag.IsZero(m.SelfServiceIcon) { // not required
			return nil
		}

		if err := m.SelfServiceIcon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self_service" + "." + "self_service_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self_service" + "." + "self_service_icon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfService) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileSelfService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileSelfServiceSecurityName mobile device configuration profile self service security name
//
// swagger:model MobileDeviceConfigurationProfileSelfServiceSecurityName
type MobileDeviceConfigurationProfileSelfServiceSecurityName struct {

	// removal disallowed
	// Example: Never
	RemovalDisallowed string `json:"removal_disallowed,omitempty"`
}

// Validate validates this mobile device configuration profile self service security name
func (m *MobileDeviceConfigurationProfileSelfServiceSecurityName) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile self service security name based on context it is used
func (m *MobileDeviceConfigurationProfileSelfServiceSecurityName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSecurityName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSecurityName) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileSelfServiceSecurityName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0 mobile device configuration profile self service self service categories items0
//
// swagger:model MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0
type MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0 struct {

	// category
	Category *Category `json:"category,omitempty"`
}

// Validate validates this mobile device configuration profile self service self service categories items0
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device configuration profile self service self service categories items0 based on the context it is used
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileSelfServiceSelfServiceCategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon mobile device configuration profile self service self service icon
//
// swagger:model MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon
type MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon struct {

	// data
	Data string `json:"data,omitempty"`

	// filename
	// Example: WiFi.png
	Filename string `json:"filename,omitempty"`

	// uri
	// Example: https://company.jamfcloud.com/iconservelet/?id=1
	URI string `json:"uri,omitempty"`
}

// Validate validates this mobile device configuration profile self service self service icon
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profile self service self service icon based on context it is used
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfileSelfServiceSelfServiceIcon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
