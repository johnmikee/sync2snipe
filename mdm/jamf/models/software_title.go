// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SoftwareTitle software title
//
// swagger:model software_title
type SoftwareTitle struct {

	// category
	Category *Category `json:"category,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Name of the patch software title
	// Example: Google Chrome
	Name string `json:"name,omitempty"`

	// notifications
	Notifications *SoftwareTitleNotifications `json:"notifications,omitempty"`

	// total computers
	TotalComputers int64 `json:"total_computers,omitempty"`

	// total versions
	TotalVersions int64 `json:"total_versions,omitempty"`

	// versions
	Versions []*SoftwareTitleVersionsItems0 `json:"versions"`
}

// Validate validates this software title
func (m *SoftwareTitle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitle) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareTitle) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	if m.Notifications != nil {
		if err := m.Notifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareTitle) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this software title based on the context it is used
func (m *SoftwareTitle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitle) contextValidateCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.Category != nil {

		if swag.IsZero(m.Category) { // not required
			return nil
		}

		if err := m.Category.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareTitle) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.Notifications != nil {

		if swag.IsZero(m.Notifications) { // not required
			return nil
		}

		if err := m.Notifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareTitle) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Versions); i++ {

		if m.Versions[i] != nil {

			if swag.IsZero(m.Versions[i]) { // not required
				return nil
			}

			if err := m.Versions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitle) UnmarshalBinary(b []byte) error {
	var res SoftwareTitle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleNotifications software title notifications
//
// swagger:model SoftwareTitleNotifications
type SoftwareTitleNotifications struct {

	// email notification
	EmailNotification bool `json:"email_notification,omitempty"`

	// jss notification
	JssNotification bool `json:"jss_notification,omitempty"`
}

// Validate validates this software title notifications
func (m *SoftwareTitleNotifications) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this software title notifications based on context it is used
func (m *SoftwareTitleNotifications) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleNotifications) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleNotifications) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleNotifications
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleVersionsItems0 software title versions items0
//
// swagger:model SoftwareTitleVersionsItems0
type SoftwareTitleVersionsItems0 struct {

	// version
	Version *SoftwareTitleVersionsItems0Version `json:"version,omitempty"`
}

// Validate validates this software title versions items0
func (m *SoftwareTitleVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this software title versions items0 based on the context it is used
func (m *SoftwareTitleVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {

		if swag.IsZero(m.Version) { // not required
			return nil
		}

		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleVersionsItems0Version software title versions items0 version
//
// swagger:model SoftwareTitleVersionsItems0Version
type SoftwareTitleVersionsItems0Version struct {

	// computers
	Computers []*SoftwareTitleVersionsItems0VersionComputersItems0 `json:"computers"`

	// package
	Package *SoftwareTitleVersionsItems0VersionPackage `json:"package,omitempty"`

	// size
	// Example: 1
	Size int64 `json:"size,omitempty"`

	// software version
	// Example: 64.0.3282.119
	SoftwareVersion string `json:"software_version,omitempty"`
}

// Validate validates this software title versions items0 version
func (m *SoftwareTitleVersionsItems0Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0Version) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	for i := 0; i < len(m.Computers); i++ {
		if swag.IsZero(m.Computers[i]) { // not required
			continue
		}

		if m.Computers[i] != nil {
			if err := m.Computers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("version" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("version" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareTitleVersionsItems0Version) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version" + "." + "package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version" + "." + "package")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this software title versions items0 version based on the context it is used
func (m *SoftwareTitleVersionsItems0Version) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0Version) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Computers); i++ {

		if m.Computers[i] != nil {

			if swag.IsZero(m.Computers[i]) { // not required
				return nil
			}

			if err := m.Computers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("version" + "." + "computers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("version" + "." + "computers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareTitleVersionsItems0Version) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {

		if swag.IsZero(m.Package) { // not required
			return nil
		}

		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version" + "." + "package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version" + "." + "package")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0Version) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleVersionsItems0Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleVersionsItems0VersionComputersItems0 software title versions items0 version computers items0
//
// swagger:model SoftwareTitleVersionsItems0VersionComputersItems0
type SoftwareTitleVersionsItems0VersionComputersItems0 struct {

	// computer
	Computer *SoftwareTitleVersionsItems0VersionComputersItems0Computer `json:"computer,omitempty"`
}

// Validate validates this software title versions items0 version computers items0
func (m *SoftwareTitleVersionsItems0VersionComputersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0VersionComputersItems0) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this software title versions items0 version computers items0 based on the context it is used
func (m *SoftwareTitleVersionsItems0VersionComputersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareTitleVersionsItems0VersionComputersItems0) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionComputersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionComputersItems0) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleVersionsItems0VersionComputersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleVersionsItems0VersionComputersItems0Computer software title versions items0 version computers items0 computer
//
// swagger:model SoftwareTitleVersionsItems0VersionComputersItems0Computer
type SoftwareTitleVersionsItems0VersionComputersItems0Computer struct {

	// alt mac address
	// Example: E0:AC:CB:97:36:G5
	AltMacAddress string `json:"alt_mac_address,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// mac address
	// Example: E0:AC:CB:97:36:G4
	MacAddress string `json:"mac_address,omitempty"`

	// name
	// Example: Admins MacBook Pro
	Name string `json:"name,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	SerialNumber string `json:"serial_number,omitempty"`
}

// Validate validates this software title versions items0 version computers items0 computer
func (m *SoftwareTitleVersionsItems0VersionComputersItems0Computer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this software title versions items0 version computers items0 computer based on context it is used
func (m *SoftwareTitleVersionsItems0VersionComputersItems0Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionComputersItems0Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionComputersItems0Computer) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleVersionsItems0VersionComputersItems0Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SoftwareTitleVersionsItems0VersionPackage software title versions items0 version package
//
// swagger:model SoftwareTitleVersionsItems0VersionPackage
type SoftwareTitleVersionsItems0VersionPackage struct {

	// id
	// Example: 1
	ID *int64 `json:"id,omitempty"`

	// name
	// Example: Google Chrome.dmg
	Name string `json:"name,omitempty"`
}

// Validate validates this software title versions items0 version package
func (m *SoftwareTitleVersionsItems0VersionPackage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this software title versions items0 version package based on context it is used
func (m *SoftwareTitleVersionsItems0VersionPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareTitleVersionsItems0VersionPackage) UnmarshalBinary(b []byte) error {
	var res SoftwareTitleVersionsItems0VersionPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
