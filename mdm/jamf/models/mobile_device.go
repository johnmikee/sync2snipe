// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDevice mobile device
//
// swagger:model mobile_device
type MobileDevice struct {

	// applications
	Applications []*MobileDeviceApplicationsItems `json:"applications"`

	// certificates
	Certificates []*MobileDeviceCertificatesItems0 `json:"certificates"`

	// configuration profiles
	ConfigurationProfiles []*MobileDeviceConfigurationProfilesItems `json:"configuration_profiles"`

	// extension attributes
	ExtensionAttributes []*MobileDeviceExtensionAttributesItems `json:"extension_attributes"`

	// general
	General *MobileDeviceGeneral `json:"general,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// mobile device groups
	MobileDeviceGroups []*MobileDeviceMobileDeviceGroupsItems0 `json:"mobile_device_groups"`

	// network
	Network *MobileDeviceNetwork `json:"network,omitempty"`

	// provisioning profiles
	ProvisioningProfiles []*MobileDeviceProvisioningProfilesItems0 `json:"provisioning_profiles"`

	// purchasing
	Purchasing *Purchasing `json:"purchasing,omitempty"`

	// security object
	SecurityObject *MobileDeviceSecurityObject `json:"security_object,omitempty"`
}

// Validate validates this mobile device
func (m *MobileDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDeviceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDevice) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validateConfigurationProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurationProfiles); i++ {
		if swag.IsZero(m.ConfigurationProfiles[i]) { // not required
			continue
		}

		if m.ConfigurationProfiles[i] != nil {
			if err := m.ConfigurationProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validateExtensionAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionAttributes); i++ {
		if swag.IsZero(m.ExtensionAttributes[i]) { // not required
			continue
		}

		if m.ExtensionAttributes[i] != nil {
			if err := m.ExtensionAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) validateMobileDeviceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.MobileDeviceGroups); i++ {
		if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
			continue
		}

		if m.MobileDeviceGroups[i] != nil {
			if err := m.MobileDeviceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) validateProvisioningProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningProfiles) { // not required
		return nil
	}

	for i := 0; i < len(m.ProvisioningProfiles); i++ {
		if swag.IsZero(m.ProvisioningProfiles[i]) { // not required
			continue
		}

		if m.ProvisioningProfiles[i] != nil {
			if err := m.ProvisioningProfiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provisioning_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("provisioning_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) validatePurchasing(formats strfmt.Registry) error {
	if swag.IsZero(m.Purchasing) { // not required
		return nil
	}

	if m.Purchasing != nil {
		if err := m.Purchasing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) validateSecurityObject(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityObject) { // not required
		return nil
	}

	if m.SecurityObject != nil {
		if err := m.SecurityObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_object")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device based on the context it is used
func (m *MobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigurationProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensionAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDeviceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioningProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurchasing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDevice) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {

			if swag.IsZero(m.Applications[i]) { // not required
				return nil
			}

			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidateConfigurationProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigurationProfiles); i++ {

		if m.ConfigurationProfiles[i] != nil {

			if swag.IsZero(m.ConfigurationProfiles[i]) { // not required
				return nil
			}

			if err := m.ConfigurationProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configuration_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidateExtensionAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtensionAttributes); i++ {

		if m.ExtensionAttributes[i] != nil {

			if swag.IsZero(m.ExtensionAttributes[i]) { // not required
				return nil
			}

			if err := m.ExtensionAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extension_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) contextValidateMobileDeviceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MobileDeviceGroups); i++ {

		if m.MobileDeviceGroups[i] != nil {

			if swag.IsZero(m.MobileDeviceGroups[i]) { // not required
				return nil
			}

			if err := m.MobileDeviceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mobile_device_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mobile_device_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if swag.IsZero(m.Network) { // not required
			return nil
		}

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) contextValidateProvisioningProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProvisioningProfiles); i++ {

		if m.ProvisioningProfiles[i] != nil {

			if swag.IsZero(m.ProvisioningProfiles[i]) { // not required
				return nil
			}

			if err := m.ProvisioningProfiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provisioning_profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("provisioning_profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDevice) contextValidatePurchasing(ctx context.Context, formats strfmt.Registry) error {

	if m.Purchasing != nil {

		if swag.IsZero(m.Purchasing) { // not required
			return nil
		}

		if err := m.Purchasing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purchasing")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDevice) contextValidateSecurityObject(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityObject != nil {

		if swag.IsZero(m.SecurityObject) { // not required
			return nil
		}

		if err := m.SecurityObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceApplicationsItems mobile device applications items0
//
// swagger:model MobileDeviceApplicationsItems
type MobileDeviceApplicationsItems struct {

	// application
	Application *MobileDeviceApplicationsItemsApplication `json:"application,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device applications items0
func (m *MobileDeviceApplicationsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceApplicationsItems) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceApplicationsItems) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device applications items0 based on the context it is used
func (m *MobileDeviceApplicationsItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceApplicationsItems) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {

		if swag.IsZero(m.Application) { // not required
			return nil
		}

		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceApplicationsItems) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceApplicationsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceApplicationsItems) UnmarshalBinary(b []byte) error {
	var res MobileDeviceApplicationsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceApplicationsItemsApplication mobile device applications items0 application
//
// swagger:model MobileDeviceApplicationsItemsApplication
type MobileDeviceApplicationsItemsApplication struct {

	// application name
	// Example: Self Service Mobile
	ApplicationName string `json:"application_name,omitempty"`

	// application version
	// Example: 10.1.1
	ApplicationVersion string `json:"application_version,omitempty"`

	// identifier
	// Example: com.jamfsoftware.selfservice
	Identifier string `json:"identifier,omitempty"`
}

// Validate validates this mobile device applications items0 application
func (m *MobileDeviceApplicationsItemsApplication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device applications items0 application based on context it is used
func (m *MobileDeviceApplicationsItemsApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceApplicationsItemsApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceApplicationsItemsApplication) UnmarshalBinary(b []byte) error {
	var res MobileDeviceApplicationsItemsApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCertificatesItems0 mobile device certificates items0
//
// swagger:model MobileDeviceCertificatesItems0
type MobileDeviceCertificatesItems0 struct {

	// certificate
	Certificate *MobileDeviceCertificatesItems0Certificate `json:"certificate,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device certificates items0
func (m *MobileDeviceCertificatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCertificatesItems0) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCertificatesItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device certificates items0 based on the context it is used
func (m *MobileDeviceCertificatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCertificatesItems0) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCertificatesItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCertificatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCertificatesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCertificatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCertificatesItems0Certificate mobile device certificates items0 certificate
//
// swagger:model MobileDeviceCertificatesItems0Certificate
type MobileDeviceCertificatesItems0Certificate struct {

	// common name
	// Example: JSS Built-in Certificate Authority
	CommonName string `json:"common_name,omitempty"`

	// identity
	Identity bool `json:"identity,omitempty"`
}

// Validate validates this mobile device certificates items0 certificate
func (m *MobileDeviceCertificatesItems0Certificate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device certificates items0 certificate based on context it is used
func (m *MobileDeviceCertificatesItems0Certificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCertificatesItems0Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCertificatesItems0Certificate) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCertificatesItems0Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfilesItems mobile device configuration profiles items0
//
// swagger:model MobileDeviceConfigurationProfilesItems
type MobileDeviceConfigurationProfilesItems struct {

	// configuration profile
	ConfigurationProfile *MobileDeviceConfigurationProfilesItemsConfigurationProfile `json:"configuration_profile,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device configuration profiles items0
func (m *MobileDeviceConfigurationProfilesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfilesItems) validateConfigurationProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationProfile) { // not required
		return nil
	}

	if m.ConfigurationProfile != nil {
		if err := m.ConfigurationProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration_profile")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfilesItems) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device configuration profiles items0 based on the context it is used
func (m *MobileDeviceConfigurationProfilesItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurationProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceConfigurationProfilesItems) contextValidateConfigurationProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigurationProfile != nil {

		if swag.IsZero(m.ConfigurationProfile) { // not required
			return nil
		}

		if err := m.ConfigurationProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration_profile")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceConfigurationProfilesItems) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfilesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfilesItems) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfilesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceConfigurationProfilesItemsConfigurationProfile mobile device configuration profiles items0 configuration profile
//
// swagger:model MobileDeviceConfigurationProfilesItemsConfigurationProfile
type MobileDeviceConfigurationProfilesItemsConfigurationProfile struct {

	// display name
	// Example: WiFi
	DisplayName string `json:"display_name,omitempty"`

	// identifier
	// Example: 279889AF-1564-4480-A61D-860DF5EFDF26
	Identifier string `json:"identifier,omitempty"`

	// uuid
	// Example: 279889AF-1564-4480-A61D-860DF5EFDF26
	UUID string `json:"uuid,omitempty"`

	// version
	// Example: 1
	Version int64 `json:"version,omitempty"`
}

// Validate validates this mobile device configuration profiles items0 configuration profile
func (m *MobileDeviceConfigurationProfilesItemsConfigurationProfile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device configuration profiles items0 configuration profile based on context it is used
func (m *MobileDeviceConfigurationProfilesItemsConfigurationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfilesItemsConfigurationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceConfigurationProfilesItemsConfigurationProfile) UnmarshalBinary(b []byte) error {
	var res MobileDeviceConfigurationProfilesItemsConfigurationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceExtensionAttributesItems mobile device extension attributes items0
//
// swagger:model MobileDeviceExtensionAttributesItems
type MobileDeviceExtensionAttributesItems struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Asset Selector
	Name string `json:"name,omitempty"`

	// type
	// Example: String
	Type string `json:"type,omitempty"`

	// value
	// Example: Sample Value
	Value string `json:"value,omitempty"`
}

// Validate validates this mobile device extension attributes items0
func (m *MobileDeviceExtensionAttributesItems) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device extension attributes items0 based on context it is used
func (m *MobileDeviceExtensionAttributesItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceExtensionAttributesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceExtensionAttributesItems) UnmarshalBinary(b []byte) error {
	var res MobileDeviceExtensionAttributesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceGeneral mobile device general
//
// swagger:model MobileDeviceGeneral
type MobileDeviceGeneral struct {

	// asset tag
	AssetTag string `json:"asset_tag,omitempty"`

	// available
	// Example: 11487
	Available int64 `json:"available,omitempty"`

	// available mb
	// Example: 11487
	AvailableMb int64 `json:"available_mb,omitempty"`

	// battery level
	// Example: 95
	BatteryLevel int64 `json:"battery_level,omitempty"`

	// ble capable
	BleCapable bool `json:"ble_capable,omitempty"`

	// bluetooth mac address
	// Example: E0:AC:CB:97:36:G6
	BluetoothMacAddress string `json:"bluetooth_mac_address,omitempty"`

	// capacity
	// Example: 12159
	Capacity int64 `json:"capacity,omitempty"`

	// capacity mb
	// Example: 12159
	CapacityMb int64 `json:"capacity_mb,omitempty"`

	// cloud backup enabled
	CloudBackupEnabled bool `json:"cloud_backup_enabled,omitempty"`

	// device locator service enabled
	DeviceLocatorServiceEnabled bool `json:"device_locator_service_enabled,omitempty"`

	// device name
	// Example: Tinas iPad
	DeviceName string `json:"device_name,omitempty"`

	// device ownership level
	// Example: Institutional
	DeviceOwnershipLevel string `json:"device_ownership_level,omitempty"`

	// display name
	// Example: Tinas iPad
	DisplayName string `json:"display_name,omitempty"`

	// do not disturb enabled
	DoNotDisturbEnabled bool `json:"do_not_disturb_enabled,omitempty"`

	// exchange activesync device identifier
	// Example: TUCLLFJHPL779ACL9DCJQFN39F
	ExchangeActivesyncDeviceIdentifier string `json:"exchange_activesync_device_identifier,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// initial entry date epoch
	// Example: 1499470624555
	InitialEntryDateEpoch int64 `json:"initial_entry_date_epoch,omitempty"`

	// initial entry date utc
	// Example: 2017-07-07T18:37:04.555-0500
	InitialEntryDateUtc string `json:"initial_entry_date_utc,omitempty"`

	// ip address
	// Example: 192.0.0.1
	IPAddress string `json:"ip_address,omitempty"`

	// itunes store account is active
	ItunesStoreAccountIsActive bool `json:"itunes_store_account_is_active,omitempty"`

	// last backup time epoch
	// Example: 1499470624555
	LastBackupTimeEpoch int64 `json:"last_backup_time_epoch,omitempty"`

	// last backup time utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastBackupTimeUtc string `json:"last_backup_time_utc,omitempty"`

	// last cloud backup date epoch
	// Example: 1499470624555
	LastCloudBackupDateEpoch int64 `json:"last_cloud_backup_date_epoch,omitempty"`

	// last cloud backup date utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastCloudBackupDateUtc string `json:"last_cloud_backup_date_utc,omitempty"`

	// last enrollment epoch
	// Example: 1499470624555
	LastEnrollmentEpoch int64 `json:"last_enrollment_epoch,omitempty"`

	// last enrollment utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastEnrollmentUtc string `json:"last_enrollment_utc,omitempty"`

	// last inventory update
	// Example: 2017-07-07 18:37:04
	LastInventoryUpdate string `json:"last_inventory_update,omitempty"`

	// last inventory update epoch
	// Example: 1499470624555
	LastInventoryUpdateEpoch int64 `json:"last_inventory_update_epoch,omitempty"`

	// last inventory update utc
	// Example: 2017-07-07T18:37:04.555-0500
	LastInventoryUpdateUtc string `json:"last_inventory_update_utc,omitempty"`

	// location services enabled
	LocationServicesEnabled bool `json:"location_services_enabled,omitempty"`

	// managed
	Managed bool `json:"managed,omitempty"`

	// model
	// Example: iPhone 6S
	Model string `json:"model,omitempty"`

	// model display
	// Example: iPhone 6S
	ModelDisplay string `json:"model_display,omitempty"`

	// model identifier
	// Example: iPhone8,1
	ModelIdentifier string `json:"model_identifier,omitempty"`

	// model number
	// Example: MKRY2LL
	ModelNumber string `json:"model_number,omitempty"`

	// modem firmware
	// Example: 2.61.00
	ModemFirmware string `json:"modem_firmware,omitempty"`

	// name
	// Example: Tinas iPad
	// Required: true
	Name *string `json:"name"`

	// os build
	// Example: 14F89
	OsBuild string `json:"os_build,omitempty"`

	// os type
	// Example: iOS
	OsType string `json:"os_type,omitempty"`

	// os version
	// Example: 10.3.2
	OsVersion string `json:"os_version,omitempty"`

	// percentage used
	// Example: 5
	PercentageUsed int64 `json:"percentage_used,omitempty"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	// Required: true
	SerialNumber *string `json:"serial_number"`

	// shared
	Shared string `json:"shared,omitempty"`

	// supervised
	Supervised bool `json:"supervised,omitempty"`

	// tethered
	Tethered string `json:"tethered,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	// Required: true
	Udid *string `json:"udid"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile device general
func (m *MobileDeviceGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceGeneral) validateName(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceGeneral) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"serial_number", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceGeneral) validateUdid(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"udid", "body", m.Udid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mobile device general based on context it is used
func (m *MobileDeviceGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceGeneral) UnmarshalBinary(b []byte) error {
	var res MobileDeviceGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceMobileDeviceGroupsItems0 mobile device mobile device groups items0
//
// swagger:model MobileDeviceMobileDeviceGroupsItems0
type MobileDeviceMobileDeviceGroupsItems0 struct {

	// mobile device group
	MobileDeviceGroup *IDName `json:"mobile_device_group,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device mobile device groups items0
func (m *MobileDeviceMobileDeviceGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDeviceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceMobileDeviceGroupsItems0) validateMobileDeviceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceGroup) { // not required
		return nil
	}

	if m.MobileDeviceGroup != nil {
		if err := m.MobileDeviceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceMobileDeviceGroupsItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device mobile device groups items0 based on the context it is used
func (m *MobileDeviceMobileDeviceGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDeviceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceMobileDeviceGroupsItems0) contextValidateMobileDeviceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDeviceGroup != nil {

		if swag.IsZero(m.MobileDeviceGroup) { // not required
			return nil
		}

		if err := m.MobileDeviceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_group")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceMobileDeviceGroupsItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceMobileDeviceGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceMobileDeviceGroupsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceMobileDeviceGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceNetwork mobile device network
//
// swagger:model MobileDeviceNetwork
type MobileDeviceNetwork struct {

	// carrier settings version
	// Example: 20
	CarrierSettingsVersion string `json:"carrier_settings_version,omitempty"`

	// cellular technology
	// Example: Unknown
	CellularTechnology string `json:"cellular_technology,omitempty"`

	// current carrier network
	CurrentCarrierNetwork string `json:"current_carrier_network,omitempty"`

	// current mobile country code
	// Example: 311
	CurrentMobileCountryCode string `json:"current_mobile_country_code,omitempty"`

	// current mobile network code
	// Example: 480
	CurrentMobileNetworkCode string `json:"current_mobile_network_code,omitempty"`

	// data roaming enabled
	DataRoamingEnabled bool `json:"data_roaming_enabled,omitempty"`

	// home carrier network
	// Example: Verizon
	HomeCarrierNetwork string `json:"home_carrier_network,omitempty"`

	// home mobile country code
	// Example: 311
	HomeMobileCountryCode string `json:"home_mobile_country_code,omitempty"`

	// home mobile network code
	// Example: 480
	HomeMobileNetworkCode string `json:"home_mobile_network_code,omitempty"`

	// iccid
	// Example: 8914 8000 0010 0254 6259
	Iccid string `json:"iccid,omitempty"`

	// imei
	// Example: 35 200706 056227 1
	Imei string `json:"imei,omitempty"`

	// phone number
	// Example: 5555555555
	PhoneNumber string `json:"phone_number,omitempty"`

	// voice roaming enabled
	// Example: Yes
	VoiceRoamingEnabled string `json:"voice_roaming_enabled,omitempty"`
}

// Validate validates this mobile device network
func (m *MobileDeviceNetwork) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device network based on context it is used
func (m *MobileDeviceNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceNetwork) UnmarshalBinary(b []byte) error {
	var res MobileDeviceNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceProvisioningProfilesItems0 mobile device provisioning profiles items0
//
// swagger:model MobileDeviceProvisioningProfilesItems0
type MobileDeviceProvisioningProfilesItems0 struct {

	// mobile device provisioning profile
	MobileDeviceProvisioningProfile *MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile `json:"mobile_device_provisioning_profile,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this mobile device provisioning profiles items0
func (m *MobileDeviceProvisioningProfilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDeviceProvisioningProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceProvisioningProfilesItems0) validateMobileDeviceProvisioningProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDeviceProvisioningProfile) { // not required
		return nil
	}

	if m.MobileDeviceProvisioningProfile != nil {
		if err := m.MobileDeviceProvisioningProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_provisioning_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_provisioning_profile")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceProvisioningProfilesItems0) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this mobile device provisioning profiles items0 based on the context it is used
func (m *MobileDeviceProvisioningProfilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDeviceProvisioningProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceProvisioningProfilesItems0) contextValidateMobileDeviceProvisioningProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDeviceProvisioningProfile != nil {

		if swag.IsZero(m.MobileDeviceProvisioningProfile) { // not required
			return nil
		}

		if err := m.MobileDeviceProvisioningProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device_provisioning_profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device_provisioning_profile")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceProvisioningProfilesItems0) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceProvisioningProfilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceProvisioningProfilesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceProvisioningProfilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile mobile device provisioning profiles items0 mobile device provisioning profile
//
// swagger:model MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile
type MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile struct {

	// display name
	// Example: In-House App Provisioning Profile
	DisplayName string `json:"display_name,omitempty"`

	// expiration date
	// Example: 2018-01-29
	ExpirationDate string `json:"expiration_date,omitempty"`

	// expiration date epoch
	ExpirationDateEpoch int64 `json:"expiration_date_epoch,omitempty"`

	// expiration date utc
	// Example: 2018-01-29T14:18:02.000-0600
	ExpirationDateUtc string `json:"expiration_date_utc,omitempty"`

	// uuid
	// Example: 279889AF-1564-4480-A61D-860DF5EFDF26
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this mobile device provisioning profiles items0 mobile device provisioning profile
func (m *MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device provisioning profiles items0 mobile device provisioning profile based on context it is used
func (m *MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile) UnmarshalBinary(b []byte) error {
	var res MobileDeviceProvisioningProfilesItems0MobileDeviceProvisioningProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceSecurityObject mobile device security object
//
// swagger:model MobileDeviceSecurityObject
type MobileDeviceSecurityObject struct {

	// activation lock enabled
	ActivationLockEnabled bool `json:"activation_lock_enabled,omitempty"`

	// block level encryption capable
	BlockLevelEncryptionCapable bool `json:"block_level_encryption_capable,omitempty"`

	// data protection
	DataProtection bool `json:"data_protection,omitempty"`

	// file level encryption capable
	FileLevelEncryptionCapable bool `json:"file_level_encryption_capable,omitempty"`

	// hardware encryption
	HardwareEncryption string `json:"hardware_encryption,omitempty"`

	// jailbreak detected
	// Example: Normal
	JailbreakDetected string `json:"jailbreak_detected,omitempty"`

	// lost location altitude
	// Example: 242.88067627
	LostLocationAltitude string `json:"lost_location_altitude,omitempty"`

	// lost location course
	// Example: -1
	LostLocationCourse string `json:"lost_location_course,omitempty"`

	// lost location epoch
	// Example: 1517598680459
	LostLocationEpoch int64 `json:"lost_location_epoch,omitempty"`

	// lost location horizontal accuracy
	// Example: 65
	LostLocationHorizontalAccuracy string `json:"lost_location_horizontal_accuracy,omitempty"`

	// lost location latitude
	// Example: 44.81436821
	LostLocationLatitude string `json:"lost_location_latitude,omitempty"`

	// lost location longitude
	// Example: -91.502672
	LostLocationLongitude string `json:"lost_location_longitude,omitempty"`

	// lost location speed
	// Example: -1
	LostLocationSpeed string `json:"lost_location_speed,omitempty"`

	// lost location utc
	// Example: 2018-02-02T13:11:20.459-0600
	LostLocationUtc string `json:"lost_location_utc,omitempty"`

	// lost location vertical accuracy
	// Example: 10
	LostLocationVerticalAccuracy string `json:"lost_location_vertical_accuracy,omitempty"`

	// lost mode enable issued epoch
	// Example: 1517598768512
	LostModeEnableIssuedEpoch int64 `json:"lost_mode_enable_issued_epoch,omitempty"`

	// lost mode enable issued utc
	// Example: 2018-02-02T13:12:48.512-0600
	LostModeEnableIssuedUtc string `json:"lost_mode_enable_issued_utc,omitempty"`

	// lost mode enabled
	// Example: true
	LostModeEnabled string `json:"lost_mode_enabled,omitempty"`

	// lost mode enforced
	// Example: true
	LostModeEnforced bool `json:"lost_mode_enforced,omitempty"`

	// lost mode footnote
	LostModeFootnote string `json:"lost_mode_footnote,omitempty"`

	// lost mode message
	// Example: Please return to Company
	LostModeMessage string `json:"lost_mode_message,omitempty"`

	// lost mode phone
	// Example: 555-555-5555
	LostModePhone string `json:"lost_mode_phone,omitempty"`

	// passcode compliant
	PasscodeCompliant bool `json:"passcode_compliant,omitempty"`

	// passcode compliant with profile
	PasscodeCompliantWithProfile bool `json:"passcode_compliant_with_profile,omitempty"`

	// passcode lock grace period enforced
	// Example: Not Available
	PasscodeLockGracePeriodEnforced string `json:"passcode_lock_grace_period_enforced,omitempty"`

	// passcode present
	PasscodePresent bool `json:"passcode_present,omitempty"`
}

// Validate validates this mobile device security object
func (m *MobileDeviceSecurityObject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device security object based on context it is used
func (m *MobileDeviceSecurityObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceSecurityObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceSecurityObject) UnmarshalBinary(b []byte) error {
	var res MobileDeviceSecurityObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
