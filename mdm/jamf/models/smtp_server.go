// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SMTPServer smtp server
//
// swagger:model smtp_server
type SMTPServer struct {

	// authorization required
	AuthorizationRequired bool `json:"authorization_required,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// Hostname or IP address of the SMTP server
	// Example: smtp.gmail.com
	Host string `json:"host,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// port
	// Example: 587
	Port int64 `json:"port,omitempty"`

	// send from email
	// Example: jamf@company.com
	SendFromEmail string `json:"send_from_email,omitempty"`

	// send from name
	// Example: Jamf Software Server
	SendFromName string `json:"send_from_name,omitempty"`

	// ssl
	Ssl bool `json:"ssl,omitempty"`

	// Measured in seconds
	// Example: 5
	Timeout int64 `json:"timeout,omitempty"`

	// tls
	TLS bool `json:"tls,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this smtp server
func (m *SMTPServer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this smtp server based on context it is used
func (m *SMTPServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SMTPServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMTPServer) UnmarshalBinary(b []byte) error {
	var res SMTPServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
