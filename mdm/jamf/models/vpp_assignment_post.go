// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VppAssignmentPost vpp assignment post
//
// swagger:model vpp_assignment_post
type VppAssignmentPost struct {

	// general
	General *VppAssignmentPostGeneral `json:"general,omitempty"`
}

// Validate validates this vpp assignment post
func (m *VppAssignmentPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAssignmentPost) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vpp assignment post based on the context it is used
func (m *VppAssignmentPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAssignmentPost) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VppAssignmentPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VppAssignmentPost) UnmarshalBinary(b []byte) error {
	var res VppAssignmentPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VppAssignmentPostGeneral vpp assignment post general
//
// swagger:model VppAssignmentPostGeneral
type VppAssignmentPostGeneral struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Example: 9th Grade VPP Assignments
	// Required: true
	Name *string `json:"name"`

	// vpp admin account id
	// Example: 1
	// Required: true
	VppAdminAccountID *int64 `json:"vpp_admin_account_id"`
}

// Validate validates this vpp assignment post general
func (m *VppAssignmentPostGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVppAdminAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VppAssignmentPostGeneral) validateName(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VppAssignmentPostGeneral) validateVppAdminAccountID(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"vpp_admin_account_id", "body", m.VppAdminAccountID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vpp assignment post general based on context it is used
func (m *VppAssignmentPostGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VppAssignmentPostGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VppAssignmentPostGeneral) UnmarshalBinary(b []byte) error {
	var res VppAssignmentPostGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
