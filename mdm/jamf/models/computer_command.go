// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComputerCommand computer command
//
// swagger:model computer_command
type ComputerCommand struct {

	// computers
	Computers *ComputerCommandComputers `json:"computers,omitempty"`

	// general
	General *ComputerCommandGeneral `json:"general,omitempty"`
}

// Validate validates this computer command
func (m *ComputerCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommand) validateComputers(formats strfmt.Registry) error {
	if swag.IsZero(m.Computers) { // not required
		return nil
	}

	if m.Computers != nil {
		if err := m.Computers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computers")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommand) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this computer command based on the context it is used
func (m *ComputerCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommand) contextValidateComputers(ctx context.Context, formats strfmt.Registry) error {

	if m.Computers != nil {

		if swag.IsZero(m.Computers) { // not required
			return nil
		}

		if err := m.Computers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computers")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommand) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommand) UnmarshalBinary(b []byte) error {
	var res ComputerCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandComputers computer command computers
//
// swagger:model ComputerCommandComputers
type ComputerCommandComputers struct {

	// computer
	Computer *ComputerCommandComputersComputer `json:"computer,omitempty"`

	// size
	Size Size `json:"size,omitempty"`
}

// Validate validates this computer command computers
func (m *ComputerCommandComputers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandComputers) validateComputer(formats strfmt.Registry) error {
	if swag.IsZero(m.Computer) { // not required
		return nil
	}

	if m.Computer != nil {
		if err := m.Computer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computers" + "." + "computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computers" + "." + "computer")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandComputers) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("computers" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("computers" + "." + "size")
		}
		return err
	}

	return nil
}

// ContextValidate validate this computer command computers based on the context it is used
func (m *ComputerCommandComputers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComputerCommandComputers) contextValidateComputer(ctx context.Context, formats strfmt.Registry) error {

	if m.Computer != nil {

		if swag.IsZero(m.Computer) { // not required
			return nil
		}

		if err := m.Computer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computers" + "." + "computer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computers" + "." + "computer")
			}
			return err
		}
	}

	return nil
}

func (m *ComputerCommandComputers) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := m.Size.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("computers" + "." + "size")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("computers" + "." + "size")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandComputers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandComputers) UnmarshalBinary(b []byte) error {
	var res ComputerCommandComputers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandComputersComputer computer command computers computer
//
// swagger:model ComputerCommandComputersComputer
type ComputerCommandComputersComputer struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	SerialNumber string `json:"serial_number,omitempty"`

	// udid
	// Example: 55900BDC-347C-58B1-D249-F32244B11D30
	Udid string `json:"udid,omitempty"`
}

// Validate validates this computer command computers computer
func (m *ComputerCommandComputersComputer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer command computers computer based on context it is used
func (m *ComputerCommandComputersComputer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandComputersComputer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandComputersComputer) UnmarshalBinary(b []byte) error {
	var res ComputerCommandComputersComputer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComputerCommandGeneral computer command general
//
// swagger:model ComputerCommandGeneral
type ComputerCommandGeneral struct {

	// apns result status
	// Example: Acknowledged
	ApnsResultStatus string `json:"apns_result_status,omitempty"`

	// Command type
	// Example: InstallProfile
	Command string `json:"command,omitempty"`

	// date sent
	// Example: 2017-07-07 18:37:04
	DateSent string `json:"date_sent,omitempty"`

	// date sent epoch
	// Example: 1499470624555
	DateSentEpoch string `json:"date_sent_epoch,omitempty"`

	// date sent utc
	// Example: 2017-07-07T18:37:04.555-0500
	DateSentUtc string `json:"date_sent_utc,omitempty"`

	// id
	// Example: 1002
	ID int64 `json:"id,omitempty"`

	// profile id
	// Example: 121
	ProfileID int64 `json:"profile_id,omitempty"`

	// profile udid
	// Example: A083D99E-5FD0-4A80-A9F4-0CF8BC790C74
	ProfileUdid string `json:"profile_udid,omitempty"`

	// udid
	// Example: 002d47b9-ad68-4d58-9fc7-0c4a50950020
	Udid string `json:"udid,omitempty"`

	// uuid
	// Example: 002d47b9-ad68-4d58-9fc7-0c4a50950020
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this computer command general
func (m *ComputerCommandGeneral) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this computer command general based on context it is used
func (m *ComputerCommandGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComputerCommandGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputerCommandGeneral) UnmarshalBinary(b []byte) error {
	var res ComputerCommandGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
