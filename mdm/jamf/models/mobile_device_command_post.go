// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDeviceCommandPost mobile device command post
//
// swagger:model mobile_device_command_post
type MobileDeviceCommandPost struct {

	// general
	General *MobileDeviceCommandPostGeneral `json:"general,omitempty"`

	// mobile devices
	MobileDevices *MobileDeviceCommandPostMobileDevices `json:"mobile_devices,omitempty"`
}

// Validate validates this mobile device command post
func (m *MobileDeviceCommandPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandPost) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandPost) validateMobileDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevices) { // not required
		return nil
	}

	if m.MobileDevices != nil {
		if err := m.MobileDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device command post based on the context it is used
func (m *MobileDeviceCommandPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobileDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandPost) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceCommandPost) contextValidateMobileDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevices != nil {

		if swag.IsZero(m.MobileDevices) { // not required
			return nil
		}

		if err := m.MobileDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandPost) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandPostGeneral mobile device command post general
//
// swagger:model MobileDeviceCommandPostGeneral
type MobileDeviceCommandPostGeneral struct {

	// Whether Lost Mode should be enabled after the device is wiped and re-enrolled (optional, but defaults to true)
	// Example: Whether Lost Mode should be enabled after the device is wiped and re-enrolled (optional, but defaults to true)
	AlwaysEnforceLostMode *bool `json:"always_enforce_lost_mode,omitempty"`

	// Command to send device
	// Required: true
	// Enum: [Settings DeviceLock EraseDevice ClearPasscode UnmanageDevice UpdateInventory ClearRestrictionsPassword SettingsEnableDataRoaming SettingsDisableDataRoaming SettingsEnableVoiceRoaming SettingsDisableVoiceRoaming SettingsEnableAppAnalytics SettingsDisableAppAnalytics SettingsEnableDiagnosticSubmission SettingsDisableDiagnosticSubmission BlankPush Wallpaper (supervised only) DeviceName (supervised only) ShutDownDevice (supervised only) RestartDevice (supervised only) PasscodeLockGracePeriod (shared iPad only) EnableLostMode (supervised only) DisableLostMode (supervised and in lost mode only) DeviceLocation (supervised and in lost mode only) PlayLostModeSound (supervised and in lost mode only)]
	Command *string `json:"command"`

	// Device name to set (Required for DeviceName command)
	// Example: Required for DeviceName command
	DeviceName string `json:"device_name,omitempty"`

	// If true, on the next reboot Proximity Setup is not allowed and the pane in Setup Assistant will be skipped. Defaults to false.
	// Example: If true, on the next reboot Proximity Setup is not allowed and the pane in Setup Assistant will be skipped. Defaults to false.
	DisallowProximitySetup *bool `json:"disallow_proximity_setup,omitempty"`

	// The carrier's eSIM server URL to query. This URL is obtained from each carrier separately.
	// Example: https://support.apple.com/en-us/HT209096
	ESimServerURL string `json:"e_sim_server_url,omitempty"`

	// Lock message for the DeviceLock command (optional)
	// Example: Lock message for the DeviceLock command (optional)
	LockMessage string `json:"lock_message,omitempty"`

	// The footnote to be displayed for the EnableLostMode command (optional)
	// Example: The footnote to be displayed for the EnableLostMode command (optional)
	LostModeFootnote string `json:"lost_mode_footnote,omitempty"`

	// The message to be displayed on the lost device (Required for EnableLostMode command if lost_mode_phone is not specified)
	// Example: The message to be displayed on the lost device (Required for EnableLostMode command if lost_mode_phone is not specified)
	LostModeMessage string `json:"lost_mode_message,omitempty"`

	// The phone number to be displayed on the lost device (Required for EnableLostMode command if lost_mode_message is not specified)
	// Example: The phone number to be displayed on the lost device (Required for EnableLostMode command if lost_mode_message is not specified)
	LostModePhone string `json:"lost_mode_phone,omitempty"`

	// Whether to play a sound on the device when the EnableLostMode command is sent (optional)
	// Example: Whether to play a sound on the device when the EnableLostMode command is sent (optional)
	LostModeWithSound *bool `json:"lost_mode_with_sound,omitempty"`

	// Number of seconds the screen must be locked before unlock attempts will require the device passcode (Required for PasscodeLockGracePeriod command)
	// Example: Number of seconds the screen must be locked before unlock attempts will require the device passcode (Required for PasscodeLockGracePeriod command)
	PasscodeLockGracePeriod int64 `json:"passcode_lock_grace_period,omitempty"`

	// Whether the data plan should be preserved when issuing the EraseDevice command (optional)
	// Example: Whether the data plan should be preserved when issuing the EraseDevice command (optional)
	PreserveDataPlan bool `json:"preserve_data_plan,omitempty"`

	// Wallpaper image in PNG or JPEG format, encoded using base64 (required for Wallpaper command if wallpaper_id is not specified)
	// Example: Wallpaper image in PNG or JPEG format, encoded using base64 (required for Wallpaper command if wallpaper_id is not specified)
	WallpaperContent string `json:"wallpaper_content,omitempty"`

	// ID of existing icon within Jamf Pro to use (required for Wallpaper command if wallpaper_content is not specified)
	// Example: ID of existing icon within Jamf Pro to use (required for Wallpaper command if wallpaper_content is not specified)
	WallpaperID int64 `json:"wallpaper_id,omitempty"`

	// Where to set wallpaper (Required for Wallpaper command.) Possible values include - 1 (Lock screen), 2 (Home screen), 3 (Lock and home screens)
	// Example: Where to set wallpaper (Required for Wallpaper command.) Possible values include - 1 (Lock screen), 2 (Home screen), 3 (Lock and home screens)
	// Enum: [1 2 3]
	WallpaperSetting int64 `json:"wallpaper_setting,omitempty"`
}

// Validate validates this mobile device command post general
func (m *MobileDeviceCommandPostGeneral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWallpaperSetting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mobileDeviceCommandPostGeneralTypeCommandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Settings","DeviceLock","EraseDevice","ClearPasscode","UnmanageDevice","UpdateInventory","ClearRestrictionsPassword","SettingsEnableDataRoaming","SettingsDisableDataRoaming","SettingsEnableVoiceRoaming","SettingsDisableVoiceRoaming","SettingsEnableAppAnalytics","SettingsDisableAppAnalytics","SettingsEnableDiagnosticSubmission","SettingsDisableDiagnosticSubmission","BlankPush","Wallpaper (supervised only)","DeviceName (supervised only)","ShutDownDevice (supervised only)","RestartDevice (supervised only)","PasscodeLockGracePeriod (shared iPad only)","EnableLostMode (supervised only)","DisableLostMode (supervised and in lost mode only)","DeviceLocation (supervised and in lost mode only)","PlayLostModeSound (supervised and in lost mode only)"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceCommandPostGeneralTypeCommandPropEnum = append(mobileDeviceCommandPostGeneralTypeCommandPropEnum, v)
	}
}

const (

	// MobileDeviceCommandPostGeneralCommandSettings captures enum value "Settings"
	MobileDeviceCommandPostGeneralCommandSettings string = "Settings"

	// MobileDeviceCommandPostGeneralCommandDeviceLock captures enum value "DeviceLock"
	MobileDeviceCommandPostGeneralCommandDeviceLock string = "DeviceLock"

	// MobileDeviceCommandPostGeneralCommandEraseDevice captures enum value "EraseDevice"
	MobileDeviceCommandPostGeneralCommandEraseDevice string = "EraseDevice"

	// MobileDeviceCommandPostGeneralCommandClearPasscode captures enum value "ClearPasscode"
	MobileDeviceCommandPostGeneralCommandClearPasscode string = "ClearPasscode"

	// MobileDeviceCommandPostGeneralCommandUnmanageDevice captures enum value "UnmanageDevice"
	MobileDeviceCommandPostGeneralCommandUnmanageDevice string = "UnmanageDevice"

	// MobileDeviceCommandPostGeneralCommandUpdateInventory captures enum value "UpdateInventory"
	MobileDeviceCommandPostGeneralCommandUpdateInventory string = "UpdateInventory"

	// MobileDeviceCommandPostGeneralCommandClearRestrictionsPassword captures enum value "ClearRestrictionsPassword"
	MobileDeviceCommandPostGeneralCommandClearRestrictionsPassword string = "ClearRestrictionsPassword"

	// MobileDeviceCommandPostGeneralCommandSettingsEnableDataRoaming captures enum value "SettingsEnableDataRoaming"
	MobileDeviceCommandPostGeneralCommandSettingsEnableDataRoaming string = "SettingsEnableDataRoaming"

	// MobileDeviceCommandPostGeneralCommandSettingsDisableDataRoaming captures enum value "SettingsDisableDataRoaming"
	MobileDeviceCommandPostGeneralCommandSettingsDisableDataRoaming string = "SettingsDisableDataRoaming"

	// MobileDeviceCommandPostGeneralCommandSettingsEnableVoiceRoaming captures enum value "SettingsEnableVoiceRoaming"
	MobileDeviceCommandPostGeneralCommandSettingsEnableVoiceRoaming string = "SettingsEnableVoiceRoaming"

	// MobileDeviceCommandPostGeneralCommandSettingsDisableVoiceRoaming captures enum value "SettingsDisableVoiceRoaming"
	MobileDeviceCommandPostGeneralCommandSettingsDisableVoiceRoaming string = "SettingsDisableVoiceRoaming"

	// MobileDeviceCommandPostGeneralCommandSettingsEnableAppAnalytics captures enum value "SettingsEnableAppAnalytics"
	MobileDeviceCommandPostGeneralCommandSettingsEnableAppAnalytics string = "SettingsEnableAppAnalytics"

	// MobileDeviceCommandPostGeneralCommandSettingsDisableAppAnalytics captures enum value "SettingsDisableAppAnalytics"
	MobileDeviceCommandPostGeneralCommandSettingsDisableAppAnalytics string = "SettingsDisableAppAnalytics"

	// MobileDeviceCommandPostGeneralCommandSettingsEnableDiagnosticSubmission captures enum value "SettingsEnableDiagnosticSubmission"
	MobileDeviceCommandPostGeneralCommandSettingsEnableDiagnosticSubmission string = "SettingsEnableDiagnosticSubmission"

	// MobileDeviceCommandPostGeneralCommandSettingsDisableDiagnosticSubmission captures enum value "SettingsDisableDiagnosticSubmission"
	MobileDeviceCommandPostGeneralCommandSettingsDisableDiagnosticSubmission string = "SettingsDisableDiagnosticSubmission"

	// MobileDeviceCommandPostGeneralCommandBlankPush captures enum value "BlankPush"
	MobileDeviceCommandPostGeneralCommandBlankPush string = "BlankPush"

	// MobileDeviceCommandPostGeneralCommandWallpaperSupervisedOnly captures enum value "Wallpaper (supervised only)"
	MobileDeviceCommandPostGeneralCommandWallpaperSupervisedOnly string = "Wallpaper (supervised only)"

	// MobileDeviceCommandPostGeneralCommandDeviceNameSupervisedOnly captures enum value "DeviceName (supervised only)"
	MobileDeviceCommandPostGeneralCommandDeviceNameSupervisedOnly string = "DeviceName (supervised only)"

	// MobileDeviceCommandPostGeneralCommandShutDownDeviceSupervisedOnly captures enum value "ShutDownDevice (supervised only)"
	MobileDeviceCommandPostGeneralCommandShutDownDeviceSupervisedOnly string = "ShutDownDevice (supervised only)"

	// MobileDeviceCommandPostGeneralCommandRestartDeviceSupervisedOnly captures enum value "RestartDevice (supervised only)"
	MobileDeviceCommandPostGeneralCommandRestartDeviceSupervisedOnly string = "RestartDevice (supervised only)"

	// MobileDeviceCommandPostGeneralCommandPasscodeLockGracePeriodSharediPadOnly captures enum value "PasscodeLockGracePeriod (shared iPad only)"
	MobileDeviceCommandPostGeneralCommandPasscodeLockGracePeriodSharediPadOnly string = "PasscodeLockGracePeriod (shared iPad only)"

	// MobileDeviceCommandPostGeneralCommandEnableLostModeSupervisedOnly captures enum value "EnableLostMode (supervised only)"
	MobileDeviceCommandPostGeneralCommandEnableLostModeSupervisedOnly string = "EnableLostMode (supervised only)"

	// MobileDeviceCommandPostGeneralCommandDisableLostModeSupervisedAndInLostModeOnly captures enum value "DisableLostMode (supervised and in lost mode only)"
	MobileDeviceCommandPostGeneralCommandDisableLostModeSupervisedAndInLostModeOnly string = "DisableLostMode (supervised and in lost mode only)"

	// MobileDeviceCommandPostGeneralCommandDeviceLocationSupervisedAndInLostModeOnly captures enum value "DeviceLocation (supervised and in lost mode only)"
	MobileDeviceCommandPostGeneralCommandDeviceLocationSupervisedAndInLostModeOnly string = "DeviceLocation (supervised and in lost mode only)"

	// MobileDeviceCommandPostGeneralCommandPlayLostModeSoundSupervisedAndInLostModeOnly captures enum value "PlayLostModeSound (supervised and in lost mode only)"
	MobileDeviceCommandPostGeneralCommandPlayLostModeSoundSupervisedAndInLostModeOnly string = "PlayLostModeSound (supervised and in lost mode only)"
)

// prop value enum
func (m *MobileDeviceCommandPostGeneral) validateCommandEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceCommandPostGeneralTypeCommandPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceCommandPostGeneral) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("general"+"."+"command", "body", m.Command); err != nil {
		return err
	}

	// value enum
	if err := m.validateCommandEnum("general"+"."+"command", "body", *m.Command); err != nil {
		return err
	}

	return nil
}

var mobileDeviceCommandPostGeneralTypeWallpaperSettingPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceCommandPostGeneralTypeWallpaperSettingPropEnum = append(mobileDeviceCommandPostGeneralTypeWallpaperSettingPropEnum, v)
	}
}

// prop value enum
func (m *MobileDeviceCommandPostGeneral) validateWallpaperSettingEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, mobileDeviceCommandPostGeneralTypeWallpaperSettingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceCommandPostGeneral) validateWallpaperSetting(formats strfmt.Registry) error {
	if swag.IsZero(m.WallpaperSetting) { // not required
		return nil
	}

	// value enum
	if err := m.validateWallpaperSettingEnum("general"+"."+"wallpaper_setting", "body", m.WallpaperSetting); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mobile device command post general based on context it is used
func (m *MobileDeviceCommandPostGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandPostGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandPostGeneral) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandPostGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandPostMobileDevices mobile device command post mobile devices
//
// swagger:model MobileDeviceCommandPostMobileDevices
type MobileDeviceCommandPostMobileDevices struct {

	// mobile device
	MobileDevice *MobileDeviceCommandPostMobileDevicesMobileDevice `json:"mobile_device,omitempty"`
}

// Validate validates this mobile device command post mobile devices
func (m *MobileDeviceCommandPostMobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandPostMobileDevices) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device command post mobile devices based on the context it is used
func (m *MobileDeviceCommandPostMobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandPostMobileDevices) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_devices" + "." + "mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_devices" + "." + "mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandPostMobileDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandPostMobileDevices) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandPostMobileDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceCommandPostMobileDevicesMobileDevice mobile device command post mobile devices mobile device
//
// swagger:model MobileDeviceCommandPostMobileDevicesMobileDevice
type MobileDeviceCommandPostMobileDevicesMobileDevice struct {

	// id
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`
}

// Validate validates this mobile device command post mobile devices mobile device
func (m *MobileDeviceCommandPostMobileDevicesMobileDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceCommandPostMobileDevicesMobileDevice) validateID(formats strfmt.Registry) error {

	if err := validate.Required("mobile_devices"+"."+"mobile_device"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mobile device command post mobile devices mobile device based on context it is used
func (m *MobileDeviceCommandPostMobileDevicesMobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceCommandPostMobileDevicesMobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceCommandPostMobileDevicesMobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDeviceCommandPostMobileDevicesMobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
