// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MobileDevices mobile devices
//
// swagger:model mobile_devices
type MobileDevices []*MobileDevicesItems0

// Validate validates this mobile devices
func (m MobileDevices) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this mobile devices based on the context it is used
func (m MobileDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MobileDevicesItems0 mobile devices items0
//
// swagger:model MobileDevicesItems0
type MobileDevicesItems0 struct {

	// mobile device
	MobileDevice *MobileDevicesItems0MobileDevice `json:"mobile_device,omitempty"`
}

// Validate validates this mobile devices items0
func (m *MobileDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMobileDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDevicesItems0) validateMobileDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.MobileDevice) { // not required
		return nil
	}

	if m.MobileDevice != nil {
		if err := m.MobileDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile devices items0 based on the context it is used
func (m *MobileDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMobileDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDevicesItems0) contextValidateMobileDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.MobileDevice != nil {

		if swag.IsZero(m.MobileDevice) { // not required
			return nil
		}

		if err := m.MobileDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile_device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile_device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDevicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDevicesItems0) UnmarshalBinary(b []byte) error {
	var res MobileDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDevicesItems0MobileDevice mobile devices items0 mobile device
//
// swagger:model MobileDevicesItems0MobileDevice
type MobileDevicesItems0MobileDevice struct {

	// device name
	// Example: Kathys iPhone
	DeviceName string `json:"device_name,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// managed
	Managed bool `json:"managed,omitempty"`

	// model
	// Example: iPhone 6S
	Model string `json:"model,omitempty"`

	// model display
	// Example: MKRY2LL
	ModelDisplay string `json:"model_display,omitempty"`

	// model identifier
	// Example: iPhone8,1
	ModelIdentifier string `json:"model_identifier,omitempty"`

	// name
	// Example: Kathys iPhone
	Name string `json:"name,omitempty"`

	// phone number
	// Example: 123-555-6789
	PhoneNumber string `json:"phone_number,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	SerialNumber string `json:"serial_number,omitempty"`

	// supervised
	Supervised bool `json:"supervised,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`

	// username
	// Example: Kathy
	Username string `json:"username,omitempty"`

	// wifi mac address
	// Example: E0:AC:CB:97:36:G4
	WifiMacAddress string `json:"wifi_mac_address,omitempty"`
}

// Validate validates this mobile devices items0 mobile device
func (m *MobileDevicesItems0MobileDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile devices items0 mobile device based on context it is used
func (m *MobileDevicesItems0MobileDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDevicesItems0MobileDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDevicesItems0MobileDevice) UnmarshalBinary(b []byte) error {
	var res MobileDevicesItems0MobileDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
