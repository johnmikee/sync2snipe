// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MobileDeviceHistory mobile device history
//
// swagger:model mobile_device_history
type MobileDeviceHistory struct {

	// applications
	Applications *MobileDeviceHistoryApplications `json:"applications,omitempty"`

	// audits
	Audits []*MobileDeviceHistoryAuditsItems0 `json:"audits"`

	// ebooks
	Ebooks *MobileDeviceHistoryEbooks `json:"ebooks,omitempty"`

	// general
	General *MobileDeviceHistoryGeneral `json:"general,omitempty"`

	// management commands
	ManagementCommands *MobileDeviceHistoryManagementCommands `json:"management_commands,omitempty"`

	// user location
	UserLocation []*MobileDeviceHistoryUserLocationItems0 `json:"user_location"`
}

// Validate validates this mobile device history
func (m *MobileDeviceHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEbooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistory) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	if m.Applications != nil {
		if err := m.Applications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) validateAudits(formats strfmt.Registry) error {
	if swag.IsZero(m.Audits) { // not required
		return nil
	}

	for i := 0; i < len(m.Audits); i++ {
		if swag.IsZero(m.Audits[i]) { // not required
			continue
		}

		if m.Audits[i] != nil {
			if err := m.Audits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistory) validateEbooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Ebooks) { // not required
		return nil
	}

	if m.Ebooks != nil {
		if err := m.Ebooks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ebooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ebooks")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) validateGeneral(formats strfmt.Registry) error {
	if swag.IsZero(m.General) { // not required
		return nil
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) validateManagementCommands(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementCommands) { // not required
		return nil
	}

	if m.ManagementCommands != nil {
		if err := m.ManagementCommands.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_commands")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_commands")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) validateUserLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.UserLocation) { // not required
		return nil
	}

	for i := 0; i < len(m.UserLocation); i++ {
		if swag.IsZero(m.UserLocation[i]) { // not required
			continue
		}

		if m.UserLocation[i] != nil {
			if err := m.UserLocation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_location" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_location" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device history based on the context it is used
func (m *MobileDeviceHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAudits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEbooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistory) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	if m.Applications != nil {

		if swag.IsZero(m.Applications) { // not required
			return nil
		}

		if err := m.Applications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) contextValidateAudits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Audits); i++ {

		if m.Audits[i] != nil {

			if swag.IsZero(m.Audits[i]) { // not required
				return nil
			}

			if err := m.Audits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistory) contextValidateEbooks(ctx context.Context, formats strfmt.Registry) error {

	if m.Ebooks != nil {

		if swag.IsZero(m.Ebooks) { // not required
			return nil
		}

		if err := m.Ebooks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ebooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ebooks")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) contextValidateGeneral(ctx context.Context, formats strfmt.Registry) error {

	if m.General != nil {

		if swag.IsZero(m.General) { // not required
			return nil
		}

		if err := m.General.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) contextValidateManagementCommands(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementCommands != nil {

		if swag.IsZero(m.ManagementCommands) { // not required
			return nil
		}

		if err := m.ManagementCommands.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_commands")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_commands")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistory) contextValidateUserLocation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserLocation); i++ {

		if m.UserLocation[i] != nil {

			if swag.IsZero(m.UserLocation[i]) { // not required
				return nil
			}

			if err := m.UserLocation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_location" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_location" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistory) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplications mobile device history applications
//
// swagger:model MobileDeviceHistoryApplications
type MobileDeviceHistoryApplications struct {

	// failed
	Failed []*MobileDeviceHistoryApplicationsFailedItems0 `json:"failed"`

	// installed
	Installed []*MobileDeviceHistoryApplicationsInstalledItems0 `json:"installed"`

	// pending
	Pending []*MobileDeviceHistoryApplicationsPendingItems0 `json:"pending"`
}

// Validate validates this mobile device history applications
func (m *MobileDeviceHistoryApplications) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplications) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	for i := 0; i < len(m.Failed); i++ {
		if swag.IsZero(m.Failed[i]) { // not required
			continue
		}

		if m.Failed[i] != nil {
			if err := m.Failed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryApplications) validateInstalled(formats strfmt.Registry) error {
	if swag.IsZero(m.Installed) { // not required
		return nil
	}

	for i := 0; i < len(m.Installed); i++ {
		if swag.IsZero(m.Installed[i]) { // not required
			continue
		}

		if m.Installed[i] != nil {
			if err := m.Installed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "installed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "installed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryApplications) validatePending(formats strfmt.Registry) error {
	if swag.IsZero(m.Pending) { // not required
		return nil
	}

	for i := 0; i < len(m.Pending); i++ {
		if swag.IsZero(m.Pending[i]) { // not required
			continue
		}

		if m.Pending[i] != nil {
			if err := m.Pending[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device history applications based on the context it is used
func (m *MobileDeviceHistoryApplications) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstalled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplications) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failed); i++ {

		if m.Failed[i] != nil {

			if swag.IsZero(m.Failed[i]) { // not required
				return nil
			}

			if err := m.Failed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryApplications) contextValidateInstalled(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Installed); i++ {

		if m.Installed[i] != nil {

			if swag.IsZero(m.Installed[i]) { // not required
				return nil
			}

			if err := m.Installed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "installed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "installed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryApplications) contextValidatePending(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pending); i++ {

		if m.Pending[i] != nil {

			if swag.IsZero(m.Pending[i]) { // not required
				return nil
			}

			if err := m.Pending[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplications) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplications) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplications
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplicationsFailedItems0 mobile device history applications failed items0
//
// swagger:model MobileDeviceHistoryApplicationsFailedItems0
type MobileDeviceHistoryApplicationsFailedItems0 struct {

	// app
	App *MobileDeviceHistoryApplicationsFailedItems0App `json:"app,omitempty"`
}

// Validate validates this mobile device history applications failed items0
func (m *MobileDeviceHistoryApplicationsFailedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsFailedItems0) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history applications failed items0 based on the context it is used
func (m *MobileDeviceHistoryApplicationsFailedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsFailedItems0) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {

		if swag.IsZero(m.App) { // not required
			return nil
		}

		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsFailedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsFailedItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplicationsFailedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplicationsFailedItems0App mobile device history applications failed items0 app
//
// swagger:model MobileDeviceHistoryApplicationsFailedItems0App
type MobileDeviceHistoryApplicationsFailedItems0App struct {

	// management status
	// Example: Failed
	ManagementStatus string `json:"management_status,omitempty"`

	// name
	// Example: Angry Birds
	Name string `json:"name,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history applications failed items0 app
func (m *MobileDeviceHistoryApplicationsFailedItems0App) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history applications failed items0 app based on context it is used
func (m *MobileDeviceHistoryApplicationsFailedItems0App) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsFailedItems0App) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsFailedItems0App) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplicationsFailedItems0App
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplicationsInstalledItems0 mobile device history applications installed items0
//
// swagger:model MobileDeviceHistoryApplicationsInstalledItems0
type MobileDeviceHistoryApplicationsInstalledItems0 struct {

	// app store from mobile device app catalog
	AppStoreFromMobileDeviceAppCatalog *MobileDeviceHistoryApp `json:"app_store_from_mobile_device_app_catalog,omitempty"`

	// in house from mobile device app catalog
	InHouseFromMobileDeviceAppCatalog *MobileDeviceHistoryApp `json:"in_house_from_mobile_device_app_catalog,omitempty"`

	// other
	Other *MobileDeviceHistoryApp `json:"other,omitempty"`
}

// Validate validates this mobile device history applications installed items0
func (m *MobileDeviceHistoryApplicationsInstalledItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppStoreFromMobileDeviceAppCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInHouseFromMobileDeviceAppCatalog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) validateAppStoreFromMobileDeviceAppCatalog(formats strfmt.Registry) error {
	if swag.IsZero(m.AppStoreFromMobileDeviceAppCatalog) { // not required
		return nil
	}

	if m.AppStoreFromMobileDeviceAppCatalog != nil {
		if err := m.AppStoreFromMobileDeviceAppCatalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_store_from_mobile_device_app_catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_store_from_mobile_device_app_catalog")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) validateInHouseFromMobileDeviceAppCatalog(formats strfmt.Registry) error {
	if swag.IsZero(m.InHouseFromMobileDeviceAppCatalog) { // not required
		return nil
	}

	if m.InHouseFromMobileDeviceAppCatalog != nil {
		if err := m.InHouseFromMobileDeviceAppCatalog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in_house_from_mobile_device_app_catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in_house_from_mobile_device_app_catalog")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if m.Other != nil {
		if err := m.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history applications installed items0 based on the context it is used
func (m *MobileDeviceHistoryApplicationsInstalledItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppStoreFromMobileDeviceAppCatalog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInHouseFromMobileDeviceAppCatalog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) contextValidateAppStoreFromMobileDeviceAppCatalog(ctx context.Context, formats strfmt.Registry) error {

	if m.AppStoreFromMobileDeviceAppCatalog != nil {

		if swag.IsZero(m.AppStoreFromMobileDeviceAppCatalog) { // not required
			return nil
		}

		if err := m.AppStoreFromMobileDeviceAppCatalog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_store_from_mobile_device_app_catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_store_from_mobile_device_app_catalog")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) contextValidateInHouseFromMobileDeviceAppCatalog(ctx context.Context, formats strfmt.Registry) error {

	if m.InHouseFromMobileDeviceAppCatalog != nil {

		if swag.IsZero(m.InHouseFromMobileDeviceAppCatalog) { // not required
			return nil
		}

		if err := m.InHouseFromMobileDeviceAppCatalog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in_house_from_mobile_device_app_catalog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in_house_from_mobile_device_app_catalog")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryApplicationsInstalledItems0) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if m.Other != nil {

		if swag.IsZero(m.Other) { // not required
			return nil
		}

		if err := m.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsInstalledItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsInstalledItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplicationsInstalledItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplicationsPendingItems0 mobile device history applications pending items0
//
// swagger:model MobileDeviceHistoryApplicationsPendingItems0
type MobileDeviceHistoryApplicationsPendingItems0 struct {

	// app
	App *MobileDeviceHistoryApplicationsPendingItems0App `json:"app,omitempty"`
}

// Validate validates this mobile device history applications pending items0
func (m *MobileDeviceHistoryApplicationsPendingItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsPendingItems0) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history applications pending items0 based on the context it is used
func (m *MobileDeviceHistoryApplicationsPendingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryApplicationsPendingItems0) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {

		if swag.IsZero(m.App) { // not required
			return nil
		}

		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsPendingItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsPendingItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplicationsPendingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryApplicationsPendingItems0App mobile device history applications pending items0 app
//
// swagger:model MobileDeviceHistoryApplicationsPendingItems0App
type MobileDeviceHistoryApplicationsPendingItems0App struct {

	// management status
	// Example: Pending
	ManagementStatus string `json:"management_status,omitempty"`

	// name
	// Example: Angry Birds
	Name string `json:"name,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history applications pending items0 app
func (m *MobileDeviceHistoryApplicationsPendingItems0App) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history applications pending items0 app based on context it is used
func (m *MobileDeviceHistoryApplicationsPendingItems0App) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsPendingItems0App) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryApplicationsPendingItems0App) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryApplicationsPendingItems0App
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryAuditsItems0 mobile device history audits items0
//
// swagger:model MobileDeviceHistoryAuditsItems0
type MobileDeviceHistoryAuditsItems0 struct {

	// audit
	Audit *MobileDeviceHistoryAuditsItems0Audit `json:"audit,omitempty"`
}

// Validate validates this mobile device history audits items0
func (m *MobileDeviceHistoryAuditsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryAuditsItems0) validateAudit(formats strfmt.Registry) error {
	if swag.IsZero(m.Audit) { // not required
		return nil
	}

	if m.Audit != nil {
		if err := m.Audit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history audits items0 based on the context it is used
func (m *MobileDeviceHistoryAuditsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryAuditsItems0) contextValidateAudit(ctx context.Context, formats strfmt.Registry) error {

	if m.Audit != nil {

		if swag.IsZero(m.Audit) { // not required
			return nil
		}

		if err := m.Audit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryAuditsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryAuditsItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryAuditsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryAuditsItems0Audit mobile device history audits items0 audit
//
// swagger:model MobileDeviceHistoryAuditsItems0Audit
type MobileDeviceHistoryAuditsItems0Audit struct {

	// date time
	// Example: 2017/09/19 at 1:02 PM
	DateTime string `json:"date_time,omitempty"`

	// date time epoch
	// Example: 1505844136509
	DateTimeEpoch int64 `json:"date_time_epoch,omitempty"`

	// event
	// Example: Viewed Activation Lock Bypass Code
	Event string `json:"event,omitempty"`

	// username
	// Example: Jamf Pro Admin
	Username string `json:"username,omitempty"`
}

// Validate validates this mobile device history audits items0 audit
func (m *MobileDeviceHistoryAuditsItems0Audit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history audits items0 audit based on context it is used
func (m *MobileDeviceHistoryAuditsItems0Audit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryAuditsItems0Audit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryAuditsItems0Audit) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryAuditsItems0Audit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooks mobile device history ebooks
//
// swagger:model MobileDeviceHistoryEbooks
type MobileDeviceHistoryEbooks struct {

	// failed
	Failed []*MobileDeviceHistoryEbooksFailedItems0 `json:"failed"`

	// installed
	Installed *MobileDeviceHistoryEbooksInstalled `json:"installed,omitempty"`

	// pending
	Pending []*MobileDeviceHistoryEbooksPendingItems0 `json:"pending"`
}

// Validate validates this mobile device history ebooks
func (m *MobileDeviceHistoryEbooks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryEbooks) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	for i := 0; i < len(m.Failed); i++ {
		if swag.IsZero(m.Failed[i]) { // not required
			continue
		}

		if m.Failed[i] != nil {
			if err := m.Failed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryEbooks) validateInstalled(formats strfmt.Registry) error {
	if swag.IsZero(m.Installed) { // not required
		return nil
	}

	if m.Installed != nil {
		if err := m.Installed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ebooks" + "." + "installed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ebooks" + "." + "installed")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryEbooks) validatePending(formats strfmt.Registry) error {
	if swag.IsZero(m.Pending) { // not required
		return nil
	}

	for i := 0; i < len(m.Pending); i++ {
		if swag.IsZero(m.Pending[i]) { // not required
			continue
		}

		if m.Pending[i] != nil {
			if err := m.Pending[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device history ebooks based on the context it is used
func (m *MobileDeviceHistoryEbooks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstalled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryEbooks) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failed); i++ {

		if m.Failed[i] != nil {

			if swag.IsZero(m.Failed[i]) { // not required
				return nil
			}

			if err := m.Failed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryEbooks) contextValidateInstalled(ctx context.Context, formats strfmt.Registry) error {

	if m.Installed != nil {

		if swag.IsZero(m.Installed) { // not required
			return nil
		}

		if err := m.Installed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ebooks" + "." + "installed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ebooks" + "." + "installed")
			}
			return err
		}
	}

	return nil
}

func (m *MobileDeviceHistoryEbooks) contextValidatePending(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pending); i++ {

		if m.Pending[i] != nil {

			if swag.IsZero(m.Pending[i]) { // not required
				return nil
			}

			if err := m.Pending[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooks) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooksFailedItems0 mobile device history ebooks failed items0
//
// swagger:model MobileDeviceHistoryEbooksFailedItems0
type MobileDeviceHistoryEbooksFailedItems0 struct {

	// author
	// Example: Apple Inc.
	Author string `json:"author,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// management status
	// Example: Managed
	ManagementStatus string `json:"management_status,omitempty"`

	// title
	// Example: iPhone Users Guide for iOS 11.2
	Title string `json:"title,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history ebooks failed items0
func (m *MobileDeviceHistoryEbooksFailedItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history ebooks failed items0 based on context it is used
func (m *MobileDeviceHistoryEbooksFailedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksFailedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksFailedItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooksFailedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooksInstalled mobile device history ebooks installed
//
// swagger:model MobileDeviceHistoryEbooksInstalled
type MobileDeviceHistoryEbooksInstalled struct {

	// ibookstore
	Ibookstore []*MobileDeviceHistoryEbooksInstalledIbookstoreItems0 `json:"ibookstore"`

	// inhouse
	Inhouse []*MobileDeviceHistoryEbooksInstalledInhouseItems0 `json:"inhouse"`
}

// Validate validates this mobile device history ebooks installed
func (m *MobileDeviceHistoryEbooksInstalled) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIbookstore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInhouse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryEbooksInstalled) validateIbookstore(formats strfmt.Registry) error {
	if swag.IsZero(m.Ibookstore) { // not required
		return nil
	}

	for i := 0; i < len(m.Ibookstore); i++ {
		if swag.IsZero(m.Ibookstore[i]) { // not required
			continue
		}

		if m.Ibookstore[i] != nil {
			if err := m.Ibookstore[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "installed" + "." + "ibookstore" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "installed" + "." + "ibookstore" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryEbooksInstalled) validateInhouse(formats strfmt.Registry) error {
	if swag.IsZero(m.Inhouse) { // not required
		return nil
	}

	for i := 0; i < len(m.Inhouse); i++ {
		if swag.IsZero(m.Inhouse[i]) { // not required
			continue
		}

		if m.Inhouse[i] != nil {
			if err := m.Inhouse[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "installed" + "." + "inhouse" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "installed" + "." + "inhouse" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device history ebooks installed based on the context it is used
func (m *MobileDeviceHistoryEbooksInstalled) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIbookstore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInhouse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryEbooksInstalled) contextValidateIbookstore(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ibookstore); i++ {

		if m.Ibookstore[i] != nil {

			if swag.IsZero(m.Ibookstore[i]) { // not required
				return nil
			}

			if err := m.Ibookstore[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "installed" + "." + "ibookstore" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "installed" + "." + "ibookstore" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryEbooksInstalled) contextValidateInhouse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Inhouse); i++ {

		if m.Inhouse[i] != nil {

			if swag.IsZero(m.Inhouse[i]) { // not required
				return nil
			}

			if err := m.Inhouse[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ebooks" + "." + "installed" + "." + "inhouse" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ebooks" + "." + "installed" + "." + "inhouse" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalled) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalled) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooksInstalled
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooksInstalledIbookstoreItems0 mobile device history ebooks installed ibookstore items0
//
// swagger:model MobileDeviceHistoryEbooksInstalledIbookstoreItems0
type MobileDeviceHistoryEbooksInstalledIbookstoreItems0 struct {

	// author
	// Example: Apple Inc.
	Author string `json:"author,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// management status
	// Example: Managed
	ManagementStatus string `json:"management_status,omitempty"`

	// title
	// Example: iPhone Users Guide for iOS 11.2
	Title string `json:"title,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history ebooks installed ibookstore items0
func (m *MobileDeviceHistoryEbooksInstalledIbookstoreItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history ebooks installed ibookstore items0 based on context it is used
func (m *MobileDeviceHistoryEbooksInstalledIbookstoreItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalledIbookstoreItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalledIbookstoreItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooksInstalledIbookstoreItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooksInstalledInhouseItems0 mobile device history ebooks installed inhouse items0
//
// swagger:model MobileDeviceHistoryEbooksInstalledInhouseItems0
type MobileDeviceHistoryEbooksInstalledInhouseItems0 struct {

	// author
	// Example: Apple Inc.
	Author string `json:"author,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// management status
	// Example: Managed
	ManagementStatus string `json:"management_status,omitempty"`

	// title
	// Example: iPhone Users Guide for iOS 11.2
	Title string `json:"title,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history ebooks installed inhouse items0
func (m *MobileDeviceHistoryEbooksInstalledInhouseItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history ebooks installed inhouse items0 based on context it is used
func (m *MobileDeviceHistoryEbooksInstalledInhouseItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalledInhouseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksInstalledInhouseItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooksInstalledInhouseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryEbooksPendingItems0 mobile device history ebooks pending items0
//
// swagger:model MobileDeviceHistoryEbooksPendingItems0
type MobileDeviceHistoryEbooksPendingItems0 struct {

	// author
	// Example: Apple Inc.
	Author string `json:"author,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// management status
	// Example: Managed
	ManagementStatus string `json:"management_status,omitempty"`

	// title
	// Example: iPhone Users Guide for iOS 11.2
	Title string `json:"title,omitempty"`

	// version
	// Example: 1.0.0
	Version string `json:"version,omitempty"`
}

// Validate validates this mobile device history ebooks pending items0
func (m *MobileDeviceHistoryEbooksPendingItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history ebooks pending items0 based on context it is used
func (m *MobileDeviceHistoryEbooksPendingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksPendingItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryEbooksPendingItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryEbooksPendingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryGeneral mobile device history general
//
// swagger:model MobileDeviceHistoryGeneral
type MobileDeviceHistoryGeneral struct {

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// mac address
	// Example: E0:AC:CB:97:36:G4
	MacAddress string `json:"mac_address,omitempty"`

	// Name of the device
	// Example: Jesses iPad
	Name string `json:"name,omitempty"`

	// serial number
	// Example: C02Q7KHTGFWF
	SerialNumber string `json:"serial_number,omitempty"`

	// udid
	// Example: 270aae10800b6e61a2ee2bbc285eb967050b5984
	Udid string `json:"udid,omitempty"`
}

// Validate validates this mobile device history general
func (m *MobileDeviceHistoryGeneral) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history general based on context it is used
func (m *MobileDeviceHistoryGeneral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryGeneral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryGeneral) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryGeneral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommands mobile device history management commands
//
// swagger:model MobileDeviceHistoryManagementCommands
type MobileDeviceHistoryManagementCommands struct {

	// completed
	Completed []*MobileDeviceHistoryManagementCommandsCompletedItems0 `json:"completed"`

	// failed
	Failed []*MobileDeviceHistoryManagementCommandsFailedItems0 `json:"failed"`

	// pending
	Pending []*MobileDeviceHistoryManagementCommandsPendingItems0 `json:"pending"`
}

// Validate validates this mobile device history management commands
func (m *MobileDeviceHistoryManagementCommands) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommands) validateCompleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Completed) { // not required
		return nil
	}

	for i := 0; i < len(m.Completed); i++ {
		if swag.IsZero(m.Completed[i]) { // not required
			continue
		}

		if m.Completed[i] != nil {
			if err := m.Completed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "completed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "completed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryManagementCommands) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	for i := 0; i < len(m.Failed); i++ {
		if swag.IsZero(m.Failed[i]) { // not required
			continue
		}

		if m.Failed[i] != nil {
			if err := m.Failed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryManagementCommands) validatePending(formats strfmt.Registry) error {
	if swag.IsZero(m.Pending) { // not required
		return nil
	}

	for i := 0; i < len(m.Pending); i++ {
		if swag.IsZero(m.Pending[i]) { // not required
			continue
		}

		if m.Pending[i] != nil {
			if err := m.Pending[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mobile device history management commands based on the context it is used
func (m *MobileDeviceHistoryManagementCommands) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommands) contextValidateCompleted(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Completed); i++ {

		if m.Completed[i] != nil {

			if swag.IsZero(m.Completed[i]) { // not required
				return nil
			}

			if err := m.Completed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "completed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "completed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryManagementCommands) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failed); i++ {

		if m.Failed[i] != nil {

			if swag.IsZero(m.Failed[i]) { // not required
				return nil
			}

			if err := m.Failed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceHistoryManagementCommands) contextValidatePending(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pending); i++ {

		if m.Pending[i] != nil {

			if swag.IsZero(m.Pending[i]) { // not required
				return nil
			}

			if err := m.Pending[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management_commands" + "." + "pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management_commands" + "." + "pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommands) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommands) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommands
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsCompletedItems0 mobile device history management commands completed items0
//
// swagger:model MobileDeviceHistoryManagementCommandsCompletedItems0
type MobileDeviceHistoryManagementCommandsCompletedItems0 struct {

	// command
	Command *MobileDeviceHistoryManagementCommandsCompletedItems0Command `json:"command,omitempty"`
}

// Validate validates this mobile device history management commands completed items0
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) validateCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history management commands completed items0 based on the context it is used
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) contextValidateCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.Command != nil {

		if swag.IsZero(m.Command) { // not required
			return nil
		}

		if err := m.Command.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsCompletedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsCompletedItems0Command mobile device history management commands completed items0 command
//
// swagger:model MobileDeviceHistoryManagementCommandsCompletedItems0Command
type MobileDeviceHistoryManagementCommandsCompletedItems0Command struct {

	// date time completed
	// Example: 2017/09/19 at 1:02 PM
	DateTimeCompleted string `json:"date_time_completed,omitempty"`

	// date time completed epoch
	// Example: 1505844136509
	DateTimeCompletedEpoch int64 `json:"date_time_completed_epoch,omitempty"`

	// name
	// Example: Profile List
	Name string `json:"name,omitempty"`
}

// Validate validates this mobile device history management commands completed items0 command
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0Command) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history management commands completed items0 command based on context it is used
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0Command) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0Command) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsCompletedItems0Command) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsCompletedItems0Command
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsFailedItems0 mobile device history management commands failed items0
//
// swagger:model MobileDeviceHistoryManagementCommandsFailedItems0
type MobileDeviceHistoryManagementCommandsFailedItems0 struct {

	// command
	Command *MobileDeviceHistoryManagementCommandsFailedItems0Command `json:"command,omitempty"`
}

// Validate validates this mobile device history management commands failed items0
func (m *MobileDeviceHistoryManagementCommandsFailedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsFailedItems0) validateCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history management commands failed items0 based on the context it is used
func (m *MobileDeviceHistoryManagementCommandsFailedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsFailedItems0) contextValidateCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.Command != nil {

		if swag.IsZero(m.Command) { // not required
			return nil
		}

		if err := m.Command.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsFailedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsFailedItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsFailedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsFailedItems0Command mobile device history management commands failed items0 command
//
// swagger:model MobileDeviceHistoryManagementCommandsFailedItems0Command
type MobileDeviceHistoryManagementCommandsFailedItems0Command struct {

	// date time failed
	DateTimeFailed string `json:"date_time_failed,omitempty"`

	// date time failed epoch
	// Example: 0
	DateTimeFailedEpoch int64 `json:"date_time_failed_epoch,omitempty"`

	// date time issued
	// Example: 2017/09/19 at 1:02 PM
	DateTimeIssued string `json:"date_time_issued,omitempty"`

	// date time issued epoch
	// Example: 1505844136509
	DateTimeIssuedEpoch string `json:"date_time_issued_epoch,omitempty"`

	// error
	// Example: The location of the device could not be determined.
	Error string `json:"error,omitempty"`

	// name
	// Example: DeviceLocation
	Name string `json:"name,omitempty"`
}

// Validate validates this mobile device history management commands failed items0 command
func (m *MobileDeviceHistoryManagementCommandsFailedItems0Command) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history management commands failed items0 command based on context it is used
func (m *MobileDeviceHistoryManagementCommandsFailedItems0Command) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsFailedItems0Command) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsFailedItems0Command) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsFailedItems0Command
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsPendingItems0 mobile device history management commands pending items0
//
// swagger:model MobileDeviceHistoryManagementCommandsPendingItems0
type MobileDeviceHistoryManagementCommandsPendingItems0 struct {

	// command
	Command *MobileDeviceHistoryManagementCommandsPendingItems0Command `json:"command,omitempty"`
}

// Validate validates this mobile device history management commands pending items0
func (m *MobileDeviceHistoryManagementCommandsPendingItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsPendingItems0) validateCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history management commands pending items0 based on the context it is used
func (m *MobileDeviceHistoryManagementCommandsPendingItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryManagementCommandsPendingItems0) contextValidateCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.Command != nil {

		if swag.IsZero(m.Command) { // not required
			return nil
		}

		if err := m.Command.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsPendingItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsPendingItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsPendingItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryManagementCommandsPendingItems0Command mobile device history management commands pending items0 command
//
// swagger:model MobileDeviceHistoryManagementCommandsPendingItems0Command
type MobileDeviceHistoryManagementCommandsPendingItems0Command struct {

	// date time failed
	DateTimeFailed string `json:"date_time_failed,omitempty"`

	// date time failed epoch
	// Example: 0
	DateTimeFailedEpoch int64 `json:"date_time_failed_epoch,omitempty"`

	// date time issued
	// Example: 2017/09/19 at 1:02 PM
	DateTimeIssued string `json:"date_time_issued,omitempty"`

	// date time issued epoch
	// Example: 1505844136509
	DateTimeIssuedEpoch string `json:"date_time_issued_epoch,omitempty"`

	// name
	// Example: Profile List
	Name string `json:"name,omitempty"`
}

// Validate validates this mobile device history management commands pending items0 command
func (m *MobileDeviceHistoryManagementCommandsPendingItems0Command) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history management commands pending items0 command based on context it is used
func (m *MobileDeviceHistoryManagementCommandsPendingItems0Command) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsPendingItems0Command) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryManagementCommandsPendingItems0Command) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryManagementCommandsPendingItems0Command
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryUserLocationItems0 mobile device history user location items0
//
// swagger:model MobileDeviceHistoryUserLocationItems0
type MobileDeviceHistoryUserLocationItems0 struct {

	// location
	Location *MobileDeviceHistoryUserLocationItems0Location `json:"location,omitempty"`
}

// Validate validates this mobile device history user location items0
func (m *MobileDeviceHistoryUserLocationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryUserLocationItems0) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mobile device history user location items0 based on the context it is used
func (m *MobileDeviceHistoryUserLocationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceHistoryUserLocationItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryUserLocationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryUserLocationItems0) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryUserLocationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MobileDeviceHistoryUserLocationItems0Location mobile device history user location items0 location
//
// swagger:model MobileDeviceHistoryUserLocationItems0Location
type MobileDeviceHistoryUserLocationItems0Location struct {

	// building
	// Example: Block D
	Building string `json:"building,omitempty"`

	// date time
	// Example: 2017/09/19 at 1:02 PM
	DateTime string `json:"date_time,omitempty"`

	// date time epoch
	// Example: 1505844136509
	DateTimeEpoch int64 `json:"date_time_epoch,omitempty"`

	// department
	// Example: Information Technology
	Department string `json:"department,omitempty"`

	// email address
	// Example: ashley.harrison@company.com
	EmailAddress string `json:"email_address,omitempty"`

	// full name
	// Example: Ashley Harrison
	FullName string `json:"full_name,omitempty"`

	// phone number
	// Example: 555-555-5555
	PhoneNumber string `json:"phone_number,omitempty"`

	// position
	// Example: Chief of Chiefs
	Position string `json:"position,omitempty"`

	// room
	// Example: 287
	Room string `json:"room,omitempty"`

	// username
	// Example: AHarrison
	Username string `json:"username,omitempty"`
}

// Validate validates this mobile device history user location items0 location
func (m *MobileDeviceHistoryUserLocationItems0Location) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mobile device history user location items0 location based on context it is used
func (m *MobileDeviceHistoryUserLocationItems0Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceHistoryUserLocationItems0Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceHistoryUserLocationItems0Location) UnmarshalBinary(b []byte) error {
	var res MobileDeviceHistoryUserLocationItems0Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
