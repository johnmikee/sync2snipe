// Code generated by go-swagger; DO NOT EDIT.

package managedpreferenceprofiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new managedpreferenceprofiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for managedpreferenceprofiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateManagedPreferenceProfileByID(params *CreateManagedPreferenceProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateManagedPreferenceProfileByIDCreated, error)

	DeleteManagedPreferenceProfilesByID(params *DeleteManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedPreferenceProfilesByIDOK, error)

	DeleteManagedPreferenceProfilesByName(params *DeleteManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedPreferenceProfilesByNameOK, error)

	FindManagedPreferenceProfiles(params *FindManagedPreferenceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesOK, error)

	FindManagedPreferenceProfilesByID(params *FindManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByIDOK, error)

	FindManagedPreferenceProfilesByIDSubset(params *FindManagedPreferenceProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByIDSubsetOK, error)

	FindManagedPreferenceProfilesByName(params *FindManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByNameOK, error)

	FindManagedPreferenceProfilesByNameSubset(params *FindManagedPreferenceProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByNameSubsetOK, error)

	UpdateManagedPreferenceProfilesByID(params *UpdateManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedPreferenceProfilesByIDCreated, error)

	UpdateManagedPreferenceProfilesByName(params *UpdateManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedPreferenceProfilesByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateManagedPreferenceProfileByID creates a new managed preference profile by ID
*/
func (a *Client) CreateManagedPreferenceProfileByID(params *CreateManagedPreferenceProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateManagedPreferenceProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateManagedPreferenceProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createManagedPreferenceProfileById",
		Method:             "POST",
		PathPattern:        "/managedpreferenceprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateManagedPreferenceProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateManagedPreferenceProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createManagedPreferenceProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteManagedPreferenceProfilesByID deletes a managed preference profiles by ID
*/
func (a *Client) DeleteManagedPreferenceProfilesByID(params *DeleteManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedPreferenceProfilesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteManagedPreferenceProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteManagedPreferenceProfilesById",
		Method:             "DELETE",
		PathPattern:        "/managedpreferenceprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteManagedPreferenceProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteManagedPreferenceProfilesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteManagedPreferenceProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteManagedPreferenceProfilesByName deletes a managed preference profiles by name
*/
func (a *Client) DeleteManagedPreferenceProfilesByName(params *DeleteManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedPreferenceProfilesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteManagedPreferenceProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteManagedPreferenceProfilesByName",
		Method:             "DELETE",
		PathPattern:        "/managedpreferenceprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteManagedPreferenceProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteManagedPreferenceProfilesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteManagedPreferenceProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindManagedPreferenceProfiles finds all managed preference profiles
*/
func (a *Client) FindManagedPreferenceProfiles(params *FindManagedPreferenceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindManagedPreferenceProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findManagedPreferenceProfiles",
		Method:             "GET",
		PathPattern:        "/managedpreferenceprofiles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindManagedPreferenceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindManagedPreferenceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findManagedPreferenceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindManagedPreferenceProfilesByID finds managed preference profiles by ID
*/
func (a *Client) FindManagedPreferenceProfilesByID(params *FindManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindManagedPreferenceProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findManagedPreferenceProfilesById",
		Method:             "GET",
		PathPattern:        "/managedpreferenceprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindManagedPreferenceProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindManagedPreferenceProfilesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findManagedPreferenceProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindManagedPreferenceProfilesByIDSubset finds a subset of data for a managed preference profile by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindManagedPreferenceProfilesByIDSubset(params *FindManagedPreferenceProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindManagedPreferenceProfilesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findManagedPreferenceProfilesByIdSubset",
		Method:             "GET",
		PathPattern:        "/managedpreferenceprofiles/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindManagedPreferenceProfilesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindManagedPreferenceProfilesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findManagedPreferenceProfilesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindManagedPreferenceProfilesByName finds managed preference profiles by name
*/
func (a *Client) FindManagedPreferenceProfilesByName(params *FindManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindManagedPreferenceProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findManagedPreferenceProfilesByName",
		Method:             "GET",
		PathPattern:        "/managedpreferenceprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindManagedPreferenceProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindManagedPreferenceProfilesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findManagedPreferenceProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindManagedPreferenceProfilesByNameSubset finds a subset of data for managed preference profiles by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindManagedPreferenceProfilesByNameSubset(params *FindManagedPreferenceProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindManagedPreferenceProfilesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindManagedPreferenceProfilesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findManagedPreferenceProfilesByNameSubset",
		Method:             "GET",
		PathPattern:        "/managedpreferenceprofiles/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindManagedPreferenceProfilesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindManagedPreferenceProfilesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findManagedPreferenceProfilesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateManagedPreferenceProfilesByID updates an existing managed preference profiles by ID
*/
func (a *Client) UpdateManagedPreferenceProfilesByID(params *UpdateManagedPreferenceProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedPreferenceProfilesByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagedPreferenceProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateManagedPreferenceProfilesById",
		Method:             "PUT",
		PathPattern:        "/managedpreferenceprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateManagedPreferenceProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateManagedPreferenceProfilesByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateManagedPreferenceProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateManagedPreferenceProfilesByName updates an existing managed preference profiles by name
*/
func (a *Client) UpdateManagedPreferenceProfilesByName(params *UpdateManagedPreferenceProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedPreferenceProfilesByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagedPreferenceProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateManagedPreferenceProfilesByName",
		Method:             "PUT",
		PathPattern:        "/managedpreferenceprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateManagedPreferenceProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateManagedPreferenceProfilesByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateManagedPreferenceProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
