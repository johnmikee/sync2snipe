// Code generated by go-swagger; DO NOT EDIT.

package mobiledeviceenrollmentprofiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledeviceenrollmentprofiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledeviceenrollmentprofiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMobileDeviceEnrollmentProfilesByID(params *CreateMobileDeviceEnrollmentProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceEnrollmentProfilesByIDCreated, error)

	DeleteMobileDeviceEnrollmentProfileByID(params *DeleteMobileDeviceEnrollmentProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByIDOK, error)

	DeleteMobileDeviceEnrollmentProfileByInvitation(params *DeleteMobileDeviceEnrollmentProfileByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByInvitationOK, error)

	DeleteMobileDeviceEnrollmentProfileByName(params *DeleteMobileDeviceEnrollmentProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByNameOK, error)

	FindMobileDeviceEnrollmentProfiles(params *FindMobileDeviceEnrollmentProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesOK, error)

	FindMobileDeviceEnrollmentProfilesByID(params *FindMobileDeviceEnrollmentProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByIDOK, error)

	FindMobileDeviceEnrollmentProfilesByIDSubset(params *FindMobileDeviceEnrollmentProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByIDSubsetOK, error)

	FindMobileDeviceEnrollmentProfilesByInvitation(params *FindMobileDeviceEnrollmentProfilesByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByInvitationOK, error)

	FindMobileDeviceEnrollmentProfilesByName(params *FindMobileDeviceEnrollmentProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByNameOK, error)

	FindMobileDeviceEnrollmentProfilesByNameSubset(params *FindMobileDeviceEnrollmentProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByNameSubsetOK, error)

	UpdateMobileDeviceEnrollmentProfileByID(params *UpdateMobileDeviceEnrollmentProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByIDCreated, error)

	UpdateMobileDeviceEnrollmentProfileByInvitation(params *UpdateMobileDeviceEnrollmentProfileByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByInvitationCreated, error)

	UpdateMobileDeviceEnrollmentProfileByName(params *UpdateMobileDeviceEnrollmentProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMobileDeviceEnrollmentProfilesByID creates a new mobile device enrollment profile by ID
*/
func (a *Client) CreateMobileDeviceEnrollmentProfilesByID(params *CreateMobileDeviceEnrollmentProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceEnrollmentProfilesByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobileDeviceEnrollmentProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMobileDeviceEnrollmentProfilesById",
		Method:             "POST",
		PathPattern:        "/mobiledeviceenrollmentprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobileDeviceEnrollmentProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobileDeviceEnrollmentProfilesByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobileDeviceEnrollmentProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceEnrollmentProfileByID deletes a mobile device enrollment profile by ID
*/
func (a *Client) DeleteMobileDeviceEnrollmentProfileByID(params *DeleteMobileDeviceEnrollmentProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceEnrollmentProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceEnrollmentProfileById",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceenrollmentprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceEnrollmentProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceEnrollmentProfileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceEnrollmentProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceEnrollmentProfileByInvitation deletes a mobile device enrollment profile by invitation
*/
func (a *Client) DeleteMobileDeviceEnrollmentProfileByInvitation(params *DeleteMobileDeviceEnrollmentProfileByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceEnrollmentProfileByInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceEnrollmentProfileByInvitation",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceenrollmentprofiles/invitation/{invitation}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceEnrollmentProfileByInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceEnrollmentProfileByInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceEnrollmentProfileByInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceEnrollmentProfileByName deletes a mobile device enrollment profile by name
*/
func (a *Client) DeleteMobileDeviceEnrollmentProfileByName(params *DeleteMobileDeviceEnrollmentProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceEnrollmentProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceEnrollmentProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceEnrollmentProfileByName",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceenrollmentprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceEnrollmentProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceEnrollmentProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceEnrollmentProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfiles finds all mobile device enrollment profiles
*/
func (a *Client) FindMobileDeviceEnrollmentProfiles(params *FindMobileDeviceEnrollmentProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfiles",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfilesByID finds mobile device enrollment profiles by ID
*/
func (a *Client) FindMobileDeviceEnrollmentProfilesByID(params *FindMobileDeviceEnrollmentProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfilesById",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfilesByIDSubset finds a subset of data for an enrollment profile

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDeviceEnrollmentProfilesByIDSubset(params *FindMobileDeviceEnrollmentProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfilesByIdSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfilesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfilesByInvitation finds mobile device enrollment profiles by invitation
*/
func (a *Client) FindMobileDeviceEnrollmentProfilesByInvitation(params *FindMobileDeviceEnrollmentProfilesByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesByInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfilesByInvitation",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles/invitation/{invitation}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesByInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesByInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfilesByInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfilesByName finds mobile device enrollment profiles by name
*/
func (a *Client) FindMobileDeviceEnrollmentProfilesByName(params *FindMobileDeviceEnrollmentProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfilesByName",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceEnrollmentProfilesByNameSubset finds a subset of data for mobile device enrollment profiles by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDeviceEnrollmentProfilesByNameSubset(params *FindMobileDeviceEnrollmentProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceEnrollmentProfilesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceEnrollmentProfilesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceEnrollmentProfilesByNameSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceenrollmentprofiles/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceEnrollmentProfilesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceEnrollmentProfilesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceEnrollmentProfilesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceEnrollmentProfileByID updates an existing mobile device enrollment profile by ID
*/
func (a *Client) UpdateMobileDeviceEnrollmentProfileByID(params *UpdateMobileDeviceEnrollmentProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceEnrollmentProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceEnrollmentProfileById",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceenrollmentprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceEnrollmentProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceEnrollmentProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceEnrollmentProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceEnrollmentProfileByInvitation updates an existing mobile device enrollment profile by invitation
*/
func (a *Client) UpdateMobileDeviceEnrollmentProfileByInvitation(params *UpdateMobileDeviceEnrollmentProfileByInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByInvitationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceEnrollmentProfileByInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceEnrollmentProfileByInvitation",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceenrollmentprofiles/invitation/{invitation}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceEnrollmentProfileByInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceEnrollmentProfileByInvitationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceEnrollmentProfileByInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceEnrollmentProfileByName updates an existing mobile device enrollment profile by name
*/
func (a *Client) UpdateMobileDeviceEnrollmentProfileByName(params *UpdateMobileDeviceEnrollmentProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceEnrollmentProfileByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceEnrollmentProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceEnrollmentProfileByName",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceenrollmentprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceEnrollmentProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceEnrollmentProfileByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceEnrollmentProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
