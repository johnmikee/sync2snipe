// Code generated by go-swagger; DO NOT EDIT.

package restrictedsoftware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new restrictedsoftware API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for restrictedsoftware API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRestrictedSoftwareByID(params *CreateRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRestrictedSoftwareByIDCreated, error)

	DeleteRestrictedSoftwareByID(params *DeleteRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRestrictedSoftwareByIDOK, error)

	DeleteRestrictedSoftwareByName(params *DeleteRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRestrictedSoftwareByNameOK, error)

	FindRestrictedSoftware(params *FindRestrictedSoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareOK, error)

	FindRestrictedSoftwareByID(params *FindRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareByIDOK, error)

	FindRestrictedSoftwareByName(params *FindRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareByNameOK, error)

	UpdateRestrictedSoftwareByID(params *UpdateRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestrictedSoftwareByIDCreated, error)

	UpdateRestrictedSoftwareByName(params *UpdateRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestrictedSoftwareByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRestrictedSoftwareByID creates a new restricted software by ID
*/
func (a *Client) CreateRestrictedSoftwareByID(params *CreateRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRestrictedSoftwareByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRestrictedSoftwareByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRestrictedSoftwareById",
		Method:             "POST",
		PathPattern:        "/restrictedsoftware/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRestrictedSoftwareByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRestrictedSoftwareByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRestrictedSoftwareById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRestrictedSoftwareByID deletes a restricted software by ID
*/
func (a *Client) DeleteRestrictedSoftwareByID(params *DeleteRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRestrictedSoftwareByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRestrictedSoftwareByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRestrictedSoftwareById",
		Method:             "DELETE",
		PathPattern:        "/restrictedsoftware/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRestrictedSoftwareByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRestrictedSoftwareByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRestrictedSoftwareById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRestrictedSoftwareByName deletes a restricted software by name
*/
func (a *Client) DeleteRestrictedSoftwareByName(params *DeleteRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRestrictedSoftwareByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRestrictedSoftwareByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRestrictedSoftwareByName",
		Method:             "DELETE",
		PathPattern:        "/restrictedsoftware/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRestrictedSoftwareByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRestrictedSoftwareByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRestrictedSoftwareByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindRestrictedSoftware finds all restricted software
*/
func (a *Client) FindRestrictedSoftware(params *FindRestrictedSoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindRestrictedSoftwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findRestrictedSoftware",
		Method:             "GET",
		PathPattern:        "/restrictedsoftware",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindRestrictedSoftwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindRestrictedSoftwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findRestrictedSoftware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindRestrictedSoftwareByID finds restricted software by ID
*/
func (a *Client) FindRestrictedSoftwareByID(params *FindRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindRestrictedSoftwareByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findRestrictedSoftwareById",
		Method:             "GET",
		PathPattern:        "/restrictedsoftware/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindRestrictedSoftwareByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindRestrictedSoftwareByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findRestrictedSoftwareById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindRestrictedSoftwareByName finds restricted software by name
*/
func (a *Client) FindRestrictedSoftwareByName(params *FindRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindRestrictedSoftwareByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindRestrictedSoftwareByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findRestrictedSoftwareByName",
		Method:             "GET",
		PathPattern:        "/restrictedsoftware/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindRestrictedSoftwareByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindRestrictedSoftwareByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findRestrictedSoftwareByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRestrictedSoftwareByID updates an existing restricted software by ID
*/
func (a *Client) UpdateRestrictedSoftwareByID(params *UpdateRestrictedSoftwareByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestrictedSoftwareByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRestrictedSoftwareByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRestrictedSoftwareById",
		Method:             "PUT",
		PathPattern:        "/restrictedsoftware/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRestrictedSoftwareByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRestrictedSoftwareByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRestrictedSoftwareById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRestrictedSoftwareByName updates an existing restricted software by name
*/
func (a *Client) UpdateRestrictedSoftwareByName(params *UpdateRestrictedSoftwareByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRestrictedSoftwareByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRestrictedSoftwareByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRestrictedSoftwareByName",
		Method:             "PUT",
		PathPattern:        "/restrictedsoftware/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRestrictedSoftwareByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRestrictedSoftwareByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRestrictedSoftwareByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
