// Code generated by go-swagger; DO NOT EDIT.

package restrictedsoftware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateRestrictedSoftwareByNameReader is a Reader for the UpdateRestrictedSoftwareByName structure.
type UpdateRestrictedSoftwareByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRestrictedSoftwareByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateRestrictedSoftwareByNameCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /restrictedsoftware/name/{name}] updateRestrictedSoftwareByName", response, response.Code())
	}
}

// NewUpdateRestrictedSoftwareByNameCreated creates a UpdateRestrictedSoftwareByNameCreated with default headers values
func NewUpdateRestrictedSoftwareByNameCreated() *UpdateRestrictedSoftwareByNameCreated {
	return &UpdateRestrictedSoftwareByNameCreated{}
}

/*
UpdateRestrictedSoftwareByNameCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateRestrictedSoftwareByNameCreated struct {
}

// IsSuccess returns true when this update restricted software by name created response has a 2xx status code
func (o *UpdateRestrictedSoftwareByNameCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update restricted software by name created response has a 3xx status code
func (o *UpdateRestrictedSoftwareByNameCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update restricted software by name created response has a 4xx status code
func (o *UpdateRestrictedSoftwareByNameCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update restricted software by name created response has a 5xx status code
func (o *UpdateRestrictedSoftwareByNameCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update restricted software by name created response a status code equal to that given
func (o *UpdateRestrictedSoftwareByNameCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update restricted software by name created response
func (o *UpdateRestrictedSoftwareByNameCreated) Code() int {
	return 201
}

func (o *UpdateRestrictedSoftwareByNameCreated) Error() string {
	return fmt.Sprintf("[PUT /restrictedsoftware/name/{name}][%d] updateRestrictedSoftwareByNameCreated ", 201)
}

func (o *UpdateRestrictedSoftwareByNameCreated) String() string {
	return fmt.Sprintf("[PUT /restrictedsoftware/name/{name}][%d] updateRestrictedSoftwareByNameCreated ", 201)
}

func (o *UpdateRestrictedSoftwareByNameCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
