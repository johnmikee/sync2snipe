// Code generated by go-swagger; DO NOT EDIT.

package userextensionattributes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new userextensionattributes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for userextensionattributes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserextensionattributeByID(params *CreateUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserextensionattributeByIDCreated, error)

	DeleteUserextensionattributeByID(params *DeleteUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserextensionattributeByIDOK, error)

	DeleteUserextensionattributeByName(params *DeleteUserextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserextensionattributeByNameOK, error)

	FindUserextensionattributes(params *FindUserextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesOK, error)

	FindUserextensionattributesByID(params *FindUserextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesByIDOK, error)

	FindUserextensionattributesByName(params *FindUserextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesByNameOK, error)

	UpdateUserextensionattributeByID(params *UpdateUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserextensionattributeByIDCreated, error)

	UpdateUserextensionattributeByName(params *UpdateUserextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserextensionattributeByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateUserextensionattributeByID creates a new user extension attribute by ID
*/
func (a *Client) CreateUserextensionattributeByID(params *CreateUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserextensionattributeById",
		Method:             "POST",
		PathPattern:        "/userextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserextensionattributeByID deletes a user extension attribute by ID
*/
func (a *Client) DeleteUserextensionattributeByID(params *DeleteUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserextensionattributeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserextensionattributeById",
		Method:             "DELETE",
		PathPattern:        "/userextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserextensionattributeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserextensionattributeByName deletes a user extension attribute by name
*/
func (a *Client) DeleteUserextensionattributeByName(params *DeleteUserextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserextensionattributeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserextensionattributeByName",
		Method:             "DELETE",
		PathPattern:        "/userextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserextensionattributeByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindUserextensionattributes finds all user extension attributes
*/
func (a *Client) FindUserextensionattributes(params *FindUserextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUserextensionattributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findUserextensionattributes",
		Method:             "GET",
		PathPattern:        "/userextensionattributes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindUserextensionattributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindUserextensionattributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findUserextensionattributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindUserextensionattributesByID finds user extension attributes by ID
*/
func (a *Client) FindUserextensionattributesByID(params *FindUserextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUserextensionattributesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findUserextensionattributesById",
		Method:             "GET",
		PathPattern:        "/userextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindUserextensionattributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindUserextensionattributesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findUserextensionattributesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindUserextensionattributesByName finds user extension attributes by name
*/
func (a *Client) FindUserextensionattributesByName(params *FindUserextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserextensionattributesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUserextensionattributesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findUserextensionattributesByName",
		Method:             "GET",
		PathPattern:        "/userextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindUserextensionattributesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindUserextensionattributesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findUserextensionattributesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserextensionattributeByID updates an existing user extension attribute by ID
*/
func (a *Client) UpdateUserextensionattributeByID(params *UpdateUserextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserextensionattributeById",
		Method:             "PUT",
		PathPattern:        "/userextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserextensionattributeByName updates an existing user extension attribute by name
*/
func (a *Client) UpdateUserextensionattributeByName(params *UpdateUserextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserextensionattributeByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserextensionattributeByName",
		Method:             "PUT",
		PathPattern:        "/userextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserextensionattributeByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
