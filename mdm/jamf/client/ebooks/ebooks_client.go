// Code generated by go-swagger; DO NOT EDIT.

package ebooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ebooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ebooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEBookByID(params *CreateEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEBookByIDCreated, error)

	DeleteEBookByID(params *DeleteEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEBookByIDOK, error)

	DeleteEBookByName(params *DeleteEBookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEBookByNameOK, error)

	FindEBooks(params *FindEBooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksOK, error)

	FindEBooksByID(params *FindEBooksByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByIDOK, error)

	FindEBooksByName(params *FindEBooksByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByNameOK, error)

	FindEBooksByNameSubset(params *FindEBooksByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByNameSubsetOK, error)

	FindEbookssByIDSubset(params *FindEbookssByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEbookssByIDSubsetOK, error)

	UpdateEBookByID(params *UpdateEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEBookByIDCreated, error)

	UpdateEBookByName(params *UpdateEBookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEBookByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEBookByID creates a new ebook by ID
*/
func (a *Client) CreateEBookByID(params *CreateEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEBookByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEBookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEBookById",
		Method:             "POST",
		PathPattern:        "/ebooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEBookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEBookByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEBookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEBookByID deletes an ebook by ID
*/
func (a *Client) DeleteEBookByID(params *DeleteEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEBookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEBookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEBookById",
		Method:             "DELETE",
		PathPattern:        "/ebooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEBookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEBookByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEBookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEBookByName deletes an ebook by name
*/
func (a *Client) DeleteEBookByName(params *DeleteEBookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEBookByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEBookByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEBookByName",
		Method:             "DELETE",
		PathPattern:        "/ebooks/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEBookByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEBookByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEBookByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindEBooks finds all ebooks
*/
func (a *Client) FindEBooks(params *FindEBooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEBooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findEBooks",
		Method:             "GET",
		PathPattern:        "/ebooks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEBooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEBooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEBooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindEBooksByID finds ebooks by ID
*/
func (a *Client) FindEBooksByID(params *FindEBooksByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEBooksByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findEBooksById",
		Method:             "GET",
		PathPattern:        "/ebooks/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEBooksByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEBooksByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEBooksById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindEBooksByName finds ebooks by name
*/
func (a *Client) FindEBooksByName(params *FindEBooksByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEBooksByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findEBooksByName",
		Method:             "GET",
		PathPattern:        "/ebooks/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEBooksByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEBooksByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEBooksByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindEBooksByNameSubset finds a subset of data for ebooks by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindEBooksByNameSubset(params *FindEBooksByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEBooksByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEBooksByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findEBooksByNameSubset",
		Method:             "GET",
		PathPattern:        "/ebooks/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEBooksByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEBooksByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEBooksByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindEbookssByIDSubset finds a subset of data for an ebook by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindEbookssByIDSubset(params *FindEbookssByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindEbookssByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindEbookssByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findEbookssByIdSubset",
		Method:             "GET",
		PathPattern:        "/ebooks/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindEbookssByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindEbookssByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findEbookssByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEBookByID updates an existing ebook by ID
*/
func (a *Client) UpdateEBookByID(params *UpdateEBookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEBookByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEBookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEBookById",
		Method:             "PUT",
		PathPattern:        "/ebooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEBookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEBookByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEBookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEBookByName updates an existing ebook by name
*/
func (a *Client) UpdateEBookByName(params *UpdateEBookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEBookByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEBookByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEBookByName",
		Method:             "PUT",
		PathPattern:        "/ebooks/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEBookByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEBookByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEBookByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
