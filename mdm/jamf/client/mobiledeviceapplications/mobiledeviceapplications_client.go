// Code generated by go-swagger; DO NOT EDIT.

package mobiledeviceapplications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledeviceapplications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledeviceapplications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMobileDeviceApplicationByID(params *CreateMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceApplicationByIDCreated, error)

	DeleteMobileDeviceApplicationByBundleID(params *DeleteMobileDeviceApplicationByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByBundleIDOK, error)

	DeleteMobileDeviceApplicationByBundleIDandVersion(params *DeleteMobileDeviceApplicationByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByBundleIDandVersionOK, error)

	DeleteMobileDeviceApplicationByID(params *DeleteMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByIDOK, error)

	DeleteMobileDeviceApplicationByName(params *DeleteMobileDeviceApplicationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByNameOK, error)

	FindMobileDeviceApplications(params *FindMobileDeviceApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsOK, error)

	FindMobileDeviceApplicationsByBundleID(params *FindMobileDeviceApplicationsByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByBundleIDOK, error)

	FindMobileDeviceApplicationsByBundleIDandVersion(params *FindMobileDeviceApplicationsByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByBundleIDandVersionOK, error)

	FindMobileDeviceApplicationsByID(params *FindMobileDeviceApplicationsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByIDOK, error)

	FindMobileDeviceApplicationsByName(params *FindMobileDeviceApplicationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByNameOK, error)

	FindMobileDeviceApplicationsByNameSubset(params *FindMobileDeviceApplicationsByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByNameSubsetOK, error)

	FindMobileDeviceAppsByIDSubset(params *FindMobileDeviceAppsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceAppsByIDSubsetOK, error)

	UpdateMobileDeviceApplicationByBundleID(params *UpdateMobileDeviceApplicationByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByBundleIDCreated, error)

	UpdateMobileDeviceApplicationByBundleIDandVersion(params *UpdateMobileDeviceApplicationByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByBundleIDandVersionCreated, error)

	UpdateMobileDeviceApplicationByID(params *UpdateMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByIDCreated, error)

	UpdateMobileDeviceApplicationByName(params *UpdateMobileDeviceApplicationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMobileDeviceApplicationByID creates a new mobile device application by ID

App configuration preferences should be listed using character entities, e.g. <preferences><dict><key>abc</key><string>xyz</string></dict></preferences>
*/
func (a *Client) CreateMobileDeviceApplicationByID(params *CreateMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceApplicationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobileDeviceApplicationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMobileDeviceApplicationById",
		Method:             "POST",
		PathPattern:        "/mobiledeviceapplications/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobileDeviceApplicationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobileDeviceApplicationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobileDeviceApplicationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceApplicationByBundleID deletes a mobile device application by bundle ID
*/
func (a *Client) DeleteMobileDeviceApplicationByBundleID(params *DeleteMobileDeviceApplicationByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByBundleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceApplicationByBundleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceApplicationByBundleID",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceApplicationByBundleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceApplicationByBundleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceApplicationByBundleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceApplicationByBundleIDandVersion deletes a mobile device application by bundle ID and version
*/
func (a *Client) DeleteMobileDeviceApplicationByBundleIDandVersion(params *DeleteMobileDeviceApplicationByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByBundleIDandVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceApplicationByBundleIDandVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceApplicationByBundleIDandVersion",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}/version/{version}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceApplicationByBundleIDandVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceApplicationByBundleIDandVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceApplicationByBundleIDandVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceApplicationByID deletes a mobile device application by ID
*/
func (a *Client) DeleteMobileDeviceApplicationByID(params *DeleteMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceApplicationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceApplicationById",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceapplications/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceApplicationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceApplicationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceApplicationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceApplicationByName deletes a mobile device application by name
*/
func (a *Client) DeleteMobileDeviceApplicationByName(params *DeleteMobileDeviceApplicationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceApplicationByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceApplicationByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceApplicationByName",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceapplications/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceApplicationByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceApplicationByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceApplicationByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplications finds all mobile device applications
*/
func (a *Client) FindMobileDeviceApplications(params *FindMobileDeviceApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplications",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplicationsByBundleID finds mobile device applications by bundle ID

If multiple applications match, no application is returned. You may specify both bundle id and version to uniquely identify a mobile device application.
*/
func (a *Client) FindMobileDeviceApplicationsByBundleID(params *FindMobileDeviceApplicationsByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByBundleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsByBundleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplicationsByBundleID",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsByBundleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsByBundleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplicationsByBundleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplicationsByBundleIDandVersion finds mobile device applications by bundle ID and version
*/
func (a *Client) FindMobileDeviceApplicationsByBundleIDandVersion(params *FindMobileDeviceApplicationsByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByBundleIDandVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsByBundleIDandVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplicationsByBundleIDandVersion",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}/version/{version}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsByBundleIDandVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsByBundleIDandVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplicationsByBundleIDandVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplicationsByID finds mobile device applications by ID
*/
func (a *Client) FindMobileDeviceApplicationsByID(params *FindMobileDeviceApplicationsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplicationsById",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplicationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplicationsByName finds mobile device applications by name
*/
func (a *Client) FindMobileDeviceApplicationsByName(params *FindMobileDeviceApplicationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplicationsByName",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplicationsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceApplicationsByNameSubset finds a subset of data for mobile device applications by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindMobileDeviceApplicationsByNameSubset(params *FindMobileDeviceApplicationsByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceApplicationsByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceApplicationsByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceApplicationsByNameSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceApplicationsByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceApplicationsByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceApplicationsByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceAppsByIDSubset finds a subset of data for a mobile device application by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindMobileDeviceAppsByIDSubset(params *FindMobileDeviceAppsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceAppsByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceAppsByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceAppsByIdSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceapplications/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceAppsByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceAppsByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceAppsByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceApplicationByBundleID updates an existing mobile device application by bundle ID
*/
func (a *Client) UpdateMobileDeviceApplicationByBundleID(params *UpdateMobileDeviceApplicationByBundleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByBundleIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceApplicationByBundleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceApplicationByBundleID",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceApplicationByBundleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceApplicationByBundleIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceApplicationByBundleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceApplicationByBundleIDandVersion updates an existing mobile device application by bundle ID and version
*/
func (a *Client) UpdateMobileDeviceApplicationByBundleIDandVersion(params *UpdateMobileDeviceApplicationByBundleIDandVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByBundleIDandVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceApplicationByBundleIDandVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceApplicationByBundleIDandVersion",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceapplications/bundleid/{bundleid}/version/{version}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceApplicationByBundleIDandVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceApplicationByBundleIDandVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceApplicationByBundleIDandVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceApplicationByID updates an existing mobile device application by ID

App configuration preferences should be listed using character entities, e.g. <preferences><dict><key>abc</key><string>xyz</string></dict></preferences>
*/
func (a *Client) UpdateMobileDeviceApplicationByID(params *UpdateMobileDeviceApplicationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceApplicationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceApplicationById",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceapplications/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceApplicationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceApplicationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceApplicationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceApplicationByName updates an existing mobile device application by name
*/
func (a *Client) UpdateMobileDeviceApplicationByName(params *UpdateMobileDeviceApplicationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceApplicationByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceApplicationByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceApplicationByName",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceapplications/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceApplicationByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceApplicationByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceApplicationByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
