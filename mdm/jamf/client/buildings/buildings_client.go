// Code generated by go-swagger; DO NOT EDIT.

package buildings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new buildings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for buildings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBuildingByID(params *CreateBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBuildingByIDCreated, error)

	DeleteBuildingByID(params *DeleteBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBuildingByIDOK, error)

	DeleteBuildingByName(params *DeleteBuildingByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBuildingByNameOK, error)

	FindBuildings(params *FindBuildingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsOK, error)

	FindBuildingsByID(params *FindBuildingsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsByIDOK, error)

	FindBuildingsByName(params *FindBuildingsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsByNameOK, error)

	UpdateBuildingByID(params *UpdateBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildingByIDCreated, error)

	UpdateBuildingByName(params *UpdateBuildingByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildingByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBuildingByID creates a new building
*/
func (a *Client) CreateBuildingByID(params *CreateBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBuildingByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildingByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBuildingById",
		Method:             "POST",
		PathPattern:        "/buildings/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildingByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildingByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildingById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBuildingByID deletes a building by ID
*/
func (a *Client) DeleteBuildingByID(params *DeleteBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBuildingByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildingByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildingById",
		Method:             "DELETE",
		PathPattern:        "/buildings/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildingByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildingByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBuildingById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBuildingByName deletes a building by name
*/
func (a *Client) DeleteBuildingByName(params *DeleteBuildingByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBuildingByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildingByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildingByName",
		Method:             "DELETE",
		PathPattern:        "/buildings/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildingByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildingByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBuildingByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindBuildings finds all buildings
*/
func (a *Client) FindBuildings(params *FindBuildingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindBuildingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findBuildings",
		Method:             "GET",
		PathPattern:        "/buildings",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindBuildingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindBuildingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findBuildings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindBuildingsByID finds buildings by ID
*/
func (a *Client) FindBuildingsByID(params *FindBuildingsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindBuildingsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findBuildingsById",
		Method:             "GET",
		PathPattern:        "/buildings/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindBuildingsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindBuildingsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findBuildingsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindBuildingsByName finds buildings by name
*/
func (a *Client) FindBuildingsByName(params *FindBuildingsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindBuildingsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindBuildingsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findBuildingsByName",
		Method:             "GET",
		PathPattern:        "/buildings/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindBuildingsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindBuildingsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findBuildingsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBuildingByID updates an existing building by ID
*/
func (a *Client) UpdateBuildingByID(params *UpdateBuildingByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildingByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildingByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildingById",
		Method:             "PUT",
		PathPattern:        "/buildings/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildingByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildingByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildingById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBuildingByName updates an existing building by name
*/
func (a *Client) UpdateBuildingByName(params *UpdateBuildingByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBuildingByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildingByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildingByName",
		Method:             "PUT",
		PathPattern:        "/buildings/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildingByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildingByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildingByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
