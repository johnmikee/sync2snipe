// Code generated by go-swagger; DO NOT EDIT.

package advancedusersearches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new advancedusersearches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for advancedusersearches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAdvancedUserSearchgByID(params *CreateAdvancedUserSearchgByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAdvancedUserSearchgByIDCreated, error)

	DeleteAdvancedUserSearchByID(params *DeleteAdvancedUserSearchByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdvancedUserSearchByIDOK, error)

	DeleteAdvancedUserSearchByName(params *DeleteAdvancedUserSearchByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdvancedUserSearchByNameOK, error)

	FindAdvancedUserSearches(params *FindAdvancedUserSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAdvancedUserSearchesOK, error)

	FindAdvancedUserSearchesByID(params *FindAdvancedUserSearchesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAdvancedUserSearchesByIDOK, error)

	FindUserSearchesByName(params *FindUserSearchesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserSearchesByNameOK, error)

	UpdateAdvancedUserSearchByID(params *UpdateAdvancedUserSearchByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdvancedUserSearchByIDOK, error)

	UpdateAdvancedUserSearchByName(params *UpdateAdvancedUserSearchByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdvancedUserSearchByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAdvancedUserSearchgByID creates a new advanced user search by ID
*/
func (a *Client) CreateAdvancedUserSearchgByID(params *CreateAdvancedUserSearchgByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAdvancedUserSearchgByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAdvancedUserSearchgByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAdvancedUserSearchgById",
		Method:             "POST",
		PathPattern:        "/advancedusersearches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAdvancedUserSearchgByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAdvancedUserSearchgByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAdvancedUserSearchgById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAdvancedUserSearchByID deletes a user search by ID
*/
func (a *Client) DeleteAdvancedUserSearchByID(params *DeleteAdvancedUserSearchByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdvancedUserSearchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdvancedUserSearchByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAdvancedUserSearchById",
		Method:             "DELETE",
		PathPattern:        "/advancedusersearches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdvancedUserSearchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAdvancedUserSearchByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAdvancedUserSearchById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAdvancedUserSearchByName deletes a user search by name
*/
func (a *Client) DeleteAdvancedUserSearchByName(params *DeleteAdvancedUserSearchByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdvancedUserSearchByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdvancedUserSearchByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAdvancedUserSearchByName",
		Method:             "DELETE",
		PathPattern:        "/advancedusersearches/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdvancedUserSearchByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAdvancedUserSearchByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAdvancedUserSearchByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAdvancedUserSearches finds all advanced user searches
*/
func (a *Client) FindAdvancedUserSearches(params *FindAdvancedUserSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAdvancedUserSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAdvancedUserSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAdvancedUserSearches",
		Method:             "GET",
		PathPattern:        "/advancedusersearches",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAdvancedUserSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAdvancedUserSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAdvancedUserSearches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAdvancedUserSearchesByID finds user searches by ID
*/
func (a *Client) FindAdvancedUserSearchesByID(params *FindAdvancedUserSearchesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAdvancedUserSearchesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAdvancedUserSearchesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAdvancedUserSearchesById",
		Method:             "GET",
		PathPattern:        "/advancedusersearches/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAdvancedUserSearchesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAdvancedUserSearchesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAdvancedUserSearchesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindUserSearchesByName finds user searches by name
*/
func (a *Client) FindUserSearchesByName(params *FindUserSearchesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindUserSearchesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindUserSearchesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findUserSearchesByName",
		Method:             "GET",
		PathPattern:        "/advancedusersearches/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindUserSearchesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindUserSearchesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findUserSearchesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAdvancedUserSearchByID updates an existing advanced user search by ID
*/
func (a *Client) UpdateAdvancedUserSearchByID(params *UpdateAdvancedUserSearchByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdvancedUserSearchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdvancedUserSearchByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAdvancedUserSearchById",
		Method:             "PUT",
		PathPattern:        "/advancedusersearches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdvancedUserSearchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdvancedUserSearchByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAdvancedUserSearchById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAdvancedUserSearchByName updates an existing advanced user search by name
*/
func (a *Client) UpdateAdvancedUserSearchByName(params *UpdateAdvancedUserSearchByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdvancedUserSearchByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdvancedUserSearchByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAdvancedUserSearchByName",
		Method:             "PUT",
		PathPattern:        "/advancedusersearches/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdvancedUserSearchByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdvancedUserSearchByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAdvancedUserSearchByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
