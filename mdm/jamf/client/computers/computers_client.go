// Code generated by go-swagger; DO NOT EDIT.

package computers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateComputerByID(params *CreateComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerByIDCreated, error)

	DeleteComputerByID(params *DeleteComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByIDOK, error)

	DeleteComputerByMacAddress(params *DeleteComputerByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByMacAddressOK, error)

	DeleteComputerByName(params *DeleteComputerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByNameOK, error)

	DeleteComputerBySerialNumber(params *DeleteComputerBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerBySerialNumberOK, error)

	DeleteComputerByUDID(params *DeleteComputerByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByUDIDOK, error)

	FindComputers(params *FindComputersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersOK, error)

	FindComputersBasic(params *FindComputersBasicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBasicOK, error)

	FindComputersByID(params *FindComputersByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDOK, error)

	FindComputersByIDSubset(params *FindComputersByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDSubsetOK, error)

	FindComputersByMacAddress(params *FindComputersByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByMacAddressOK, error)

	FindComputersByMacAddressSubset(params *FindComputersByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByMacAddressSubsetOK, error)

	FindComputersByName(params *FindComputersByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameOK, error)

	FindComputersByNameSubset(params *FindComputersByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameSubsetOK, error)

	FindComputersBySerialNumber(params *FindComputersBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBySerialNumberOK, error)

	FindComputersBySerialNumberSubset(params *FindComputersBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBySerialNumberSubsetOK, error)

	FindComputersByUDID(params *FindComputersByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByUDIDOK, error)

	FindComputersByUDIDSubset(params *FindComputersByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByUDIDSubsetOK, error)

	FlushComputerExtenstionAttributeData(params *FlushComputerExtenstionAttributeDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FlushComputerExtenstionAttributeDataOK, error)

	MatchComputers(params *MatchComputersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchComputersOK, error)

	MatchComputersNames(params *MatchComputersNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchComputersNamesOK, error)

	UpdateComputerByID(params *UpdateComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByIDCreated, error)

	UpdateComputerByMacAddress(params *UpdateComputerByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByMacAddressCreated, error)

	UpdateComputerByName(params *UpdateComputerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByNameCreated, error)

	UpdateComputerBySerialNumber(params *UpdateComputerBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerBySerialNumberCreated, error)

	UpdateComputerByUDID(params *UpdateComputerByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByUDIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateComputerByID creates a computer

Certificates and mdm_capable are ignored.
*/
func (a *Client) CreateComputerByID(params *CreateComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerById",
		Method:             "POST",
		PathPattern:        "/computers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerByID deletes a computer by ID
*/
func (a *Client) DeleteComputerByID(params *DeleteComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerById",
		Method:             "DELETE",
		PathPattern:        "/computers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerByMacAddress deletes a computer by m a c address
*/
func (a *Client) DeleteComputerByMacAddress(params *DeleteComputerByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerByMacAddress",
		Method:             "DELETE",
		PathPattern:        "/computers/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerByName deletes a computer by name
*/
func (a *Client) DeleteComputerByName(params *DeleteComputerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerByName",
		Method:             "DELETE",
		PathPattern:        "/computers/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerBySerialNumber deletes a computer by serial number
*/
func (a *Client) DeleteComputerBySerialNumber(params *DeleteComputerBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerBySerialNumber",
		Method:             "DELETE",
		PathPattern:        "/computers/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerByUDID deletes a computer by u d ID
*/
func (a *Client) DeleteComputerByUDID(params *DeleteComputerByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerByUDID",
		Method:             "DELETE",
		PathPattern:        "/computers/udid/{udid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputers finds all computers
*/
func (a *Client) FindComputers(params *FindComputersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputers",
		Method:             "GET",
		PathPattern:        "/computers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersBasic finds basic information for all computers
*/
func (a *Client) FindComputersBasic(params *FindComputersBasicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBasicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersBasicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersBasic",
		Method:             "GET",
		PathPattern:        "/computers/subset/basic",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersBasicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersBasicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersBasic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByID finds computers by ID
*/
func (a *Client) FindComputersByID(params *FindComputersByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersById",
		Method:             "GET",
		PathPattern:        "/computers/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByIDSubset finds a subset of information for a computer

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindComputersByIDSubset(params *FindComputersByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByIdSubset",
		Method:             "GET",
		PathPattern:        "/computers/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByMacAddress finds computers by m a c address
*/
func (a *Client) FindComputersByMacAddress(params *FindComputersByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByMacAddress",
		Method:             "GET",
		PathPattern:        "/computers/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByMacAddressSubset finds a subset of data for computers by m a c address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Hardware)
*/
func (a *Client) FindComputersByMacAddressSubset(params *FindComputersByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/computers/macaddress/{macaddress}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByName finds the first computer with the given name
*/
func (a *Client) FindComputersByName(params *FindComputersByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByName",
		Method:             "GET",
		PathPattern:        "/computers/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByNameSubset finds a subset of data for the first computer with the given name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Hardware)
*/
func (a *Client) FindComputersByNameSubset(params *FindComputersByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByNameSubset",
		Method:             "GET",
		PathPattern:        "/computers/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersBySerialNumber finds computers by serial number
*/
func (a *Client) FindComputersBySerialNumber(params *FindComputersBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersBySerialNumber",
		Method:             "GET",
		PathPattern:        "/computers/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersBySerialNumberSubset finds a subset of data for computers by serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Hardware)
*/
func (a *Client) FindComputersBySerialNumberSubset(params *FindComputersBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersBySerialNumberSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersBySerialNumberSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersBySerialNumberSubset",
		Method:             "GET",
		PathPattern:        "/computers/serialnumber/{serialnumber}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersBySerialNumberSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersBySerialNumberSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersBySerialNumberSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByUDID finds computers by u d ID
*/
func (a *Client) FindComputersByUDID(params *FindComputersByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByUDID",
		Method:             "GET",
		PathPattern:        "/computers/udid/{udid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByUDIDSubset finds a subset of data for computers by u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Hardware)
*/
func (a *Client) FindComputersByUDIDSubset(params *FindComputersByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/computers/udid/{udid}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FlushComputerExtenstionAttributeData deletes data collected by an extension attribute
*/
func (a *Client) FlushComputerExtenstionAttributeData(params *FlushComputerExtenstionAttributeDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FlushComputerExtenstionAttributeDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFlushComputerExtenstionAttributeDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "flushComputerExtenstionAttributeData",
		Method:             "DELETE",
		PathPattern:        "/computers/extensionattributedataflush/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FlushComputerExtenstionAttributeDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FlushComputerExtenstionAttributeDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flushComputerExtenstionAttributeData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MatchComputers searches for computers that match the provided parameter

Match performs the same function as a simple search in the GUI.
*/
func (a *Client) MatchComputers(params *MatchComputersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchComputersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchComputersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "matchComputers",
		Method:             "GET",
		PathPattern:        "/computers/match/{match}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatchComputersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchComputersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for matchComputers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MatchComputersNames searches for computers that match the provided name parameter
*/
func (a *Client) MatchComputersNames(params *MatchComputersNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchComputersNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchComputersNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "matchComputersNames",
		Method:             "GET",
		PathPattern:        "/computers/match/name/{matchname}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatchComputersNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchComputersNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for matchComputersNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerByID updates an existing computer by ID

Certificates and mdm_capable are ignored.
*/
func (a *Client) UpdateComputerByID(params *UpdateComputerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerById",
		Method:             "PUT",
		PathPattern:        "/computers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerByMacAddress updates an existing computer by m a c address

Certificates and mdm_capable are ignored.
*/
func (a *Client) UpdateComputerByMacAddress(params *UpdateComputerByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByMacAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerByMacAddress",
		Method:             "PUT",
		PathPattern:        "/computers/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerByMacAddressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerByName updates an existing computer by name

Certificates and mdm_capable are ignored.
*/
func (a *Client) UpdateComputerByName(params *UpdateComputerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerByName",
		Method:             "PUT",
		PathPattern:        "/computers/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerBySerialNumber updates an existing computer by serial number

Certificates and mdm_capable are ignored.
*/
func (a *Client) UpdateComputerBySerialNumber(params *UpdateComputerBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerBySerialNumberCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerBySerialNumber",
		Method:             "PUT",
		PathPattern:        "/computers/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerBySerialNumberCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerByUDID updates an existing computer by u d ID

Certificates and mdm_capable are ignored.
*/
func (a *Client) UpdateComputerByUDID(params *UpdateComputerByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerByUDIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerByUDID",
		Method:             "PUT",
		PathPattern:        "/computers/udid/{udid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerByUDIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
