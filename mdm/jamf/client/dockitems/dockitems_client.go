// Code generated by go-swagger; DO NOT EDIT.

package dockitems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dockitems API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dockitems API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDockItemByID(params *CreateDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDockItemByIDCreated, error)

	DeleteDockItemByID(params *DeleteDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDockItemByIDOK, error)

	DeleteDockItemByName(params *DeleteDockItemByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDockItemByNameOK, error)

	FindDockItems(params *FindDockItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsOK, error)

	FindDockItemsByID(params *FindDockItemsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsByIDOK, error)

	FindDockItemsByName(params *FindDockItemsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsByNameOK, error)

	UpdateDockItemByID(params *UpdateDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDockItemByIDCreated, error)

	UpdateDockItemByName(params *UpdateDockItemByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDockItemByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDockItemByID creates a new dock item by ID
*/
func (a *Client) CreateDockItemByID(params *CreateDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDockItemByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockItemByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDockItemById",
		Method:             "POST",
		PathPattern:        "/dockitems/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDockItemByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockItemByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDockItemById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDockItemByID deletes a dock item by ID
*/
func (a *Client) DeleteDockItemByID(params *DeleteDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDockItemByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDockItemByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDockItemById",
		Method:             "DELETE",
		PathPattern:        "/dockitems/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDockItemByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDockItemByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDockItemById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDockItemByName deletes a dock item by name
*/
func (a *Client) DeleteDockItemByName(params *DeleteDockItemByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDockItemByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDockItemByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDockItemByName",
		Method:             "DELETE",
		PathPattern:        "/dockitems/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDockItemByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDockItemByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDockItemByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDockItems finds all dock items
*/
func (a *Client) FindDockItems(params *FindDockItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDockItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDockItems",
		Method:             "GET",
		PathPattern:        "/dockitems",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDockItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDockItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDockItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDockItemsByID finds dock items by ID
*/
func (a *Client) FindDockItemsByID(params *FindDockItemsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDockItemsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDockItemsById",
		Method:             "GET",
		PathPattern:        "/dockitems/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDockItemsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDockItemsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDockItemsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDockItemsByName finds dock items by name
*/
func (a *Client) FindDockItemsByName(params *FindDockItemsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDockItemsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDockItemsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDockItemsByName",
		Method:             "GET",
		PathPattern:        "/dockitems/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDockItemsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDockItemsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDockItemsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDockItemByID updates an existing dock item by ID
*/
func (a *Client) UpdateDockItemByID(params *UpdateDockItemByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDockItemByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockItemByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDockItemById",
		Method:             "PUT",
		PathPattern:        "/dockitems/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDockItemByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockItemByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDockItemById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDockItemByName updates an existing dock item by name
*/
func (a *Client) UpdateDockItemByName(params *UpdateDockItemByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDockItemByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDockItemByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDockItemByName",
		Method:             "PUT",
		PathPattern:        "/dockitems/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDockItemByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDockItemByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDockItemByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
