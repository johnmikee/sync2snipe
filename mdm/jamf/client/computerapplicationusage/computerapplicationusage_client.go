// Code generated by go-swagger; DO NOT EDIT.

package computerapplicationusage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computerapplicationusage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computerapplicationusage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindComputerApplicationUsageByID(params *FindComputerApplicationUsageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByIDOK, error)

	FindComputerApplicationUsageByMacAddress(params *FindComputerApplicationUsageByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByMacAddressOK, error)

	FindComputerApplicationUsageByName(params *FindComputerApplicationUsageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByNameOK, error)

	FindComputerApplicationUsageBySerial(params *FindComputerApplicationUsageBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageBySerialOK, error)

	FindComputerApplicationUsageByUDID(params *FindComputerApplicationUsageByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByUDIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindComputerApplicationUsageByID finds computer application usage by computer ID
*/
func (a *Client) FindComputerApplicationUsageByID(params *FindComputerApplicationUsageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationUsageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationUsageById",
		Method:             "GET",
		PathPattern:        "/computerapplicationusage/id/{id}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationUsageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationUsageByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationUsageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationUsageByMacAddress finds computer application usage by computer m a c address
*/
func (a *Client) FindComputerApplicationUsageByMacAddress(params *FindComputerApplicationUsageByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationUsageByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationUsageByMacAddress",
		Method:             "GET",
		PathPattern:        "/computerapplicationusage/macaddress/{macaddress}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationUsageByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationUsageByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationUsageByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationUsageByName finds computer application usage by computer name
*/
func (a *Client) FindComputerApplicationUsageByName(params *FindComputerApplicationUsageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationUsageByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationUsageByName",
		Method:             "GET",
		PathPattern:        "/computerapplicationusage/name/{name}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationUsageByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationUsageByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationUsageByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationUsageBySerial finds computer application usage by computer serial number
*/
func (a *Client) FindComputerApplicationUsageBySerial(params *FindComputerApplicationUsageBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageBySerialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationUsageBySerialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationUsageBySerial",
		Method:             "GET",
		PathPattern:        "/computerapplicationusage/serialnumber/{serialnumber}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationUsageBySerialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationUsageBySerialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationUsageBySerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationUsageByUDID finds computer application usage by computer u d ID
*/
func (a *Client) FindComputerApplicationUsageByUDID(params *FindComputerApplicationUsageByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationUsageByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationUsageByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationUsageByUDID",
		Method:             "GET",
		PathPattern:        "/computerapplicationusage/udid/{udid}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationUsageByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationUsageByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationUsageByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
