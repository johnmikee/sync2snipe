// Code generated by go-swagger; DO NOT EDIT.

package computerapplicationusage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindComputerApplicationUsageByNameParams creates a new FindComputerApplicationUsageByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindComputerApplicationUsageByNameParams() *FindComputerApplicationUsageByNameParams {
	return &FindComputerApplicationUsageByNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindComputerApplicationUsageByNameParamsWithTimeout creates a new FindComputerApplicationUsageByNameParams object
// with the ability to set a timeout on a request.
func NewFindComputerApplicationUsageByNameParamsWithTimeout(timeout time.Duration) *FindComputerApplicationUsageByNameParams {
	return &FindComputerApplicationUsageByNameParams{
		timeout: timeout,
	}
}

// NewFindComputerApplicationUsageByNameParamsWithContext creates a new FindComputerApplicationUsageByNameParams object
// with the ability to set a context for a request.
func NewFindComputerApplicationUsageByNameParamsWithContext(ctx context.Context) *FindComputerApplicationUsageByNameParams {
	return &FindComputerApplicationUsageByNameParams{
		Context: ctx,
	}
}

// NewFindComputerApplicationUsageByNameParamsWithHTTPClient creates a new FindComputerApplicationUsageByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindComputerApplicationUsageByNameParamsWithHTTPClient(client *http.Client) *FindComputerApplicationUsageByNameParams {
	return &FindComputerApplicationUsageByNameParams{
		HTTPClient: client,
	}
}

/*
FindComputerApplicationUsageByNameParams contains all the parameters to send to the API endpoint

	for the find computer application usage by name operation.

	Typically these are written to a http.Request.
*/
type FindComputerApplicationUsageByNameParams struct {

	/* EndDate.

	   End date (e.g. yyyy-mm-dd)
	*/
	EndDate string

	/* Name.

	   Name to filter by
	*/
	Name string

	/* StartDate.

	   Start date (e.g. yyyy-mm-dd)
	*/
	StartDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find computer application usage by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationUsageByNameParams) WithDefaults() *FindComputerApplicationUsageByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find computer application usage by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationUsageByNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithTimeout(timeout time.Duration) *FindComputerApplicationUsageByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithContext(ctx context.Context) *FindComputerApplicationUsageByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithHTTPClient(client *http.Client) *FindComputerApplicationUsageByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithEndDate(endDate string) *FindComputerApplicationUsageByNameParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetEndDate(endDate string) {
	o.EndDate = endDate
}

// WithName adds the name to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithName(name string) *FindComputerApplicationUsageByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetName(name string) {
	o.Name = name
}

// WithStartDate adds the startDate to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) WithStartDate(startDate string) *FindComputerApplicationUsageByNameParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the find computer application usage by name params
func (o *FindComputerApplicationUsageByNameParams) SetStartDate(startDate string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *FindComputerApplicationUsageByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param end_date
	if err := r.SetPathParam("end_date", o.EndDate); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param start_date
	if err := r.SetPathParam("start_date", o.StartDate); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
