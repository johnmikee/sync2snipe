// Code generated by go-swagger; DO NOT EDIT.

package vppassignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vppassignments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vppassignments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAssignmentByID(params *CreateAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAssignmentByIDCreated, error)

	DeleteAssignmentByID(params *DeleteAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssignmentByIDOK, error)

	FindAssignmentByID(params *FindAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAssignmentByIDOK, error)

	FindVPPAdminAssignment(params *FindVPPAdminAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAssignmentOK, error)

	UpdateAssignmentByID(params *UpdateAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAssignmentByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAssignmentByID creates a new v p p assignment by ID
*/
func (a *Client) CreateAssignmentByID(params *CreateAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAssignmentByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAssignmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAssignmentById",
		Method:             "POST",
		PathPattern:        "/vppassignments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAssignmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAssignmentByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAssignmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAssignmentByID deletes a v p p assignment by ID
*/
func (a *Client) DeleteAssignmentByID(params *DeleteAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssignmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssignmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAssignmentById",
		Method:             "DELETE",
		PathPattern:        "/vppassignments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssignmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssignmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAssignmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAssignmentByID finds v p p assignment by ID
*/
func (a *Client) FindAssignmentByID(params *FindAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAssignmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAssignmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAssignmentById",
		Method:             "GET",
		PathPattern:        "/vppassignments/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAssignmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAssignmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAssignmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindVPPAdminAssignment finds all v p p assignments
*/
func (a *Client) FindVPPAdminAssignment(params *FindVPPAdminAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVPPAdminAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVPPAdminAssignment",
		Method:             "GET",
		PathPattern:        "/vppassignments",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVPPAdminAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVPPAdminAssignmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVPPAdminAssignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAssignmentByID updates a v p p assignment by ID
*/
func (a *Client) UpdateAssignmentByID(params *UpdateAssignmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAssignmentByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAssignmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAssignmentById",
		Method:             "PUT",
		PathPattern:        "/vppassignments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAssignmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAssignmentByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAssignmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
