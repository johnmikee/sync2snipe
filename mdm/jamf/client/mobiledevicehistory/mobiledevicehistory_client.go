// Code generated by go-swagger; DO NOT EDIT.

package mobiledevicehistory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledevicehistory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledevicehistory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindMobileDeviceHistoryByID(params *FindMobileDeviceHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByIDOK, error)

	FindMobileDeviceHistoryByIDSubset(params *FindMobileDeviceHistoryByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByIDSubsetOK, error)

	FindMobileDeviceHistoryByMacAddress(params *FindMobileDeviceHistoryByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByMacAddressOK, error)

	FindMobileDeviceHistoryByMacAddressSubset(params *FindMobileDeviceHistoryByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByMacAddressSubsetOK, error)

	FindMobileDeviceHistoryByName(params *FindMobileDeviceHistoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByNameOK, error)

	FindMobileDeviceHistoryByNameSubset(params *FindMobileDeviceHistoryByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByNameSubsetOK, error)

	FindMobileDeviceHistoryBySerialNumber(params *FindMobileDeviceHistoryBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryBySerialNumberOK, error)

	FindMobileDeviceHistoryBySerialNumberSubset(params *FindMobileDeviceHistoryBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryBySerialNumberSubsetOK, error)

	FindMobileDeviceHistoryByUDID(params *FindMobileDeviceHistoryByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByUDIDOK, error)

	FindMobileDeviceHistoryByUDIDSubset(params *FindMobileDeviceHistoryByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByUDIDSubsetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindMobileDeviceHistoryByID finds mobile device history by ID
*/
func (a *Client) FindMobileDeviceHistoryByID(params *FindMobileDeviceHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryById",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByIDSubset finds a subset of data for a mobile device history

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Audits)
*/
func (a *Client) FindMobileDeviceHistoryByIDSubset(params *FindMobileDeviceHistoryByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByIdSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByMacAddress finds mobile device history by wifi mac address
*/
func (a *Client) FindMobileDeviceHistoryByMacAddress(params *FindMobileDeviceHistoryByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByMacAddress",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByMacAddressSubset finds a subset of data for mobile device history by wifi mac address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Audits)
*/
func (a *Client) FindMobileDeviceHistoryByMacAddressSubset(params *FindMobileDeviceHistoryByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/macaddress/{macaddress}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByName finds mobile device history by name
*/
func (a *Client) FindMobileDeviceHistoryByName(params *FindMobileDeviceHistoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByName",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByNameSubset finds a subset of data for mobile device history by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Audits)
*/
func (a *Client) FindMobileDeviceHistoryByNameSubset(params *FindMobileDeviceHistoryByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByNameSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryBySerialNumber finds mobile device history by serial number
*/
func (a *Client) FindMobileDeviceHistoryBySerialNumber(params *FindMobileDeviceHistoryBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryBySerialNumber",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryBySerialNumberSubset finds a subset of data for mobile device history by serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Audits)
*/
func (a *Client) FindMobileDeviceHistoryBySerialNumberSubset(params *FindMobileDeviceHistoryBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryBySerialNumberSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryBySerialNumberSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryBySerialNumberSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/serialnumber/{serialnumber}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryBySerialNumberSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryBySerialNumberSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryBySerialNumberSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByUDID finds mobile device history by u d ID
*/
func (a *Client) FindMobileDeviceHistoryByUDID(params *FindMobileDeviceHistoryByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByUDID",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/udid/{udid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceHistoryByUDIDSubset finds a subset of data for mobile device history by u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Audits)
*/
func (a *Client) FindMobileDeviceHistoryByUDIDSubset(params *FindMobileDeviceHistoryByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceHistoryByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceHistoryByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceHistoryByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevicehistory/udid/{udid}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceHistoryByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceHistoryByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceHistoryByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
