// Code generated by go-swagger; DO NOT EDIT.

package vppaccounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vppaccounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vppaccounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVPPAdminAccountByID(params *CreateVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVPPAdminAccountByIDCreated, error)

	DeleteVPPAdminAccountByID(params *DeleteVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVPPAdminAccountByIDOK, error)

	FindVPPAdminAccount(params *FindVPPAdminAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAccountOK, error)

	FindVPPAdminAccountByID(params *FindVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAccountByIDOK, error)

	UpdateVPPAdminAccountByID(params *UpdateVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVPPAdminAccountByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateVPPAdminAccountByID creates a new v p p account by ID

The service_token value may not match another vpp account. account_name and expiration_date are derived from the service token.
*/
func (a *Client) CreateVPPAdminAccountByID(params *CreateVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVPPAdminAccountByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVPPAdminAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVPPAdminAccountById",
		Method:             "POST",
		PathPattern:        "/vppaccounts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVPPAdminAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVPPAdminAccountByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVPPAdminAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVPPAdminAccountByID deletes a v p p account by ID
*/
func (a *Client) DeleteVPPAdminAccountByID(params *DeleteVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVPPAdminAccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVPPAdminAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVPPAdminAccountById",
		Method:             "DELETE",
		PathPattern:        "/vppaccounts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVPPAdminAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVPPAdminAccountByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVPPAdminAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindVPPAdminAccount finds all v p p accounts
*/
func (a *Client) FindVPPAdminAccount(params *FindVPPAdminAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVPPAdminAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVPPAdminAccount",
		Method:             "GET",
		PathPattern:        "/vppaccounts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVPPAdminAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVPPAdminAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVPPAdminAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindVPPAdminAccountByID finds v p p account by ID
*/
func (a *Client) FindVPPAdminAccountByID(params *FindVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminAccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVPPAdminAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVPPAdminAccountById",
		Method:             "GET",
		PathPattern:        "/vppaccounts/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVPPAdminAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVPPAdminAccountByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVPPAdminAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVPPAdminAccountByID updates a v p p account by ID

The service_token value may not match another vpp account. account_name and expiration_date are derived from the service token.
*/
func (a *Client) UpdateVPPAdminAccountByID(params *UpdateVPPAdminAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVPPAdminAccountByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVPPAdminAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVPPAdminAccountById",
		Method:             "PUT",
		PathPattern:        "/vppaccounts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVPPAdminAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVPPAdminAccountByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVPPAdminAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
