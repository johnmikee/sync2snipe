// Code generated by go-swagger; DO NOT EDIT.

package fileuploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadFilesParams creates a new UploadFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFilesParams() *UploadFilesParams {
	return &UploadFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFilesParamsWithTimeout creates a new UploadFilesParams object
// with the ability to set a timeout on a request.
func NewUploadFilesParamsWithTimeout(timeout time.Duration) *UploadFilesParams {
	return &UploadFilesParams{
		timeout: timeout,
	}
}

// NewUploadFilesParamsWithContext creates a new UploadFilesParams object
// with the ability to set a context for a request.
func NewUploadFilesParamsWithContext(ctx context.Context) *UploadFilesParams {
	return &UploadFilesParams{
		Context: ctx,
	}
}

// NewUploadFilesParamsWithHTTPClient creates a new UploadFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFilesParamsWithHTTPClient(client *http.Client) *UploadFilesParams {
	return &UploadFilesParams{
		HTTPClient: client,
	}
}

/*
UploadFilesParams contains all the parameters to send to the API endpoint

	for the upload files operation.

	Typically these are written to a http.Request.
*/
type UploadFilesParams struct {

	/* FORCEIPAUPLOAD.

	   Uploads the .ipa to Jamf Cloud Distribution Service instead of the Jamf Pro database. Only supported for Jamf Cloud customers and the `mobiledeviceapplicationsipa` resource.
	*/
	FORCEIPAUPLOAD *bool

	// ID.
	ID string

	/* IDType.

	   Name is supported for all but the peripherals resource
	*/
	IDType string

	/* Resource.

	   Resource to attach the file to
	*/
	Resource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) WithDefaults() *UploadFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) WithTimeout(timeout time.Duration) *UploadFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload files params
func (o *UploadFilesParams) WithContext(ctx context.Context) *UploadFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload files params
func (o *UploadFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) WithHTTPClient(client *http.Client) *UploadFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFORCEIPAUPLOAD adds the fORCEIPAUPLOAD to the upload files params
func (o *UploadFilesParams) WithFORCEIPAUPLOAD(fORCEIPAUPLOAD *bool) *UploadFilesParams {
	o.SetFORCEIPAUPLOAD(fORCEIPAUPLOAD)
	return o
}

// SetFORCEIPAUPLOAD adds the fORCEIpAUPLOAD to the upload files params
func (o *UploadFilesParams) SetFORCEIPAUPLOAD(fORCEIPAUPLOAD *bool) {
	o.FORCEIPAUPLOAD = fORCEIPAUPLOAD
}

// WithID adds the id to the upload files params
func (o *UploadFilesParams) WithID(id string) *UploadFilesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the upload files params
func (o *UploadFilesParams) SetID(id string) {
	o.ID = id
}

// WithIDType adds the iDType to the upload files params
func (o *UploadFilesParams) WithIDType(iDType string) *UploadFilesParams {
	o.SetIDType(iDType)
	return o
}

// SetIDType adds the idType to the upload files params
func (o *UploadFilesParams) SetIDType(iDType string) {
	o.IDType = iDType
}

// WithResource adds the resource to the upload files params
func (o *UploadFilesParams) WithResource(resource string) *UploadFilesParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the upload files params
func (o *UploadFilesParams) SetResource(resource string) {
	o.Resource = resource
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FORCEIPAUPLOAD != nil {

		// query param FORCE_IPA_UPLOAD
		var qrFORCEIPAUPLOAD bool

		if o.FORCEIPAUPLOAD != nil {
			qrFORCEIPAUPLOAD = *o.FORCEIPAUPLOAD
		}
		qFORCEIPAUPLOAD := swag.FormatBool(qrFORCEIPAUPLOAD)
		if qFORCEIPAUPLOAD != "" {

			if err := r.SetQueryParam("FORCE_IPA_UPLOAD", qFORCEIPAUPLOAD); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param idType
	if err := r.SetPathParam("idType", o.IDType); err != nil {
		return err
	}

	// path param resource
	if err := r.SetPathParam("resource", o.Resource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
