// Code generated by go-swagger; DO NOT EDIT.

package computerapplications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindComputerApplicationsByNameInventoryParams creates a new FindComputerApplicationsByNameInventoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindComputerApplicationsByNameInventoryParams() *FindComputerApplicationsByNameInventoryParams {
	return &FindComputerApplicationsByNameInventoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindComputerApplicationsByNameInventoryParamsWithTimeout creates a new FindComputerApplicationsByNameInventoryParams object
// with the ability to set a timeout on a request.
func NewFindComputerApplicationsByNameInventoryParamsWithTimeout(timeout time.Duration) *FindComputerApplicationsByNameInventoryParams {
	return &FindComputerApplicationsByNameInventoryParams{
		timeout: timeout,
	}
}

// NewFindComputerApplicationsByNameInventoryParamsWithContext creates a new FindComputerApplicationsByNameInventoryParams object
// with the ability to set a context for a request.
func NewFindComputerApplicationsByNameInventoryParamsWithContext(ctx context.Context) *FindComputerApplicationsByNameInventoryParams {
	return &FindComputerApplicationsByNameInventoryParams{
		Context: ctx,
	}
}

// NewFindComputerApplicationsByNameInventoryParamsWithHTTPClient creates a new FindComputerApplicationsByNameInventoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindComputerApplicationsByNameInventoryParamsWithHTTPClient(client *http.Client) *FindComputerApplicationsByNameInventoryParams {
	return &FindComputerApplicationsByNameInventoryParams{
		HTTPClient: client,
	}
}

/*
FindComputerApplicationsByNameInventoryParams contains all the parameters to send to the API endpoint

	for the find computer applications by name inventory operation.

	Typically these are written to a http.Request.
*/
type FindComputerApplicationsByNameInventoryParams struct {

	/* Application.

	   Application name to filter by
	*/
	Application string

	/* Inventory.

	   Inventory options
	*/
	Inventory string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find computer applications by name inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationsByNameInventoryParams) WithDefaults() *FindComputerApplicationsByNameInventoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find computer applications by name inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationsByNameInventoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) WithTimeout(timeout time.Duration) *FindComputerApplicationsByNameInventoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) WithContext(ctx context.Context) *FindComputerApplicationsByNameInventoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) WithHTTPClient(client *http.Client) *FindComputerApplicationsByNameInventoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) WithApplication(application string) *FindComputerApplicationsByNameInventoryParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) SetApplication(application string) {
	o.Application = application
}

// WithInventory adds the inventory to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) WithInventory(inventory string) *FindComputerApplicationsByNameInventoryParams {
	o.SetInventory(inventory)
	return o
}

// SetInventory adds the inventory to the find computer applications by name inventory params
func (o *FindComputerApplicationsByNameInventoryParams) SetInventory(inventory string) {
	o.Inventory = inventory
}

// WriteToRequest writes these params to a swagger request
func (o *FindComputerApplicationsByNameInventoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param application
	if err := r.SetPathParam("application", o.Application); err != nil {
		return err
	}

	// path param inventory
	if err := r.SetPathParam("inventory", o.Inventory); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
