// Code generated by go-swagger; DO NOT EDIT.

package computerapplications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computerapplications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computerapplications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindComputerApplicationByNameAndVersion(params *FindComputerApplicationByNameAndVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationByNameAndVersionOK, error)

	FindComputerApplicationsByName(params *FindComputerApplicationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameOK, error)

	FindComputerApplicationsByNameAndVersionAndInventory(params *FindComputerApplicationsByNameAndVersionAndInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameAndVersionAndInventoryOK, error)

	FindComputerApplicationsByNameInventory(params *FindComputerApplicationsByNameInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameInventoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindComputerApplicationByNameAndVersion finds computer applications by name and version
*/
func (a *Client) FindComputerApplicationByNameAndVersion(params *FindComputerApplicationByNameAndVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationByNameAndVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationByNameAndVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationByNameAndVersion",
		Method:             "GET",
		PathPattern:        "/computerapplications/application/{application}/version/{version}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationByNameAndVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationByNameAndVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationByNameAndVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationsByName finds computer applications by name
*/
func (a *Client) FindComputerApplicationsByName(params *FindComputerApplicationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationsByName",
		Method:             "GET",
		PathPattern:        "/computerapplications/application/{application}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationsByNameAndVersionAndInventory finds computer applications by name and version

Generates additional inventory data for the devices matching the search criteria. Inventory values may be displayed in addition to computer identification information. Use Default to view the same fields as those checked for Inventory Display, otherwise list display fields separated by commas.
*/
func (a *Client) FindComputerApplicationsByNameAndVersionAndInventory(params *FindComputerApplicationsByNameAndVersionAndInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameAndVersionAndInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationsByNameAndVersionAndInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationsByNameAndVersionAndInventory",
		Method:             "GET",
		PathPattern:        "/computerapplications/application/{application}/version/{version}/inventory/{inventory}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationsByNameAndVersionAndInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationsByNameAndVersionAndInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationsByNameAndVersionAndInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerApplicationsByNameInventory finds computer applications by name with additional display fields

Valid values for inventory are comma separated Display Fields for computers. Display Fields with spaces must be percent encoded (e.g. /computerapplications/application/Safari.app/inventory/Operating%20System,Last%20Check-in)
*/
func (a *Client) FindComputerApplicationsByNameInventory(params *FindComputerApplicationsByNameInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerApplicationsByNameInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerApplicationsByNameInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerApplicationsByNameInventory",
		Method:             "GET",
		PathPattern:        "/computerapplications/application/{application}/inventory/{inventory}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerApplicationsByNameInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerApplicationsByNameInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerApplicationsByNameInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
