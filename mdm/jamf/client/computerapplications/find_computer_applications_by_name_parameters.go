// Code generated by go-swagger; DO NOT EDIT.

package computerapplications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindComputerApplicationsByNameParams creates a new FindComputerApplicationsByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindComputerApplicationsByNameParams() *FindComputerApplicationsByNameParams {
	return &FindComputerApplicationsByNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindComputerApplicationsByNameParamsWithTimeout creates a new FindComputerApplicationsByNameParams object
// with the ability to set a timeout on a request.
func NewFindComputerApplicationsByNameParamsWithTimeout(timeout time.Duration) *FindComputerApplicationsByNameParams {
	return &FindComputerApplicationsByNameParams{
		timeout: timeout,
	}
}

// NewFindComputerApplicationsByNameParamsWithContext creates a new FindComputerApplicationsByNameParams object
// with the ability to set a context for a request.
func NewFindComputerApplicationsByNameParamsWithContext(ctx context.Context) *FindComputerApplicationsByNameParams {
	return &FindComputerApplicationsByNameParams{
		Context: ctx,
	}
}

// NewFindComputerApplicationsByNameParamsWithHTTPClient creates a new FindComputerApplicationsByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindComputerApplicationsByNameParamsWithHTTPClient(client *http.Client) *FindComputerApplicationsByNameParams {
	return &FindComputerApplicationsByNameParams{
		HTTPClient: client,
	}
}

/*
FindComputerApplicationsByNameParams contains all the parameters to send to the API endpoint

	for the find computer applications by name operation.

	Typically these are written to a http.Request.
*/
type FindComputerApplicationsByNameParams struct {

	/* Application.

	   Application name to filter by
	*/
	Application string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find computer applications by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationsByNameParams) WithDefaults() *FindComputerApplicationsByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find computer applications by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerApplicationsByNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) WithTimeout(timeout time.Duration) *FindComputerApplicationsByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) WithContext(ctx context.Context) *FindComputerApplicationsByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) WithHTTPClient(client *http.Client) *FindComputerApplicationsByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) WithApplication(application string) *FindComputerApplicationsByNameParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the find computer applications by name params
func (o *FindComputerApplicationsByNameParams) SetApplication(application string) {
	o.Application = application
}

// WriteToRequest writes these params to a swagger request
func (o *FindComputerApplicationsByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param application
	if err := r.SetPathParam("application", o.Application); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
