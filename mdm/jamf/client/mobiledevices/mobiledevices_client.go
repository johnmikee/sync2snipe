// Code generated by go-swagger; DO NOT EDIT.

package mobiledevices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledevices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledevices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMobileDeviceByID(params *CreateMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceByIDCreated, error)

	DeleteMobileDeviceByID(params *DeleteMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByIDOK, error)

	DeleteMobileDeviceByMacAddress(params *DeleteMobileDeviceByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByMacAddressOK, error)

	DeleteMobileDeviceByName(params *DeleteMobileDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByNameOK, error)

	DeleteMobileDeviceBySerialNumber(params *DeleteMobileDeviceBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceBySerialNumberOK, error)

	DeleteMobileDeviceByUDID(params *DeleteMobileDeviceByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByUDIDOK, error)

	FindMobileDevices(params *FindMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesOK, error)

	FindMobileDevicesByID(params *FindMobileDevicesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByIDOK, error)

	FindMobileDevicesByIDSubset(params *FindMobileDevicesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByIDSubsetOK, error)

	FindMobileDevicesByMacAddress(params *FindMobileDevicesByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByMacAddressOK, error)

	FindMobileDevicesByMacAddressSubset(params *FindMobileDevicesByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByMacAddressSubsetOK, error)

	FindMobileDevicesByName(params *FindMobileDevicesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByNameOK, error)

	FindMobileDevicesByNameSubset(params *FindMobileDevicesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByNameSubsetOK, error)

	FindMobileDevicesBySerialNumber(params *FindMobileDevicesBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesBySerialNumberOK, error)

	FindMobileDevicesBySerialNumberSubset(params *FindMobileDevicesBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesBySerialNumberSubsetOK, error)

	FindMobileDevicesByUDID(params *FindMobileDevicesByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByUDIDOK, error)

	FindMobileDevicesByUDIDSubset(params *FindMobileDevicesByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByUDIDSubsetOK, error)

	MatchMobileDevices(params *MatchMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchMobileDevicesOK, error)

	UpdateMobileDeviceByID(params *UpdateMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByIDCreated, error)

	UpdateMobileDeviceByMacAddress(params *UpdateMobileDeviceByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByMacAddressCreated, error)

	UpdateMobileDeviceByName(params *UpdateMobileDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByNameCreated, error)

	UpdateMobileDeviceBySerialNumber(params *UpdateMobileDeviceBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceBySerialNumberCreated, error)

	UpdateMobileDeviceByUDID(params *UpdateMobileDeviceByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByUDIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMobileDeviceByID creates a new mobile device by ID

To distinguish between mobile device types (e.g., iPad, iPhone, or Apple TV), use the <model_identifier> field. Default mobile device type is 'Unknown'. Can include a subset for Android devices if applicable. <os_name> in <android> is derived from the API level and cannot be set.
*/
func (a *Client) CreateMobileDeviceByID(params *CreateMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobileDeviceByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMobileDeviceById",
		Method:             "POST",
		PathPattern:        "/mobiledevices/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobileDeviceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobileDeviceByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobileDeviceById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceByID deletes a mobile device by ID
*/
func (a *Client) DeleteMobileDeviceByID(params *DeleteMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceById",
		Method:             "DELETE",
		PathPattern:        "/mobiledevices/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceByMacAddress deletes a mobile device by mac address
*/
func (a *Client) DeleteMobileDeviceByMacAddress(params *DeleteMobileDeviceByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceByMacAddress",
		Method:             "DELETE",
		PathPattern:        "/mobiledevices/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceByName deletes a mobile device by name
*/
func (a *Client) DeleteMobileDeviceByName(params *DeleteMobileDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceByName",
		Method:             "DELETE",
		PathPattern:        "/mobiledevices/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceBySerialNumber deletes a mobile device by serial number
*/
func (a *Client) DeleteMobileDeviceBySerialNumber(params *DeleteMobileDeviceBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceBySerialNumber",
		Method:             "DELETE",
		PathPattern:        "/mobiledevices/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceByUDID deletes a mobile device by u d ID
*/
func (a *Client) DeleteMobileDeviceByUDID(params *DeleteMobileDeviceByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceByUDID",
		Method:             "DELETE",
		PathPattern:        "/mobiledevices/udid/{udid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevices finds all mobile devices
*/
func (a *Client) FindMobileDevices(params *FindMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevices",
		Method:             "GET",
		PathPattern:        "/mobiledevices",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByID finds mobile devices by ID
*/
func (a *Client) FindMobileDevicesByID(params *FindMobileDevicesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesById",
		Method:             "GET",
		PathPattern:        "/mobiledevices/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByIDSubset finds a subset of data for a mobile device

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDevicesByIDSubset(params *FindMobileDevicesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByIdSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevices/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByMacAddress finds mobile devices by mac address
*/
func (a *Client) FindMobileDevicesByMacAddress(params *FindMobileDevicesByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByMacAddress",
		Method:             "GET",
		PathPattern:        "/mobiledevices/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByMacAddressSubset finds a subset of data for mobile devices by mac address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDevicesByMacAddressSubset(params *FindMobileDevicesByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevices/macaddress/{macaddress}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByName finds mobile devices by name
*/
func (a *Client) FindMobileDevicesByName(params *FindMobileDevicesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByName",
		Method:             "GET",
		PathPattern:        "/mobiledevices/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByNameSubset finds a subset of data for mobile devices by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDevicesByNameSubset(params *FindMobileDevicesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByNameSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevices/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesBySerialNumber finds mobile devices by serial number
*/
func (a *Client) FindMobileDevicesBySerialNumber(params *FindMobileDevicesBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesBySerialNumber",
		Method:             "GET",
		PathPattern:        "/mobiledevices/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesBySerialNumberSubset finds a subset of data for mobile devices by serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDevicesBySerialNumberSubset(params *FindMobileDevicesBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesBySerialNumberSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesBySerialNumberSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesBySerialNumberSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevices/serialnumber/{serialnumber}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesBySerialNumberSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesBySerialNumberSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesBySerialNumberSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByUDID finds mobile devices by u d ID
*/
func (a *Client) FindMobileDevicesByUDID(params *FindMobileDevicesByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByUDID",
		Method:             "GET",
		PathPattern:        "/mobiledevices/udid/{udid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDevicesByUDIDSubset finds a subset of data for mobile devices by u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Location)
*/
func (a *Client) FindMobileDevicesByUDIDSubset(params *FindMobileDevicesByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDevicesByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDevicesByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDevicesByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/mobiledevices/udid/{udid}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDevicesByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDevicesByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDevicesByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MatchMobileDevices searches for mobile devices that match the provided parameter

Match performs the same function as a simple search in the GUI.
*/
func (a *Client) MatchMobileDevices(params *MatchMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MatchMobileDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchMobileDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "matchMobileDevices",
		Method:             "GET",
		PathPattern:        "/mobiledevices/match/{match}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatchMobileDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchMobileDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for matchMobileDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceByID updates an existing mobile device by ID

<os_name> in <android> is derived from the api level and cannot be set.
*/
func (a *Client) UpdateMobileDeviceByID(params *UpdateMobileDeviceByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceById",
		Method:             "PUT",
		PathPattern:        "/mobiledevices/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceByMacAddress updates an existing mobile device by mac address

<os_name> in <android> is derived from the api level and cannot be set.
*/
func (a *Client) UpdateMobileDeviceByMacAddress(params *UpdateMobileDeviceByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByMacAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceByMacAddress",
		Method:             "PUT",
		PathPattern:        "/mobiledevices/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceByMacAddressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceByName updates an existing mobile device by name

<os_name> in <android> is derived from the api level and cannot be set.
*/
func (a *Client) UpdateMobileDeviceByName(params *UpdateMobileDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceByName",
		Method:             "PUT",
		PathPattern:        "/mobiledevices/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceBySerialNumber updates an existing mobile device by serial number

<os_name> in <android> is derived from the api level and cannot be set.
*/
func (a *Client) UpdateMobileDeviceBySerialNumber(params *UpdateMobileDeviceBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceBySerialNumberCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceBySerialNumber",
		Method:             "PUT",
		PathPattern:        "/mobiledevices/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceBySerialNumberCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceByUDID updates an existing mobile device by u d ID

<os_name> in <android> is derived from the api level and cannot be set.
*/
func (a *Client) UpdateMobileDeviceByUDID(params *UpdateMobileDeviceByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceByUDIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceByUDID",
		Method:             "PUT",
		PathPattern:        "/mobiledevices/udid/{udid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceByUDIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
