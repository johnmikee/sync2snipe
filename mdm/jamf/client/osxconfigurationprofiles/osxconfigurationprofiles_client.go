// Code generated by go-swagger; DO NOT EDIT.

package osxconfigurationprofiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new osxconfigurationprofiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for osxconfigurationprofiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOsxConfigurationProfileByID(params *CreateOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOsxConfigurationProfileByIDCreated, error)

	DeleteOsxConfigurationProfileByID(params *DeleteOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOsxConfigurationProfileByIDOK, error)

	DeleteOsxConfigurationProfileByName(params *DeleteOsxConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOsxConfigurationProfileByNameOK, error)

	FindOsxConfigurationProfiles(params *FindOsxConfigurationProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesOK, error)

	FindOsxConfigurationProfilesByID(params *FindOsxConfigurationProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByIDOK, error)

	FindOsxConfigurationProfilesByIDSubset(params *FindOsxConfigurationProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByIDSubsetOK, error)

	FindOsxConfigurationProfilesByName(params *FindOsxConfigurationProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByNameOK, error)

	FindOsxConfigurationProfilesByNameSubset(params *FindOsxConfigurationProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByNameSubsetOK, error)

	UpdateOsxConfigurationProfileByID(params *UpdateOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOsxConfigurationProfileByIDCreated, error)

	UpdateOsxConfigurationProfileByName(params *UpdateOsxConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOsxConfigurationProfileByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOsxConfigurationProfileByID creates a new o s x configuration profile by ID
*/
func (a *Client) CreateOsxConfigurationProfileByID(params *CreateOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOsxConfigurationProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOsxConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOsxConfigurationProfileById",
		Method:             "POST",
		PathPattern:        "/osxconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOsxConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOsxConfigurationProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOsxConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOsxConfigurationProfileByID deletes a o s x configuration profile by ID
*/
func (a *Client) DeleteOsxConfigurationProfileByID(params *DeleteOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOsxConfigurationProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOsxConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOsxConfigurationProfileById",
		Method:             "DELETE",
		PathPattern:        "/osxconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOsxConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOsxConfigurationProfileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOsxConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOsxConfigurationProfileByName deletes a o s x configuration profile by name
*/
func (a *Client) DeleteOsxConfigurationProfileByName(params *DeleteOsxConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOsxConfigurationProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOsxConfigurationProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOsxConfigurationProfileByName",
		Method:             "DELETE",
		PathPattern:        "/osxconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOsxConfigurationProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOsxConfigurationProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOsxConfigurationProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindOsxConfigurationProfiles finds all o s x configuration profiles
*/
func (a *Client) FindOsxConfigurationProfiles(params *FindOsxConfigurationProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOsxConfigurationProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findOsxConfigurationProfiles",
		Method:             "GET",
		PathPattern:        "/osxconfigurationprofiles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOsxConfigurationProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOsxConfigurationProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOsxConfigurationProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindOsxConfigurationProfilesByID finds o s x configuration profiles by ID
*/
func (a *Client) FindOsxConfigurationProfilesByID(params *FindOsxConfigurationProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOsxConfigurationProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findOsxConfigurationProfilesById",
		Method:             "GET",
		PathPattern:        "/osxconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOsxConfigurationProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOsxConfigurationProfilesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOsxConfigurationProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindOsxConfigurationProfilesByIDSubset finds a subset of data for an o s x configuration profile

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindOsxConfigurationProfilesByIDSubset(params *FindOsxConfigurationProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOsxConfigurationProfilesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findOsxConfigurationProfilesByIdSubset",
		Method:             "GET",
		PathPattern:        "/osxconfigurationprofiles/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOsxConfigurationProfilesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOsxConfigurationProfilesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOsxConfigurationProfilesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindOsxConfigurationProfilesByName finds o s x configuration profiles by name
*/
func (a *Client) FindOsxConfigurationProfilesByName(params *FindOsxConfigurationProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOsxConfigurationProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findOsxConfigurationProfilesByName",
		Method:             "GET",
		PathPattern:        "/osxconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOsxConfigurationProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOsxConfigurationProfilesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOsxConfigurationProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindOsxConfigurationProfilesByNameSubset finds a subset of data for o s x configuration profiles by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindOsxConfigurationProfilesByNameSubset(params *FindOsxConfigurationProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindOsxConfigurationProfilesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindOsxConfigurationProfilesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findOsxConfigurationProfilesByNameSubset",
		Method:             "GET",
		PathPattern:        "/osxconfigurationprofiles/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindOsxConfigurationProfilesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindOsxConfigurationProfilesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findOsxConfigurationProfilesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOsxConfigurationProfileByID updates an existing o s x configuration profile by ID
*/
func (a *Client) UpdateOsxConfigurationProfileByID(params *UpdateOsxConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOsxConfigurationProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOsxConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOsxConfigurationProfileById",
		Method:             "PUT",
		PathPattern:        "/osxconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOsxConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOsxConfigurationProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOsxConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOsxConfigurationProfileByName updates an existing o s x configuration profile by name
*/
func (a *Client) UpdateOsxConfigurationProfileByName(params *UpdateOsxConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOsxConfigurationProfileByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOsxConfigurationProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOsxConfigurationProfileByName",
		Method:             "PUT",
		PathPattern:        "/osxconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOsxConfigurationProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOsxConfigurationProfileByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOsxConfigurationProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
