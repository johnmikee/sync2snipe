// Code generated by go-swagger; DO NOT EDIT.

package computerhistory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computerhistory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computerhistory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindComputerHistoryByID(params *FindComputerHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByIDOK, error)

	FindComputerHistoryByIDSubset(params *FindComputerHistoryByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByIDSubsetOK, error)

	FindComputerHistoryByMacAddress(params *FindComputerHistoryByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByMacAddressOK, error)

	FindComputerHistoryByMacAddressSubset(params *FindComputerHistoryByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByMacAddressSubsetOK, error)

	FindComputerHistoryByName(params *FindComputerHistoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByNameOK, error)

	FindComputerHistoryByNameSubset(params *FindComputerHistoryByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByNameSubsetOK, error)

	FindComputerHistoryBySerialNumber(params *FindComputerHistoryBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryBySerialNumberOK, error)

	FindComputerHistoryBySerialNumberSubset(params *FindComputerHistoryBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryBySerialNumberSubsetOK, error)

	FindComputerHistoryByUDID(params *FindComputerHistoryByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByUDIDOK, error)

	FindComputerHistoryByUDIDSubset(params *FindComputerHistoryByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByUDIDSubsetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindComputerHistoryByID finds computer history by ID
*/
func (a *Client) FindComputerHistoryByID(params *FindComputerHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryById",
		Method:             "GET",
		PathPattern:        "/computerhistory/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByIDSubset finds a subset of computer history data by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Commands)
*/
func (a *Client) FindComputerHistoryByIDSubset(params *FindComputerHistoryByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByIdSubset",
		Method:             "GET",
		PathPattern:        "/computerhistory/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByMacAddress finds computer history by m a c address
*/
func (a *Client) FindComputerHistoryByMacAddress(params *FindComputerHistoryByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByMacAddress",
		Method:             "GET",
		PathPattern:        "/computerhistory/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByMacAddressSubset finds a subset of computer history data by m a c address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Commands)
*/
func (a *Client) FindComputerHistoryByMacAddressSubset(params *FindComputerHistoryByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/computerhistory/macaddress/{macaddress}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByName finds computer history by name
*/
func (a *Client) FindComputerHistoryByName(params *FindComputerHistoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByName",
		Method:             "GET",
		PathPattern:        "/computerhistory/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByNameSubset finds a subset of computer history data by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Commands)
*/
func (a *Client) FindComputerHistoryByNameSubset(params *FindComputerHistoryByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByNameSubset",
		Method:             "GET",
		PathPattern:        "/computerhistory/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryBySerialNumber finds computer history by serial number
*/
func (a *Client) FindComputerHistoryBySerialNumber(params *FindComputerHistoryBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryBySerialNumber",
		Method:             "GET",
		PathPattern:        "/computerhistory/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryBySerialNumberSubset finds a subset of computer history data by serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Commands)
*/
func (a *Client) FindComputerHistoryBySerialNumberSubset(params *FindComputerHistoryBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryBySerialNumberSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryBySerialNumberSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryBySerialNumberSubset",
		Method:             "GET",
		PathPattern:        "/computerhistory/serialnumber/{serialnumber}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryBySerialNumberSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryBySerialNumberSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryBySerialNumberSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByUDID finds computer history by u d ID
*/
func (a *Client) FindComputerHistoryByUDID(params *FindComputerHistoryByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByUDID",
		Method:             "GET",
		PathPattern:        "/computerhistory/udid/{udid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHistoryByUDIDSubset finds a subset of computer history data by u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Commands)
*/
func (a *Client) FindComputerHistoryByUDIDSubset(params *FindComputerHistoryByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHistoryByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHistoryByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHistoryByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/computerhistory/udid/{udid}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHistoryByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHistoryByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHistoryByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
