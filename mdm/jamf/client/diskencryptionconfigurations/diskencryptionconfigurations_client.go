// Code generated by go-swagger; DO NOT EDIT.

package diskencryptionconfigurations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new diskencryptionconfigurations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for diskencryptionconfigurations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDiskEncryptionConfigurationByID(params *CreateDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDiskEncryptionConfigurationByIDCreated, error)

	DeleteDiskEncryptionConfigurationByID(params *DeleteDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiskEncryptionConfigurationByIDOK, error)

	DeleteDiskEncryptionConfigurationByName(params *DeleteDiskEncryptionConfigurationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiskEncryptionConfigurationByNameOK, error)

	FindDiskEncryptionConfigurations(params *FindDiskEncryptionConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsOK, error)

	FindDiskEncryptionConfigurationsByID(params *FindDiskEncryptionConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsByIDOK, error)

	FindDiskEncryptionConfigurationsByName(params *FindDiskEncryptionConfigurationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsByNameOK, error)

	UpdateDiskEncryptionConfigurationByID(params *UpdateDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskEncryptionConfigurationByIDCreated, error)

	UpdateDiskEncryptionConfigurationByName(params *UpdateDiskEncryptionConfigurationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskEncryptionConfigurationByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDiskEncryptionConfigurationByID creates a new disk encryption configuration by ID
*/
func (a *Client) CreateDiskEncryptionConfigurationByID(params *CreateDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDiskEncryptionConfigurationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDiskEncryptionConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDiskEncryptionConfigurationById",
		Method:             "POST",
		PathPattern:        "/diskencryptionconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDiskEncryptionConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDiskEncryptionConfigurationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDiskEncryptionConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDiskEncryptionConfigurationByID deletes a disk encryption configuration by ID
*/
func (a *Client) DeleteDiskEncryptionConfigurationByID(params *DeleteDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiskEncryptionConfigurationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiskEncryptionConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDiskEncryptionConfigurationById",
		Method:             "DELETE",
		PathPattern:        "/diskencryptionconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDiskEncryptionConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDiskEncryptionConfigurationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDiskEncryptionConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDiskEncryptionConfigurationByName deletes a disk encryption configuration by name
*/
func (a *Client) DeleteDiskEncryptionConfigurationByName(params *DeleteDiskEncryptionConfigurationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiskEncryptionConfigurationByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiskEncryptionConfigurationByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDiskEncryptionConfigurationByName",
		Method:             "DELETE",
		PathPattern:        "/diskencryptionconfigurations/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDiskEncryptionConfigurationByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDiskEncryptionConfigurationByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDiskEncryptionConfigurationByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDiskEncryptionConfigurations finds all disk encryption configurations
*/
func (a *Client) FindDiskEncryptionConfigurations(params *FindDiskEncryptionConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDiskEncryptionConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDiskEncryptionConfigurations",
		Method:             "GET",
		PathPattern:        "/diskencryptionconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDiskEncryptionConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDiskEncryptionConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDiskEncryptionConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDiskEncryptionConfigurationsByID finds disk encryption configurations by ID
*/
func (a *Client) FindDiskEncryptionConfigurationsByID(params *FindDiskEncryptionConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDiskEncryptionConfigurationsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDiskEncryptionConfigurationsById",
		Method:             "GET",
		PathPattern:        "/diskencryptionconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDiskEncryptionConfigurationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDiskEncryptionConfigurationsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDiskEncryptionConfigurationsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindDiskEncryptionConfigurationsByName finds disk encryption configurations by name
*/
func (a *Client) FindDiskEncryptionConfigurationsByName(params *FindDiskEncryptionConfigurationsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindDiskEncryptionConfigurationsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindDiskEncryptionConfigurationsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findDiskEncryptionConfigurationsByName",
		Method:             "GET",
		PathPattern:        "/diskencryptionconfigurations/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindDiskEncryptionConfigurationsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindDiskEncryptionConfigurationsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findDiskEncryptionConfigurationsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDiskEncryptionConfigurationByID updates an existing disk encryption configuration by ID
*/
func (a *Client) UpdateDiskEncryptionConfigurationByID(params *UpdateDiskEncryptionConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskEncryptionConfigurationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDiskEncryptionConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDiskEncryptionConfigurationById",
		Method:             "PUT",
		PathPattern:        "/diskencryptionconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDiskEncryptionConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDiskEncryptionConfigurationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDiskEncryptionConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDiskEncryptionConfigurationByName updates an existing disk encryption configuration by name
*/
func (a *Client) UpdateDiskEncryptionConfigurationByName(params *UpdateDiskEncryptionConfigurationByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDiskEncryptionConfigurationByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDiskEncryptionConfigurationByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDiskEncryptionConfigurationByName",
		Method:             "PUT",
		PathPattern:        "/diskencryptionconfigurations/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDiskEncryptionConfigurationByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDiskEncryptionConfigurationByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDiskEncryptionConfigurationByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
