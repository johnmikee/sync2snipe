// Code generated by go-swagger; DO NOT EDIT.

package allowedfileextensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new allowedfileextensions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for allowedfileextensions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAllowedFileExtensionByID(params *CreateAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllowedFileExtensionByIDCreated, error)

	DeleteAllowedFileExtensionByID(params *DeleteAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllowedFileExtensionByIDOK, error)

	FindAllowedFileExtension(params *FindAllowedFileExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionOK, error)

	FindAllowedFileExtensionByID(params *FindAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionByIDOK, error)

	FindAllowedFileExtensionByName(params *FindAllowedFileExtensionByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAllowedFileExtensionByID creates a new allowed file extension value by ID
*/
func (a *Client) CreateAllowedFileExtensionByID(params *CreateAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllowedFileExtensionByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAllowedFileExtensionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAllowedFileExtensionById",
		Method:             "POST",
		PathPattern:        "/allowedfileextensions/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAllowedFileExtensionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAllowedFileExtensionByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAllowedFileExtensionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAllowedFileExtensionByID deletes an allowed file extension value by ID
*/
func (a *Client) DeleteAllowedFileExtensionByID(params *DeleteAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllowedFileExtensionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllowedFileExtensionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllowedFileExtensionById",
		Method:             "DELETE",
		PathPattern:        "/allowedfileextensions/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllowedFileExtensionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllowedFileExtensionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllowedFileExtensionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAllowedFileExtension finds the allowed file extensions
*/
func (a *Client) FindAllowedFileExtension(params *FindAllowedFileExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAllowedFileExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAllowedFileExtension",
		Method:             "GET",
		PathPattern:        "/allowedfileextensions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAllowedFileExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAllowedFileExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAllowedFileExtension: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAllowedFileExtensionByID finds an allowed file extension value by ID
*/
func (a *Client) FindAllowedFileExtensionByID(params *FindAllowedFileExtensionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAllowedFileExtensionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAllowedFileExtensionById",
		Method:             "GET",
		PathPattern:        "/allowedfileextensions/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAllowedFileExtensionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAllowedFileExtensionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAllowedFileExtensionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAllowedFileExtensionByName finds an allowed file extension value by name
*/
func (a *Client) FindAllowedFileExtensionByName(params *FindAllowedFileExtensionByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAllowedFileExtensionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAllowedFileExtensionByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAllowedFileExtensionByName",
		Method:             "GET",
		PathPattern:        "/allowedfileextensions/extension/{extension}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAllowedFileExtensionByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAllowedFileExtensionByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAllowedFileExtensionByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
