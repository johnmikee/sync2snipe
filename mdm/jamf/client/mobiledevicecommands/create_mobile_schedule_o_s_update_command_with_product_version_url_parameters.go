// Code generated by go-swagger; DO NOT EDIT.

package mobiledevicecommands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParams creates a new CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParams() *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	return &CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithTimeout creates a new CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams object
// with the ability to set a timeout on a request.
func NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithTimeout(timeout time.Duration) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	return &CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams{
		timeout: timeout,
	}
}

// NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithContext creates a new CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams object
// with the ability to set a context for a request.
func NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithContext(ctx context.Context) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	return &CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams{
		Context: ctx,
	}
}

// NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithHTTPClient creates a new CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateMobileScheduleOSUpdateCommandWithProductVersionURLParamsWithHTTPClient(client *http.Client) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	return &CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams{
		HTTPClient: client,
	}
}

/*
CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams contains all the parameters to send to the API endpoint

	for the create mobile schedule o s update command with product version URL operation.

	Typically these are written to a http.Request.
*/
type CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams struct {

	/* IDList.

	   Mobile device ID values, multiple IDs may be separated by commas (e.g. /id/13,14,15)
	*/
	IDList string

	/* InstallAction.

	   Specify the behavior of the install. Possible integer values are: 1 (Download the update for users to install), 2 (Download and install the update, and restart devices after installation)
	*/
	InstallAction int64

	/* ProductVersion.

	   Specify the OS version of the update. Updating to a specific iOS version requires devices with iOS 11.3 or later. Updating to a specific tvOS version requires devices with tvOS 12.2 or later. install_action required by the ScheduleOSUpdate command if product_version is specified.
	*/
	ProductVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create mobile schedule o s update command with product version URL params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithDefaults() *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create mobile schedule o s update command with product version URL params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithTimeout(timeout time.Duration) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithContext(ctx context.Context) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithHTTPClient(client *http.Client) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDList adds the iDList to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithIDList(iDList string) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetIDList(iDList)
	return o
}

// SetIDList adds the idList to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetIDList(iDList string) {
	o.IDList = iDList
}

// WithInstallAction adds the installAction to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithInstallAction(installAction int64) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetInstallAction(installAction)
	return o
}

// SetInstallAction adds the installAction to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetInstallAction(installAction int64) {
	o.InstallAction = installAction
}

// WithProductVersion adds the productVersion to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WithProductVersion(productVersion string) *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams {
	o.SetProductVersion(productVersion)
	return o
}

// SetProductVersion adds the productVersion to the create mobile schedule o s update command with product version URL params
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) SetProductVersion(productVersion string) {
	o.ProductVersion = productVersion
}

// WriteToRequest writes these params to a swagger request
func (o *CreateMobileScheduleOSUpdateCommandWithProductVersionURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id_list
	if err := r.SetPathParam("id_list", o.IDList); err != nil {
		return err
	}

	// path param install_action
	if err := r.SetPathParam("install_action", swag.FormatInt64(o.InstallAction)); err != nil {
		return err
	}

	// path param product_version
	if err := r.SetPathParam("product_version", o.ProductVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
