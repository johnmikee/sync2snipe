// Code generated by go-swagger; DO NOT EDIT.

package jsonwebtokenconfigurations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new jsonwebtokenconfigurations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jsonwebtokenconfigurations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateJSONWebTokenConfigurationByID(params *CreateJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateJSONWebTokenConfigurationByIDCreated, error)

	DeleteJSONWebTokenConfigurationByID(params *DeleteJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJSONWebTokenConfigurationByIDOK, error)

	FindJSONWebTokenConfigurationByID(params *FindJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJSONWebTokenConfigurationByIDOK, error)

	FindJSONWebTokenConfigurations(params *FindJSONWebTokenConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJSONWebTokenConfigurationsOK, error)

	UpdateJSONWebTokenConfigurationByID(params *UpdateJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateJSONWebTokenConfigurationByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateJSONWebTokenConfigurationByID creates a new JSON web token configuration by ID
*/
func (a *Client) CreateJSONWebTokenConfigurationByID(params *CreateJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateJSONWebTokenConfigurationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJSONWebTokenConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createJsonWebTokenConfigurationById",
		Method:             "POST",
		PathPattern:        "/jsonwebtokenconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateJSONWebTokenConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJSONWebTokenConfigurationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createJsonWebTokenConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteJSONWebTokenConfigurationByID deletes a JSON web token configuration by ID
*/
func (a *Client) DeleteJSONWebTokenConfigurationByID(params *DeleteJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJSONWebTokenConfigurationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJSONWebTokenConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteJsonWebTokenConfigurationById",
		Method:             "DELETE",
		PathPattern:        "/jsonwebtokenconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteJSONWebTokenConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJSONWebTokenConfigurationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteJsonWebTokenConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindJSONWebTokenConfigurationByID finds JSON web token configuration by ID
*/
func (a *Client) FindJSONWebTokenConfigurationByID(params *FindJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJSONWebTokenConfigurationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindJSONWebTokenConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findJsonWebTokenConfigurationById",
		Method:             "GET",
		PathPattern:        "/jsonwebtokenconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindJSONWebTokenConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindJSONWebTokenConfigurationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findJsonWebTokenConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindJSONWebTokenConfigurations finds all JSON web token configurations
*/
func (a *Client) FindJSONWebTokenConfigurations(params *FindJSONWebTokenConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindJSONWebTokenConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindJSONWebTokenConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findJsonWebTokenConfigurations",
		Method:             "GET",
		PathPattern:        "/jsonwebtokenconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindJSONWebTokenConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindJSONWebTokenConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findJsonWebTokenConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateJSONWebTokenConfigurationByID updates an existing JSON web token configuration by ID
*/
func (a *Client) UpdateJSONWebTokenConfigurationByID(params *UpdateJSONWebTokenConfigurationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateJSONWebTokenConfigurationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJSONWebTokenConfigurationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateJsonWebTokenConfigurationById",
		Method:             "PUT",
		PathPattern:        "/jsonwebtokenconfigurations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateJSONWebTokenConfigurationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateJSONWebTokenConfigurationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateJsonWebTokenConfigurationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
