// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new packages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePackageByID(params *CreatePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePackageByIDCreated, error)

	DeletePackageByID(params *DeletePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageByIDOK, error)

	DeletePackageByName(params *DeletePackageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageByNameOK, error)

	FindPackages(params *FindPackagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesOK, error)

	FindPackagesByID(params *FindPackagesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesByIDOK, error)

	FindPackagesByName(params *FindPackagesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesByNameOK, error)

	UpdatePackageByID(params *UpdatePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePackageByIDCreated, error)

	UpdatePackageByName(params *UpdatePackageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePackageByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePackageByID creates a new package by ID
*/
func (a *Client) CreatePackageByID(params *CreatePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePackageByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePackageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPackageById",
		Method:             "POST",
		PathPattern:        "/packages/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePackageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePackageByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPackageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePackageByID deletes a package by ID
*/
func (a *Client) DeletePackageByID(params *DeletePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePackageById",
		Method:             "DELETE",
		PathPattern:        "/packages/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePackageByName deletes a package by name
*/
func (a *Client) DeletePackageByName(params *DeletePackageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePackageByName",
		Method:             "DELETE",
		PathPattern:        "/packages/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPackages finds all packages
*/
func (a *Client) FindPackages(params *FindPackagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPackagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPackages",
		Method:             "GET",
		PathPattern:        "/packages",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPackagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPackagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPackages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPackagesByID finds packages by ID
*/
func (a *Client) FindPackagesByID(params *FindPackagesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPackagesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPackagesById",
		Method:             "GET",
		PathPattern:        "/packages/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPackagesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPackagesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPackagesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPackagesByName finds packages by name
*/
func (a *Client) FindPackagesByName(params *FindPackagesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPackagesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPackagesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPackagesByName",
		Method:             "GET",
		PathPattern:        "/packages/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPackagesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPackagesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPackagesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePackageByID updates an existing package by ID
*/
func (a *Client) UpdatePackageByID(params *UpdatePackageByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePackageByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackageByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePackageById",
		Method:             "PUT",
		PathPattern:        "/packages/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePackageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePackageByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePackageById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePackageByName updates an existing package by name
*/
func (a *Client) UpdatePackageByName(params *UpdatePackageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePackageByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePackageByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePackageByName",
		Method:             "PUT",
		PathPattern:        "/packages/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePackageByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePackageByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePackageByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
