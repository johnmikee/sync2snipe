// Code generated by go-swagger; DO NOT EDIT.

package vppinvitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vppinvitations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vppinvitations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateInvitationByID(params *CreateInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvitationByIDCreated, error)

	DeleteInvitationByID(params *DeleteInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvitationByIDOK, error)

	FindInvitationByID(params *FindInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindInvitationByIDOK, error)

	FindInvitationsByIDSubset(params *FindInvitationsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindInvitationsByIDSubsetOK, error)

	FindVPPAdminInvitation(params *FindVPPAdminInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminInvitationOK, error)

	UpdateInvitationByID(params *UpdateInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInvitationByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateInvitationByID creates a new v p p invitation by ID

The following fields are also required if 'Send Emails' distribution method is specified - sender_name, sender_email_address, subject
*/
func (a *Client) CreateInvitationByID(params *CreateInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvitationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInvitationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInvitationById",
		Method:             "POST",
		PathPattern:        "/vppinvitations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInvitationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInvitationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInvitationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteInvitationByID deletes a v p p invitation by ID
*/
func (a *Client) DeleteInvitationByID(params *DeleteInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvitationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInvitationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInvitationById",
		Method:             "DELETE",
		PathPattern:        "/vppinvitations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInvitationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInvitationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInvitationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindInvitationByID finds a v p p invitation by ID
*/
func (a *Client) FindInvitationByID(params *FindInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindInvitationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindInvitationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findInvitationById",
		Method:             "GET",
		PathPattern:        "/vppinvitations/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindInvitationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindInvitationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findInvitationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindInvitationsByIDSubset finds a subset of data for a v p p invitation

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindInvitationsByIDSubset(params *FindInvitationsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindInvitationsByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindInvitationsByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findInvitationsByIdSubset",
		Method:             "GET",
		PathPattern:        "/vppinvitations/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindInvitationsByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindInvitationsByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findInvitationsByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindVPPAdminInvitation finds all v p p invitations
*/
func (a *Client) FindVPPAdminInvitation(params *FindVPPAdminInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVPPAdminInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVPPAdminInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVPPAdminInvitation",
		Method:             "GET",
		PathPattern:        "/vppinvitations",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVPPAdminInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVPPAdminInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVPPAdminInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateInvitationByID updates a v p p invitation by ID

Usages are ignored for this operation
*/
func (a *Client) UpdateInvitationByID(params *UpdateInvitationByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInvitationByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInvitationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateInvitationById",
		Method:             "PUT",
		PathPattern:        "/vppinvitations/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInvitationByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInvitationByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInvitationById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
