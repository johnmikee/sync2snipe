// Code generated by go-swagger; DO NOT EDIT.

package networksegments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networksegments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networksegments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkSegmentByID(params *CreateNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSegmentByIDCreated, error)

	DeleteNetworkSegmentByID(params *DeleteNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSegmentByIDOK, error)

	DeleteNetworkSegmentByName(params *DeleteNetworkSegmentByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSegmentByNameOK, error)

	FindNetworkSegments(params *FindNetworkSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsOK, error)

	FindNetworkSegmentsByID(params *FindNetworkSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsByIDOK, error)

	FindNetworkSegmentsByName(params *FindNetworkSegmentsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsByNameOK, error)

	UpdateNetworkSegmentByID(params *UpdateNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSegmentByIDCreated, error)

	UpdateNetworkSegmentByName(params *UpdateNetworkSegmentByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSegmentByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNetworkSegmentByID creates a new network segment by ID
*/
func (a *Client) CreateNetworkSegmentByID(params *CreateNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSegmentByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSegmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkSegmentById",
		Method:             "POST",
		PathPattern:        "/networksegments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSegmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSegmentByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSegmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNetworkSegmentByID deletes a network segment by ID
*/
func (a *Client) DeleteNetworkSegmentByID(params *DeleteNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSegmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSegmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkSegmentById",
		Method:             "DELETE",
		PathPattern:        "/networksegments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSegmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSegmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSegmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNetworkSegmentByName deletes a network segment by name
*/
func (a *Client) DeleteNetworkSegmentByName(params *DeleteNetworkSegmentByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSegmentByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSegmentByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkSegmentByName",
		Method:             "DELETE",
		PathPattern:        "/networksegments/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSegmentByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSegmentByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSegmentByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindNetworkSegments finds all network segments
*/
func (a *Client) FindNetworkSegments(params *FindNetworkSegmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindNetworkSegmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findNetworkSegments",
		Method:             "GET",
		PathPattern:        "/networksegments",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindNetworkSegmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindNetworkSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findNetworkSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindNetworkSegmentsByID finds network segments by ID
*/
func (a *Client) FindNetworkSegmentsByID(params *FindNetworkSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindNetworkSegmentsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findNetworkSegmentsById",
		Method:             "GET",
		PathPattern:        "/networksegments/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindNetworkSegmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindNetworkSegmentsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findNetworkSegmentsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindNetworkSegmentsByName finds network segments by name
*/
func (a *Client) FindNetworkSegmentsByName(params *FindNetworkSegmentsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindNetworkSegmentsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindNetworkSegmentsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findNetworkSegmentsByName",
		Method:             "GET",
		PathPattern:        "/networksegments/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindNetworkSegmentsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindNetworkSegmentsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findNetworkSegmentsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNetworkSegmentByID updates an existing network segment by ID
*/
func (a *Client) UpdateNetworkSegmentByID(params *UpdateNetworkSegmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSegmentByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSegmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSegmentById",
		Method:             "PUT",
		PathPattern:        "/networksegments/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSegmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSegmentByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSegmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNetworkSegmentByName updates an existing network segment by name
*/
func (a *Client) UpdateNetworkSegmentByName(params *UpdateNetworkSegmentByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSegmentByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSegmentByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSegmentByName",
		Method:             "PUT",
		PathPattern:        "/networksegments/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSegmentByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSegmentByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSegmentByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
