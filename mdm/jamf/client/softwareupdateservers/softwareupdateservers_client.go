// Code generated by go-swagger; DO NOT EDIT.

package softwareupdateservers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new softwareupdateservers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for softwareupdateservers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSoftwareUpdateServerByID(params *CreateSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSoftwareUpdateServerByIDCreated, error)

	DeleteSoftwareUpdateServerByID(params *DeleteSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareUpdateServerByIDOK, error)

	DeleteSoftwareUpdateServerByName(params *DeleteSoftwareUpdateServerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareUpdateServerByNameOK, error)

	FindSoftwareUpdateServers(params *FindSoftwareUpdateServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersOK, error)

	FindSoftwareUpdateServersByID(params *FindSoftwareUpdateServersByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersByIDOK, error)

	FindSoftwareUpdateServersByName(params *FindSoftwareUpdateServersByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersByNameOK, error)

	UpdateSoftwareUpdateServerByID(params *UpdateSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareUpdateServerByIDCreated, error)

	UpdateSoftwareUpdateServerByName(params *UpdateSoftwareUpdateServerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareUpdateServerByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSoftwareUpdateServerByID creates a new software update server by ID
*/
func (a *Client) CreateSoftwareUpdateServerByID(params *CreateSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSoftwareUpdateServerByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSoftwareUpdateServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSoftwareUpdateServerById",
		Method:             "POST",
		PathPattern:        "/softwareupdateservers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSoftwareUpdateServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSoftwareUpdateServerByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSoftwareUpdateServerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftwareUpdateServerByID deletes a software update server by ID
*/
func (a *Client) DeleteSoftwareUpdateServerByID(params *DeleteSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareUpdateServerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareUpdateServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftwareUpdateServerById",
		Method:             "DELETE",
		PathPattern:        "/softwareupdateservers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareUpdateServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareUpdateServerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftwareUpdateServerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftwareUpdateServerByName deletes a software update server by name
*/
func (a *Client) DeleteSoftwareUpdateServerByName(params *DeleteSoftwareUpdateServerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareUpdateServerByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareUpdateServerByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftwareUpdateServerByName",
		Method:             "DELETE",
		PathPattern:        "/softwareupdateservers/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareUpdateServerByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareUpdateServerByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftwareUpdateServerByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindSoftwareUpdateServers finds all software update servers
*/
func (a *Client) FindSoftwareUpdateServers(params *FindSoftwareUpdateServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSoftwareUpdateServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findSoftwareUpdateServers",
		Method:             "GET",
		PathPattern:        "/softwareupdateservers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindSoftwareUpdateServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSoftwareUpdateServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findSoftwareUpdateServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindSoftwareUpdateServersByID finds software update servers by ID
*/
func (a *Client) FindSoftwareUpdateServersByID(params *FindSoftwareUpdateServersByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSoftwareUpdateServersByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findSoftwareUpdateServersById",
		Method:             "GET",
		PathPattern:        "/softwareupdateservers/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindSoftwareUpdateServersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSoftwareUpdateServersByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findSoftwareUpdateServersById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindSoftwareUpdateServersByName finds software update servers by name
*/
func (a *Client) FindSoftwareUpdateServersByName(params *FindSoftwareUpdateServersByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindSoftwareUpdateServersByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSoftwareUpdateServersByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findSoftwareUpdateServersByName",
		Method:             "GET",
		PathPattern:        "/softwareupdateservers/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindSoftwareUpdateServersByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindSoftwareUpdateServersByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findSoftwareUpdateServersByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSoftwareUpdateServerByID updates an existing software update server by ID
*/
func (a *Client) UpdateSoftwareUpdateServerByID(params *UpdateSoftwareUpdateServerByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareUpdateServerByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwareUpdateServerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSoftwareUpdateServerById",
		Method:             "PUT",
		PathPattern:        "/softwareupdateservers/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwareUpdateServerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSoftwareUpdateServerByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSoftwareUpdateServerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSoftwareUpdateServerByName updates an existing software update server by name
*/
func (a *Client) UpdateSoftwareUpdateServerByName(params *UpdateSoftwareUpdateServerByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareUpdateServerByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwareUpdateServerByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSoftwareUpdateServerByName",
		Method:             "PUT",
		PathPattern:        "/softwareupdateservers/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwareUpdateServerByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSoftwareUpdateServerByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSoftwareUpdateServerByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
