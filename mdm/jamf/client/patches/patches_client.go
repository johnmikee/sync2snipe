// Code generated by go-swagger; DO NOT EDIT.

package patches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new patches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePatchSoftwareTitlesByID(params *CreatePatchSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchSoftwareTitlesByIDCreated, error)

	DeleteSoftwareTitlesByID(params *DeleteSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareTitlesByIDOK, error)

	DeleteSoftwareTitlesByName(params *DeleteSoftwareTitlesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareTitlesByNameOK, error)

	FindComputersByIDAndTitleVersion(params *FindComputersByIDAndTitleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDAndTitleVersionOK, error)

	FindComputersByNameAndTitleVersion(params *FindComputersByNameAndTitleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameAndTitleVersionOK, error)

	FindPatches(params *FindPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesOK, error)

	FindPatchesByID(params *FindPatchesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesByIDOK, error)

	FindPatchesByName(params *FindPatchesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesByNameOK, error)

	UpdateSoftwareTitlesByID(params *UpdateSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareTitlesByIDCreated, error)

	UpdateSoftwareTitlesByName(params *UpdateSoftwareTitlesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareTitlesByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePatchSoftwareTitlesByID creates a patch software title deprecated please transition use to jamf pro API endpoint v2 patch software title configurations

The patch title must exist within a specific site or Full Jamf Pro. Use this endpoint to create additional instances of the patch software title for specific sites. The name_id element can be obtained from the /patches and/or /patches/id/{id} resources.
*/
func (a *Client) CreatePatchSoftwareTitlesByID(params *CreatePatchSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchSoftwareTitlesByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePatchSoftwareTitlesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPatchSoftwareTitlesById",
		Method:             "POST",
		PathPattern:        "/patches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePatchSoftwareTitlesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePatchSoftwareTitlesByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPatchSoftwareTitlesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftwareTitlesByID deletes a patch software title by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) DeleteSoftwareTitlesByID(params *DeleteSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareTitlesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareTitlesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftwareTitlesById",
		Method:             "DELETE",
		PathPattern:        "/patches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareTitlesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareTitlesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftwareTitlesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSoftwareTitlesByName deletes a patch software title by name deprecated please transition use to jamf pro API endpoint v2 patch software title configurations
*/
func (a *Client) DeleteSoftwareTitlesByName(params *DeleteSoftwareTitlesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSoftwareTitlesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareTitlesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSoftwareTitlesByName",
		Method:             "DELETE",
		PathPattern:        "/patches/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareTitlesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareTitlesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftwareTitlesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByIDAndTitleVersion displays computers on a specific version deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id definitions

Displays information specified with the {version} parameter for a patch specified with the {id} parameter. A version number of 'Latest' and 'Unknown' will also work.
*/
func (a *Client) FindComputersByIDAndTitleVersion(params *FindComputersByIDAndTitleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByIDAndTitleVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByIDAndTitleVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByIDAndTitleVersion",
		Method:             "GET",
		PathPattern:        "/patches/id/{id}/version/{version}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByIDAndTitleVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByIDAndTitleVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByIDAndTitleVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputersByNameAndTitleVersion displays computers on a specific version deprecated please transition use to jamf pro API endpoint v2 patch software title configurations

Displays information specified with the {version} parameter for a patch specified with the {name} parameter. A version number of 'Latest' and 'Unknown' will also work.
*/
func (a *Client) FindComputersByNameAndTitleVersion(params *FindComputersByNameAndTitleVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputersByNameAndTitleVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputersByNameAndTitleVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputersByNameAndTitleVersion",
		Method:             "GET",
		PathPattern:        "/patches/name/{name}/version/{version}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputersByNameAndTitleVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputersByNameAndTitleVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputersByNameAndTitleVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatches finds all patches deprecated please transition use to jamf pro API endpoint v2 patch software title configurations
*/
func (a *Client) FindPatches(params *FindPatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatches",
		Method:             "GET",
		PathPattern:        "/patches",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchesByID finds patches by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) FindPatchesByID(params *FindPatchesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchesById",
		Method:             "GET",
		PathPattern:        "/patches/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchesByName finds the first patch with the name provided deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) FindPatchesByName(params *FindPatchesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchesByName",
		Method:             "GET",
		PathPattern:        "/patches/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSoftwareTitlesByID updates a patch software title by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id

Using an empty <package/> tag will disassociate any previous packages associated with a specific software title version.
*/
func (a *Client) UpdateSoftwareTitlesByID(params *UpdateSoftwareTitlesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareTitlesByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwareTitlesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSoftwareTitlesById",
		Method:             "PUT",
		PathPattern:        "/patches/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwareTitlesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSoftwareTitlesByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSoftwareTitlesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSoftwareTitlesByName updates a patch software title by name deprecated please transition use to jamf pro API endpoint v2 patch software title configurations

Using an empty <package/> tag will disassociate any previous packages associated with a specific software title version.
*/
func (a *Client) UpdateSoftwareTitlesByName(params *UpdateSoftwareTitlesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSoftwareTitlesByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSoftwareTitlesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSoftwareTitlesByName",
		Method:             "PUT",
		PathPattern:        "/patches/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSoftwareTitlesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSoftwareTitlesByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSoftwareTitlesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
