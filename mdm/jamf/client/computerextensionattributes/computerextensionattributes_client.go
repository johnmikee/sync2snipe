// Code generated by go-swagger; DO NOT EDIT.

package computerextensionattributes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computerextensionattributes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computerextensionattributes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateComputerextensionattributeByID(params *CreateComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerextensionattributeByIDCreated, error)

	DeleteComputerextensionattributeByID(params *DeleteComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerextensionattributeByIDOK, error)

	DeleteComputerextensionattributeByName(params *DeleteComputerextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerextensionattributeByNameOK, error)

	FindComputerextensionattributes(params *FindComputerextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesOK, error)

	FindComputerextensionattributesByID(params *FindComputerextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesByIDOK, error)

	FindComputerextensionattributesByName(params *FindComputerextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesByNameOK, error)

	UpdateComputerextensionattributeByID(params *UpdateComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerextensionattributeByIDCreated, error)

	UpdateComputerextensionattributeByName(params *UpdateComputerextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerextensionattributeByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateComputerextensionattributeByID creates a new computer extension attribute by ID
*/
func (a *Client) CreateComputerextensionattributeByID(params *CreateComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerextensionattributeById",
		Method:             "POST",
		PathPattern:        "/computerextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerextensionattributeByID deletes a computer extension attribute by ID
*/
func (a *Client) DeleteComputerextensionattributeByID(params *DeleteComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerextensionattributeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerextensionattributeById",
		Method:             "DELETE",
		PathPattern:        "/computerextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerextensionattributeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteComputerextensionattributeByName deletes a computer extension attribute by name
*/
func (a *Client) DeleteComputerextensionattributeByName(params *DeleteComputerextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteComputerextensionattributeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComputerextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteComputerextensionattributeByName",
		Method:             "DELETE",
		PathPattern:        "/computerextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteComputerextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteComputerextensionattributeByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteComputerextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerextensionattributes finds all computer extension attributes
*/
func (a *Client) FindComputerextensionattributes(params *FindComputerextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerextensionattributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerextensionattributes",
		Method:             "GET",
		PathPattern:        "/computerextensionattributes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerextensionattributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerextensionattributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerextensionattributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerextensionattributesByID finds computer extension attributes by ID
*/
func (a *Client) FindComputerextensionattributesByID(params *FindComputerextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerextensionattributesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerextensionattributesById",
		Method:             "GET",
		PathPattern:        "/computerextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerextensionattributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerextensionattributesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerextensionattributesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerextensionattributesByName finds computer extension attributes by name
*/
func (a *Client) FindComputerextensionattributesByName(params *FindComputerextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerextensionattributesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerextensionattributesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerextensionattributesByName",
		Method:             "GET",
		PathPattern:        "/computerextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerextensionattributesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerextensionattributesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerextensionattributesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerextensionattributeByID updates an existing computer extension attribute by ID
*/
func (a *Client) UpdateComputerextensionattributeByID(params *UpdateComputerextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerextensionattributeById",
		Method:             "PUT",
		PathPattern:        "/computerextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateComputerextensionattributeByName updates an existing computer extension attribute by name
*/
func (a *Client) UpdateComputerextensionattributeByName(params *UpdateComputerextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateComputerextensionattributeByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComputerextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateComputerextensionattributeByName",
		Method:             "PUT",
		PathPattern:        "/computerextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateComputerextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateComputerextensionattributeByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateComputerextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
