// Code generated by go-swagger; DO NOT EDIT.

package categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new categories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for categories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCategoryByID(params *CreateCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCategoryByIDCreated, error)

	DeleteCategoryByID(params *DeleteCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryByIDOK, error)

	DeleteCategoryByName(params *DeleteCategoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryByNameOK, error)

	FindCategories(params *FindCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesOK, error)

	FindCategoriesByID(params *FindCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesByIDOK, error)

	FindCategoriesByName(params *FindCategoriesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesByNameOK, error)

	UpdateCategoryByID(params *UpdateCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryByIDOK, error)

	UpdateCategoryByName(params *UpdateCategoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCategoryByID creates a new category by ID
*/
func (a *Client) CreateCategoryByID(params *CreateCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCategoryByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCategoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCategoryById",
		Method:             "POST",
		PathPattern:        "/categories/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCategoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCategoryByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCategoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCategoryByID deletes a category by ID
*/
func (a *Client) DeleteCategoryByID(params *DeleteCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCategoryById",
		Method:             "DELETE",
		PathPattern:        "/categories/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCategoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCategoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCategoryByName deletes a category by name
*/
func (a *Client) DeleteCategoryByName(params *DeleteCategoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCategoryByName",
		Method:             "DELETE",
		PathPattern:        "/categories/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCategoryByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCategoryByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindCategories finds all categories
*/
func (a *Client) FindCategories(params *FindCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findCategories",
		Method:             "GET",
		PathPattern:        "/categories",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindCategoriesByID finds categories by ID
*/
func (a *Client) FindCategoriesByID(params *FindCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindCategoriesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findCategoriesById",
		Method:             "GET",
		PathPattern:        "/categories/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindCategoriesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindCategoriesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findCategoriesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindCategoriesByName finds categories by name
*/
func (a *Client) FindCategoriesByName(params *FindCategoriesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindCategoriesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindCategoriesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findCategoriesByName",
		Method:             "GET",
		PathPattern:        "/categories/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindCategoriesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindCategoriesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findCategoriesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCategoryByID updates an existing category by ID
*/
func (a *Client) UpdateCategoryByID(params *UpdateCategoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCategoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCategoryById",
		Method:             "PUT",
		PathPattern:        "/categories/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCategoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCategoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCategoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCategoryByName updates an existing category by name
*/
func (a *Client) UpdateCategoryByName(params *UpdateCategoryByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCategoryByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCategoryByName",
		Method:             "PUT",
		PathPattern:        "/categories/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCategoryByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCategoryByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCategoryByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
