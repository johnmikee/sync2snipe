// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWebhookByID(params *CreateWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWebhookByIDCreated, error)

	DeleteWebhookByID(params *DeleteWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookByIDOK, error)

	DeleteWebhookByName(params *DeleteWebhookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookByNameOK, error)

	FindWebhooks(params *FindWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksOK, error)

	FindWebhooksByID(params *FindWebhooksByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksByIDOK, error)

	FindWebhooksByName(params *FindWebhooksByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksByNameOK, error)

	UpdateWebhookByID(params *UpdateWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookByIDCreated, error)

	UpdateWebhookByName(params *UpdateWebhookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateWebhookByID creates a new webhook by ID

The `display_fields` are only applicable to the `SmartGroupMobileDeviceMembershipChange` event. Accepted values (capitlization sensitive) are the same as those available from the GUI when making and Advanced Search.
*/
func (a *Client) CreateWebhookByID(params *CreateWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWebhookByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWebhookById",
		Method:             "POST",
		PathPattern:        "/webhooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWebhookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWebhookByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWebhookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWebhookByID deletes a webhook by ID
*/
func (a *Client) DeleteWebhookByID(params *DeleteWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWebhookById",
		Method:             "DELETE",
		PathPattern:        "/webhooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWebhookByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWebhookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWebhookByName deletes a webhook by name
*/
func (a *Client) DeleteWebhookByName(params *DeleteWebhookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWebhookByName",
		Method:             "DELETE",
		PathPattern:        "/webhooks/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhookByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWebhookByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWebhookByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindWebhooks finds all webhooks
*/
func (a *Client) FindWebhooks(params *FindWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findWebhooks",
		Method:             "GET",
		PathPattern:        "/webhooks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindWebhooksByID finds webhooks by ID
*/
func (a *Client) FindWebhooksByID(params *FindWebhooksByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindWebhooksByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findWebhooksById",
		Method:             "GET",
		PathPattern:        "/webhooks/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindWebhooksByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindWebhooksByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findWebhooksById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindWebhooksByName finds webhooks by name
*/
func (a *Client) FindWebhooksByName(params *FindWebhooksByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindWebhooksByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindWebhooksByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findWebhooksByName",
		Method:             "GET",
		PathPattern:        "/webhooks/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindWebhooksByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindWebhooksByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findWebhooksByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWebhookByID updates an existing webhook by ID

The `display_fields` are only applicable to the `SmartGroupMobileDeviceMembershipChange` event. Accepted values (capitlization sensitive) are the same as those available from the GUI when making and Advanced Search. `display_field_additions` can be used in place of the `display_fields` element to append new fields to an existing webhook.
*/
func (a *Client) UpdateWebhookByID(params *UpdateWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebhookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWebhookById",
		Method:             "PUT",
		PathPattern:        "/webhooks/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebhookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebhookByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWebhookById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWebhookByName updates an existing webhook by name
*/
func (a *Client) UpdateWebhookByName(params *UpdateWebhookByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebhookByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWebhookByName",
		Method:             "PUT",
		PathPattern:        "/webhooks/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebhookByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebhookByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWebhookByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
