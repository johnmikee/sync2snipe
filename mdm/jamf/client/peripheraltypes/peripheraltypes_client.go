// Code generated by go-swagger; DO NOT EDIT.

package peripheraltypes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new peripheraltypes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peripheraltypes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePeripheralTypeByID(params *CreatePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePeripheralTypeByIDCreated, error)

	DeletePeripheralTypeByID(params *DeletePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePeripheralTypeByIDOK, error)

	FindPeripheralTypes(params *FindPeripheralTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPeripheralTypesOK, error)

	FindPeripheralTypesByID(params *FindPeripheralTypesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPeripheralTypesByIDOK, error)

	UpdatePeripheralTypeByID(params *UpdatePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePeripheralTypeByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePeripheralTypeByID creates a new peripheral by ID
*/
func (a *Client) CreatePeripheralTypeByID(params *CreatePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePeripheralTypeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePeripheralTypeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPeripheralTypeById",
		Method:             "POST",
		PathPattern:        "/peripheraltypes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePeripheralTypeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePeripheralTypeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPeripheralTypeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePeripheralTypeByID deletes a peripheral by ID
*/
func (a *Client) DeletePeripheralTypeByID(params *DeletePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePeripheralTypeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePeripheralTypeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePeripheralTypeById",
		Method:             "DELETE",
		PathPattern:        "/peripheraltypes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePeripheralTypeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePeripheralTypeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePeripheralTypeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPeripheralTypes finds all peripheral types
*/
func (a *Client) FindPeripheralTypes(params *FindPeripheralTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPeripheralTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPeripheralTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPeripheralTypes",
		Method:             "GET",
		PathPattern:        "/peripheraltypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPeripheralTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPeripheralTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPeripheralTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPeripheralTypesByID finds peripheral types by ID
*/
func (a *Client) FindPeripheralTypesByID(params *FindPeripheralTypesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPeripheralTypesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPeripheralTypesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPeripheralTypesById",
		Method:             "GET",
		PathPattern:        "/peripheraltypes/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPeripheralTypesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPeripheralTypesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPeripheralTypesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePeripheralTypeByID updates an existing peripheral by ID
*/
func (a *Client) UpdatePeripheralTypeByID(params *UpdatePeripheralTypeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePeripheralTypeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePeripheralTypeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePeripheralTypeById",
		Method:             "PUT",
		PathPattern:        "/peripheraltypes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePeripheralTypeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePeripheralTypeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePeripheralTypeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
