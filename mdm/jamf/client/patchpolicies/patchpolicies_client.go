// Code generated by go-swagger; DO NOT EDIT.

package patchpolicies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new patchpolicies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patchpolicies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePatchPolicyBySoftwareTitleConfigID(params *CreatePatchPolicyBySoftwareTitleConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchPolicyBySoftwareTitleConfigIDCreated, error)

	DeletePatchPolicyByID(params *DeletePatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePatchPolicyByIDOK, error)

	FindPatchPolicies(params *FindPatchPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesOK, error)

	FindPatchPoliciesByIDSubset(params *FindPatchPoliciesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesByIDSubsetOK, error)

	FindPatchPoliciesBySoftwareTitleConfigID(params *FindPatchPoliciesBySoftwareTitleConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesBySoftwareTitleConfigIDOK, error)

	FindPatchPolicyByID(params *FindPatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPolicyByIDOK, error)

	UpdatePatchPolicyByID(params *UpdatePatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchPolicyByIDCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePatchPolicyBySoftwareTitleConfigID creates a new patch policy associated with a patch software title configuration ID

softwaretitleconfig refers to the ID of the patch software title the policy is to be associated to
*/
func (a *Client) CreatePatchPolicyBySoftwareTitleConfigID(params *CreatePatchPolicyBySoftwareTitleConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchPolicyBySoftwareTitleConfigIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePatchPolicyBySoftwareTitleConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPatchPolicyBySoftwareTitleConfigId",
		Method:             "POST",
		PathPattern:        "/patchpolicies/softwaretitleconfig/id/{softwaretitleconfigid}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePatchPolicyBySoftwareTitleConfigIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePatchPolicyBySoftwareTitleConfigIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPatchPolicyBySoftwareTitleConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePatchPolicyByID deletes a patch policy by ID
*/
func (a *Client) DeletePatchPolicyByID(params *DeletePatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePatchPolicyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePatchPolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePatchPolicyById",
		Method:             "DELETE",
		PathPattern:        "/patchpolicies/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePatchPolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePatchPolicyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePatchPolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchPolicies finds all patch policies deprecated please transition use to jamf pro API endpoint v2 patch policies
*/
func (a *Client) FindPatchPolicies(params *FindPatchPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchPolicies",
		Method:             "GET",
		PathPattern:        "/patchpolicies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchPoliciesByIDSubset displays subsets of information for a patch policy
*/
func (a *Client) FindPatchPoliciesByIDSubset(params *FindPatchPoliciesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchPoliciesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchPoliciesByIdSubset",
		Method:             "GET",
		PathPattern:        "/patchpolicies/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchPoliciesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchPoliciesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchPoliciesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchPoliciesBySoftwareTitleConfigID finds all patch policies by patch software title configuration ID deprecated please transition use to jamf pro API endpoint v2 patch policies

softwaretitleconfigid refers to the ID of the patch software title the policy is associated to
*/
func (a *Client) FindPatchPoliciesBySoftwareTitleConfigID(params *FindPatchPoliciesBySoftwareTitleConfigIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPoliciesBySoftwareTitleConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchPoliciesBySoftwareTitleConfigIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchPoliciesBySoftwareTitleConfigId",
		Method:             "GET",
		PathPattern:        "/patchpolicies/softwaretitleconfig/id/{softwaretitleconfigid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchPoliciesBySoftwareTitleConfigIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchPoliciesBySoftwareTitleConfigIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchPoliciesBySoftwareTitleConfigId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchPolicyByID finds a patch policy by ID
*/
func (a *Client) FindPatchPolicyByID(params *FindPatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchPolicyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchPolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchPolicyById",
		Method:             "GET",
		PathPattern:        "/patchpolicies/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchPolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchPolicyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchPolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePatchPolicyByID updates an existing patch policy by ID
*/
func (a *Client) UpdatePatchPolicyByID(params *UpdatePatchPolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchPolicyByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePatchPolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePatchPolicyById",
		Method:             "PUT",
		PathPattern:        "/patchpolicies/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePatchPolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePatchPolicyByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePatchPolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
