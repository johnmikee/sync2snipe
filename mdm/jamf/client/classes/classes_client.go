// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new classes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for classes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClassByID(params *CreateClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClassByIDCreated, error)

	DeleteClassByID(params *DeleteClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassByIDOK, error)

	DeleteClassByName(params *DeleteClassByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassByNameOK, error)

	FindClasses(params *FindClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesOK, error)

	FindClassesByID(params *FindClassesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesByIDOK, error)

	FindClassesByName(params *FindClassesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesByNameOK, error)

	UpdateClassByID(params *UpdateClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClassByIDOK, error)

	UpdateClassByName(params *UpdateClassByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClassByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateClassByID creates a new class by ID

The mobile device list is not used by this operation, the mobile device group is used instead.
*/
func (a *Client) CreateClassByID(params *CreateClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClassByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClassByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClassById",
		Method:             "POST",
		PathPattern:        "/classes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClassByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClassByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClassById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClassByID deletes a class by ID
*/
func (a *Client) DeleteClassByID(params *DeleteClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClassById",
		Method:             "DELETE",
		PathPattern:        "/classes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClassByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClassById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClassByName deletes a class by name
*/
func (a *Client) DeleteClassByName(params *DeleteClassByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClassByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClassByName",
		Method:             "DELETE",
		PathPattern:        "/classes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClassByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClassByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindClasses finds all classes
*/
func (a *Client) FindClasses(params *FindClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findClasses",
		Method:             "GET",
		PathPattern:        "/classes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindClassesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findClasses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindClassesByID finds classes by ID
*/
func (a *Client) FindClassesByID(params *FindClassesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindClassesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findClassesById",
		Method:             "GET",
		PathPattern:        "/classes/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindClassesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindClassesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findClassesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindClassesByName finds classes by name
*/
func (a *Client) FindClassesByName(params *FindClassesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindClassesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindClassesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findClassesByName",
		Method:             "GET",
		PathPattern:        "/classes/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindClassesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindClassesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findClassesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClassByID updates an existing class by ID

The mobile device list is not used by this operation, the mobile device group is used instead.
*/
func (a *Client) UpdateClassByID(params *UpdateClassByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClassByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClassByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClassById",
		Method:             "PUT",
		PathPattern:        "/classes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClassByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClassByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClassById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClassByName updates an existing class by name

The mobile device list is not used by this operation, the mobile device group is used instead.
*/
func (a *Client) UpdateClassByName(params *UpdateClassByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClassByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClassByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClassByName",
		Method:             "PUT",
		PathPattern:        "/classes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClassByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClassByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClassByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
