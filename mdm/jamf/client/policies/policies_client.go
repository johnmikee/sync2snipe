// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePolicyByID(params *CreatePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyByIDCreated, error)

	DeletePolicyByID(params *DeletePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyByIDOK, error)

	DeletePolicyByName(params *DeletePolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyByNameOK, error)

	FindPolicies(params *FindPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesOK, error)

	FindPoliciesByCategory(params *FindPoliciesByCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByCategoryOK, error)

	FindPoliciesByID(params *FindPoliciesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByIDOK, error)

	FindPoliciesByIDSubset(params *FindPoliciesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByIDSubsetOK, error)

	FindPoliciesByName(params *FindPoliciesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByNameOK, error)

	FindPoliciesByNameSubset(params *FindPoliciesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByNameSubsetOK, error)

	FindPoliciesByType(params *FindPoliciesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByTypeOK, error)

	UpdatePolicyByID(params *UpdatePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyByIDCreated, error)

	UpdatePolicyByName(params *UpdatePolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePolicyByID creates a new policy by ID
*/
func (a *Client) CreatePolicyByID(params *CreatePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicyById",
		Method:             "POST",
		PathPattern:        "/policies/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicyByID deletes a policy by ID
*/
func (a *Client) DeletePolicyByID(params *DeletePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyById",
		Method:             "DELETE",
		PathPattern:        "/policies/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicyByName deletes a policy by name
*/
func (a *Client) DeletePolicyByName(params *DeletePolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyByName",
		Method:             "DELETE",
		PathPattern:        "/policies/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPolicies finds all policies
*/
func (a *Client) FindPolicies(params *FindPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPolicies",
		Method:             "GET",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByCategory finds all policies by category

Category may be specified by id or name, or 'None' for policies with no category.
*/
func (a *Client) FindPoliciesByCategory(params *FindPoliciesByCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesByCategory",
		Method:             "GET",
		PathPattern:        "/policies/category/{category}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesByCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByID finds policies by ID
*/
func (a *Client) FindPoliciesByID(params *FindPoliciesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesById",
		Method:             "GET",
		PathPattern:        "/policies/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByIDSubset finds a subset of data for a policy

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindPoliciesByIDSubset(params *FindPoliciesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesByIdSubset",
		Method:             "GET",
		PathPattern:        "/policies/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByName finds policies by name
*/
func (a *Client) FindPoliciesByName(params *FindPoliciesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesByName",
		Method:             "GET",
		PathPattern:        "/policies/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByNameSubset finds a subset of data for policies by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindPoliciesByNameSubset(params *FindPoliciesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesByNameSubset",
		Method:             "GET",
		PathPattern:        "/policies/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPoliciesByType finds all policies by type

The value 'casper' refers to Casper Remote. The value 'jss' refers to policies created in the GUI or via the API.
*/
func (a *Client) FindPoliciesByType(params *FindPoliciesByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPoliciesByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPoliciesByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPoliciesByType",
		Method:             "GET",
		PathPattern:        "/policies/createdBy/{createdBy}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPoliciesByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPoliciesByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPoliciesByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyByID updates an existing policy by ID
*/
func (a *Client) UpdatePolicyByID(params *UpdatePolicyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyById",
		Method:             "PUT",
		PathPattern:        "/policies/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePolicyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyByName updates an existing policy by name
*/
func (a *Client) UpdatePolicyByName(params *UpdatePolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePolicyByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyByName",
		Method:             "PUT",
		PathPattern:        "/policies/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePolicyByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
