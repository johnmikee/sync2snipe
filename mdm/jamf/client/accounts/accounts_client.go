// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccountByID(params *CreateAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccountByIDCreated, error)

	CreateGroupByID(params *CreateGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGroupByIDCreated, error)

	DeleteAccountByID(params *DeleteAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountByIDOK, error)

	DeleteAccountByName(params *DeleteAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountByNameOK, error)

	DeleteGroupByID(params *DeleteGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGroupByIDOK, error)

	DeleteGroupByName(params *DeleteGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGroupByNameOK, error)

	FindAccounts(params *FindAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsOK, error)

	FindAccountsByID(params *FindAccountsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsByIDOK, error)

	FindAccountsByName(params *FindAccountsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsByNameOK, error)

	FindGroupsByID(params *FindGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindGroupsByIDOK, error)

	FindGroupsByName(params *FindGroupsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindGroupsByNameOK, error)

	UpdateAccountByID(params *UpdateAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAccountByIDCreated, error)

	UpdateAccountByName(params *UpdateAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAccountByNameCreated, error)

	UpdateGroupByID(params *UpdateGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupByIDCreated, error)

	UpdateGroupByName(params *UpdateGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAccountByID creates a new account by ID
*/
func (a *Client) CreateAccountByID(params *CreateAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccountByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAccountById",
		Method:             "POST",
		PathPattern:        "/accounts/userid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGroupByID creates a new group by ID

Groups created via this endpoint are created only within Jamf Pro and will not affect the LDAP server.
*/
func (a *Client) CreateGroupByID(params *CreateGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGroupByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGroupById",
		Method:             "POST",
		PathPattern:        "/accounts/groupid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGroupById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccountByID deletes an account by ID
*/
func (a *Client) DeleteAccountByID(params *DeleteAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccountById",
		Method:             "DELETE",
		PathPattern:        "/accounts/userid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccountByName deletes an account by name
*/
func (a *Client) DeleteAccountByName(params *DeleteAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccountByName",
		Method:             "DELETE",
		PathPattern:        "/accounts/username/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccountByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGroupByID deletes a group by ID
*/
func (a *Client) DeleteGroupByID(params *DeleteGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGroupById",
		Method:             "DELETE",
		PathPattern:        "/accounts/groupid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroupById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGroupByName deletes a group by name
*/
func (a *Client) DeleteGroupByName(params *DeleteGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGroupByName",
		Method:             "DELETE",
		PathPattern:        "/accounts/groupname/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroupByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAccounts finds all accounts
*/
func (a *Client) FindAccounts(params *FindAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAccounts",
		Method:             "GET",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAccountsByID finds accounts by ID
*/
func (a *Client) FindAccountsByID(params *FindAccountsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAccountsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAccountsById",
		Method:             "GET",
		PathPattern:        "/accounts/userid/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAccountsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAccountsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAccountsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindAccountsByName finds accounts by name
*/
func (a *Client) FindAccountsByName(params *FindAccountsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindAccountsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindAccountsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findAccountsByName",
		Method:             "GET",
		PathPattern:        "/accounts/username/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindAccountsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindAccountsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findAccountsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindGroupsByID finds groups by ID
*/
func (a *Client) FindGroupsByID(params *FindGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindGroupsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindGroupsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findGroupsById",
		Method:             "GET",
		PathPattern:        "/accounts/groupid/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindGroupsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findGroupsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindGroupsByName finds groups by name
*/
func (a *Client) FindGroupsByName(params *FindGroupsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindGroupsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindGroupsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findGroupsByName",
		Method:             "GET",
		PathPattern:        "/accounts/groupname/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindGroupsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindGroupsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findGroupsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccountByID updates an existing account by ID
*/
func (a *Client) UpdateAccountByID(params *UpdateAccountByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAccountByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccountById",
		Method:             "PUT",
		PathPattern:        "/accounts/userid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAccountById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccountByName updates an existing account by name
*/
func (a *Client) UpdateAccountByName(params *UpdateAccountByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAccountByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccountByName",
		Method:             "PUT",
		PathPattern:        "/accounts/username/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccountByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAccountByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGroupByID updates an existing group by ID

Groups updated via this endpoint are updated only within Jamf Pro and will not affect the LDAP server.
*/
func (a *Client) UpdateGroupByID(params *UpdateGroupByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGroupById",
		Method:             "PUT",
		PathPattern:        "/accounts/groupid/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGroupById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGroupByName updates an existing group by name

Groups updated via this endpoint are updated only within Jamf Pro and will not affect the LDAP server.
*/
func (a *Client) UpdateGroupByName(params *UpdateGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGroupByName",
		Method:             "PUT",
		PathPattern:        "/accounts/groupname/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGroupByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
