// Code generated by go-swagger; DO NOT EDIT.

package ibeacons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateIBeaconByNameParams creates a new UpdateIBeaconByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateIBeaconByNameParams() *UpdateIBeaconByNameParams {
	return &UpdateIBeaconByNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIBeaconByNameParamsWithTimeout creates a new UpdateIBeaconByNameParams object
// with the ability to set a timeout on a request.
func NewUpdateIBeaconByNameParamsWithTimeout(timeout time.Duration) *UpdateIBeaconByNameParams {
	return &UpdateIBeaconByNameParams{
		timeout: timeout,
	}
}

// NewUpdateIBeaconByNameParamsWithContext creates a new UpdateIBeaconByNameParams object
// with the ability to set a context for a request.
func NewUpdateIBeaconByNameParamsWithContext(ctx context.Context) *UpdateIBeaconByNameParams {
	return &UpdateIBeaconByNameParams{
		Context: ctx,
	}
}

// NewUpdateIBeaconByNameParamsWithHTTPClient creates a new UpdateIBeaconByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateIBeaconByNameParamsWithHTTPClient(client *http.Client) *UpdateIBeaconByNameParams {
	return &UpdateIBeaconByNameParams{
		HTTPClient: client,
	}
}

/*
UpdateIBeaconByNameParams contains all the parameters to send to the API endpoint

	for the update i beacon by name operation.

	Typically these are written to a http.Request.
*/
type UpdateIBeaconByNameParams struct {

	/* Name.

	   Name to filter by
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update i beacon by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIBeaconByNameParams) WithDefaults() *UpdateIBeaconByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update i beacon by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateIBeaconByNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) WithTimeout(timeout time.Duration) *UpdateIBeaconByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) WithContext(ctx context.Context) *UpdateIBeaconByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) WithHTTPClient(client *http.Client) *UpdateIBeaconByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) WithName(name string) *UpdateIBeaconByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update i beacon by name params
func (o *UpdateIBeaconByNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIBeaconByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
