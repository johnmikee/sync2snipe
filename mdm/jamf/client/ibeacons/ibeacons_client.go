// Code generated by go-swagger; DO NOT EDIT.

package ibeacons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ibeacons API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ibeacons API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIBeaconByID(params *CreateIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIBeaconByIDCreated, error)

	DeleteIBeaconByID(params *DeleteIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIBeaconByIDOK, error)

	DeleteIBeaconByName(params *DeleteIBeaconByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIBeaconByNameOK, error)

	FindIBeacons(params *FindIBeaconsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsOK, error)

	FindIBeaconsByID(params *FindIBeaconsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsByIDOK, error)

	FindIBeaconsByName(params *FindIBeaconsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsByNameOK, error)

	UpdateIBeaconByID(params *UpdateIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIBeaconByIDCreated, error)

	UpdateIBeaconByName(params *UpdateIBeaconByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIBeaconByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateIBeaconByID creates a new i beacon region by ID
*/
func (a *Client) CreateIBeaconByID(params *CreateIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIBeaconByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIBeaconByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIBeaconById",
		Method:             "POST",
		PathPattern:        "/ibeacons/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIBeaconByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIBeaconByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIBeaconById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIBeaconByID deletes an i beacon region by ID
*/
func (a *Client) DeleteIBeaconByID(params *DeleteIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIBeaconByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIBeaconByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIBeaconById",
		Method:             "DELETE",
		PathPattern:        "/ibeacons/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIBeaconByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIBeaconByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIBeaconById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIBeaconByName deletes an i beacon region by name
*/
func (a *Client) DeleteIBeaconByName(params *DeleteIBeaconByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIBeaconByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIBeaconByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIBeaconByName",
		Method:             "DELETE",
		PathPattern:        "/ibeacons/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIBeaconByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIBeaconByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIBeaconByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindIBeacons finds all i beacon regions
*/
func (a *Client) FindIBeacons(params *FindIBeaconsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIBeaconsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIBeacons",
		Method:             "GET",
		PathPattern:        "/ibeacons",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindIBeaconsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIBeaconsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findIBeacons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindIBeaconsByID finds i beacon regions by ID
*/
func (a *Client) FindIBeaconsByID(params *FindIBeaconsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIBeaconsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIBeaconsById",
		Method:             "GET",
		PathPattern:        "/ibeacons/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindIBeaconsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIBeaconsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findIBeaconsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindIBeaconsByName finds i beacon regions by name
*/
func (a *Client) FindIBeaconsByName(params *FindIBeaconsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindIBeaconsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindIBeaconsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findIBeaconsByName",
		Method:             "GET",
		PathPattern:        "/ibeacons/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindIBeaconsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindIBeaconsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findIBeaconsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIBeaconByID updates an existing i beacon region by ID
*/
func (a *Client) UpdateIBeaconByID(params *UpdateIBeaconByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIBeaconByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIBeaconByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIBeaconById",
		Method:             "PUT",
		PathPattern:        "/ibeacons/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIBeaconByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIBeaconByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIBeaconById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIBeaconByName updates an existing i beacon region by name
*/
func (a *Client) UpdateIBeaconByName(params *UpdateIBeaconByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIBeaconByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIBeaconByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIBeaconByName",
		Method:             "PUT",
		PathPattern:        "/ibeacons/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIBeaconByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIBeaconByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIBeaconByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
