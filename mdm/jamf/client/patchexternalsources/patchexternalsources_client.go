// Code generated by go-swagger; DO NOT EDIT.

package patchexternalsources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new patchexternalsources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patchexternalsources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePatchExternalSourcesByID(params *CreatePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchExternalSourcesByIDOK, error)

	CreatePatchExternalSourcesByName(params *CreatePatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchExternalSourcesByNameOK, error)

	DeletePatchExternalSourcesByID(params *DeletePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePatchExternalSourcesByIDOK, error)

	FindPatchExternalSources(params *FindPatchExternalSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesOK, error)

	FindPatchExternalSourcesByID(params *FindPatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesByIDOK, error)

	FindPatchExternalSourcesByName(params *FindPatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesByNameOK, error)

	UpdatePatchExternalSourcesByID(params *UpdatePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchExternalSourcesByIDOK, error)

	UpdatePatchExternalSourcesByName(params *UpdatePatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchExternalSourcesByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePatchExternalSourcesByID creates a new patch external source by ID
*/
func (a *Client) CreatePatchExternalSourcesByID(params *CreatePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchExternalSourcesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePatchExternalSourcesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPatchExternalSourcesById",
		Method:             "POST",
		PathPattern:        "/patchexternalsources/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePatchExternalSourcesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePatchExternalSourcesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPatchExternalSourcesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePatchExternalSourcesByName creates a new patch external source by name
*/
func (a *Client) CreatePatchExternalSourcesByName(params *CreatePatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePatchExternalSourcesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePatchExternalSourcesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPatchExternalSourcesByName",
		Method:             "POST",
		PathPattern:        "/patchexternalsources/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePatchExternalSourcesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePatchExternalSourcesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPatchExternalSourcesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePatchExternalSourcesByID deletes a patch external source by ID
*/
func (a *Client) DeletePatchExternalSourcesByID(params *DeletePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePatchExternalSourcesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePatchExternalSourcesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePatchExternalSourcesById",
		Method:             "DELETE",
		PathPattern:        "/patchexternalsources/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePatchExternalSourcesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePatchExternalSourcesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePatchExternalSourcesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchExternalSources finds all patch external sources
*/
func (a *Client) FindPatchExternalSources(params *FindPatchExternalSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchExternalSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchExternalSources",
		Method:             "GET",
		PathPattern:        "/patchexternalsources",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchExternalSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchExternalSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchExternalSources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchExternalSourcesByID finds a patch external source by ID
*/
func (a *Client) FindPatchExternalSourcesByID(params *FindPatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchExternalSourcesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchExternalSourcesById",
		Method:             "GET",
		PathPattern:        "/patchexternalsources/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchExternalSourcesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchExternalSourcesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchExternalSourcesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPatchExternalSourcesByName finds the first patch external source with the name provided
*/
func (a *Client) FindPatchExternalSourcesByName(params *FindPatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindPatchExternalSourcesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPatchExternalSourcesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPatchExternalSourcesByName",
		Method:             "GET",
		PathPattern:        "/patchexternalsources/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindPatchExternalSourcesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPatchExternalSourcesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPatchExternalSourcesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePatchExternalSourcesByID updates a patch external source by ID
*/
func (a *Client) UpdatePatchExternalSourcesByID(params *UpdatePatchExternalSourcesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchExternalSourcesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePatchExternalSourcesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePatchExternalSourcesById",
		Method:             "PUT",
		PathPattern:        "/patchexternalsources/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePatchExternalSourcesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePatchExternalSourcesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePatchExternalSourcesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePatchExternalSourcesByName updates a patch external source by name
*/
func (a *Client) UpdatePatchExternalSourcesByName(params *UpdatePatchExternalSourcesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePatchExternalSourcesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePatchExternalSourcesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePatchExternalSourcesByName",
		Method:             "PUT",
		PathPattern:        "/patchexternalsources/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePatchExternalSourcesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePatchExternalSourcesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePatchExternalSourcesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
