// Code generated by go-swagger; DO NOT EDIT.

package patchsoftwaretitles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new patchsoftwaretitles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patchsoftwaretitles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PatchsoftwaretitlesGet(params *PatchsoftwaretitlesGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesGetOK, error)

	PatchsoftwaretitlesIDByIDDelete(params *PatchsoftwaretitlesIDByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDDeleteOK, error)

	PatchsoftwaretitlesIDByIDGet(params *PatchsoftwaretitlesIDByIDGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDGetOK, error)

	PatchsoftwaretitlesIDByIDPost(params *PatchsoftwaretitlesIDByIDPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDPostCreated, error)

	PatchsoftwaretitlesIDByIDPut(params *PatchsoftwaretitlesIDByIDPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDPutCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PatchsoftwaretitlesGet finds all patch software titles deprecated please transition use to jamf pro API endpoint v2 patch software title configurations
*/
func (a *Client) PatchsoftwaretitlesGet(params *PatchsoftwaretitlesGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchsoftwaretitlesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchsoftwaretitlesGet",
		Method:             "GET",
		PathPattern:        "/patchsoftwaretitles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchsoftwaretitlesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchsoftwaretitlesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchsoftwaretitlesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchsoftwaretitlesIDByIDDelete deletes a patch software title by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) PatchsoftwaretitlesIDByIDDelete(params *PatchsoftwaretitlesIDByIDDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchsoftwaretitlesIDByIDDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchsoftwaretitlesIdByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/patchsoftwaretitles/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchsoftwaretitlesIDByIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchsoftwaretitlesIDByIDDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchsoftwaretitlesIdByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchsoftwaretitlesIDByIDGet finds a patch software titles by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) PatchsoftwaretitlesIDByIDGet(params *PatchsoftwaretitlesIDByIDGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchsoftwaretitlesIDByIDGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchsoftwaretitlesIdByIdGet",
		Method:             "GET",
		PathPattern:        "/patchsoftwaretitles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchsoftwaretitlesIDByIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchsoftwaretitlesIDByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchsoftwaretitlesIdByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchsoftwaretitlesIDByIDPost creates new patch software title by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id
*/
func (a *Client) PatchsoftwaretitlesIDByIDPost(params *PatchsoftwaretitlesIDByIDPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchsoftwaretitlesIDByIDPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchsoftwaretitlesIdByIdPost",
		Method:             "POST",
		PathPattern:        "/patchsoftwaretitles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchsoftwaretitlesIDByIDPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchsoftwaretitlesIDByIDPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchsoftwaretitlesIdByIdPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchsoftwaretitlesIDByIDPut updates a patch software title by ID deprecated please transition use to jamf pro API endpoint v2 patch software title configurations id

Including an empty package element <package/> within the version element will disassociate any previously associated packages with that version of the software title.
*/
func (a *Client) PatchsoftwaretitlesIDByIDPut(params *PatchsoftwaretitlesIDByIDPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchsoftwaretitlesIDByIDPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchsoftwaretitlesIDByIDPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchsoftwaretitlesIdByIdPut",
		Method:             "PUT",
		PathPattern:        "/patchsoftwaretitles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchsoftwaretitlesIDByIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchsoftwaretitlesIDByIDPutCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchsoftwaretitlesIdByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
