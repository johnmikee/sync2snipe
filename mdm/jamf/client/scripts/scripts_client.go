// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scripts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scripts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScriptByID(params *CreateScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScriptByIDCreated, error)

	DeleteScriptByID(params *DeleteScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptByIDOK, error)

	DeleteScriptByName(params *DeleteScriptByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptByNameOK, error)

	FindScripts(params *FindScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsOK, error)

	FindScriptsByID(params *FindScriptsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsByIDOK, error)

	FindScriptsByName(params *FindScriptsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsByNameOK, error)

	UpdateScriptByID(params *UpdateScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptByIDCreated, error)

	UpdateScriptByName(params *UpdateScriptByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateScriptByID creates a new script by ID

Only one of script_contents_encoded and script_contents should be submitted.
*/
func (a *Client) CreateScriptByID(params *CreateScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScriptByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScriptByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createScriptById",
		Method:             "POST",
		PathPattern:        "/scripts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScriptByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScriptByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScriptById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScriptByID deletes a script by ID
*/
func (a *Client) DeleteScriptByID(params *DeleteScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScriptByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScriptById",
		Method:             "DELETE",
		PathPattern:        "/scripts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScriptByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScriptByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScriptById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScriptByName deletes a script by name
*/
func (a *Client) DeleteScriptByName(params *DeleteScriptByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScriptByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScriptByName",
		Method:             "DELETE",
		PathPattern:        "/scripts/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScriptByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScriptByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScriptByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindScripts finds all scripts
*/
func (a *Client) FindScripts(params *FindScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindScriptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findScripts",
		Method:             "GET",
		PathPattern:        "/scripts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findScripts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindScriptsByID finds scripts by ID

script_contents_encoded is the equivalent of script_contents, but it has been Base 64 encoded.
*/
func (a *Client) FindScriptsByID(params *FindScriptsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindScriptsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findScriptsById",
		Method:             "GET",
		PathPattern:        "/scripts/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindScriptsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindScriptsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findScriptsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindScriptsByName finds scripts by name

script_contents_encoded is the equivalent of script_contents, but it has been Base 64 encoded.
*/
func (a *Client) FindScriptsByName(params *FindScriptsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindScriptsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindScriptsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findScriptsByName",
		Method:             "GET",
		PathPattern:        "/scripts/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindScriptsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindScriptsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findScriptsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScriptByID updates an existing script by ID

Only one of script_contents_encoded and script_contents should be submitted.
*/
func (a *Client) UpdateScriptByID(params *UpdateScriptByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScriptByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScriptById",
		Method:             "PUT",
		PathPattern:        "/scripts/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScriptByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScriptByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScriptById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScriptByName updates an existing script by name

Only one of script_contents_encoded and script_contents should be submitted.
*/
func (a *Client) UpdateScriptByName(params *UpdateScriptByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScriptByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScriptByName",
		Method:             "PUT",
		PathPattern:        "/scripts/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScriptByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScriptByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScriptByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
