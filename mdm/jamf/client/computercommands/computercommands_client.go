// Code generated by go-swagger; DO NOT EDIT.

package computercommands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computercommands API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computercommands API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateComputerCommandByCommand(params *CreateComputerCommandByCommandParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandCreated, error)

	CreateComputerCommandByCommandAndAction(params *CreateComputerCommandByCommandAndActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandAndActionCreated, error)

	CreateComputerCommandByCommandAndID(params *CreateComputerCommandByCommandAndIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandAndIDCreated, error)

	CreateComputerCommandByCommandIDAndPasscode(params *CreateComputerCommandByCommandIDAndPasscodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandIDAndPasscodeCreated, error)

	FindComputerCommands(params *FindComputerCommandsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsOK, error)

	FindComputerCommandsByName(params *FindComputerCommandsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsByNameOK, error)

	FindComputerCommandsByUUID(params *FindComputerCommandsByUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsByUUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateComputerCommandByCommand creates a new computer command using command name

	The chart below includes additional requirements for usage of specific commands

| command | Parameter | Requirements |
| ------- | --------- | ------------ |
| DeleteUser | user_name | DEP enrolled device and user_name value (string) |
| DeviceLock | passcode | 6 character string |
| DeviceLock | lock_message | string |
| DisableRemoteDesktop | N/A | macOS 10.14.4 or later |
| EnableRemoteDesktop | N/A | macOS 10.14.4 or later |
| EraseDevice | passcode | 6 character string |
| ScheduleOSUpdate (deprecated on 2022-10-17) | action | macOS 10.12.0 or later |
| SettingsDisableBluetooth | N/A | macOS 10.13.4 or later |
| SettingsEnableBluetooth | N/A | macOS 10.13.4 or later |
| UnlockUserAccount | user_name |  DEP enrolled device and user_name value (string) |
*/
func (a *Client) CreateComputerCommandByCommand(params *CreateComputerCommandByCommandParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerCommandByCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerCommandByCommand",
		Method:             "POST",
		PathPattern:        "/computercommands/command/{command}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerCommandByCommandReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerCommandByCommandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerCommandByCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateComputerCommandByCommandAndAction creates a new computer command with a command specific action commands supported schedule o s update deprecated on 2022 10 17
*/
func (a *Client) CreateComputerCommandByCommandAndAction(params *CreateComputerCommandByCommandAndActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandAndActionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerCommandByCommandAndActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerCommandByCommandAndAction",
		Method:             "POST",
		PathPattern:        "/computercommands/command/{command}/action/{action}/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerCommandByCommandAndActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerCommandByCommandAndActionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerCommandByCommandAndAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateComputerCommandByCommandAndID creates a new computer command using command name and device i ds
*/
func (a *Client) CreateComputerCommandByCommandAndID(params *CreateComputerCommandByCommandAndIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandAndIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerCommandByCommandAndIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerCommandByCommandAndId",
		Method:             "POST",
		PathPattern:        "/computercommands/command/{command}/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerCommandByCommandAndIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerCommandByCommandAndIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerCommandByCommandAndId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateComputerCommandByCommandIDAndPasscode creates a new computer command using command name and device i ds

Issuing a DeviceLock and EraseDevice command requires a 6 character passcode.
*/
func (a *Client) CreateComputerCommandByCommandIDAndPasscode(params *CreateComputerCommandByCommandIDAndPasscodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComputerCommandByCommandIDAndPasscodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComputerCommandByCommandIDAndPasscodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComputerCommandByCommandIdAndPasscode",
		Method:             "POST",
		PathPattern:        "/computercommands/command/{command}/passcode/{passcode}/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateComputerCommandByCommandIDAndPasscodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComputerCommandByCommandIDAndPasscodeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComputerCommandByCommandIdAndPasscode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerCommands finds all computer commands
*/
func (a *Client) FindComputerCommands(params *FindComputerCommandsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerCommandsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerCommands",
		Method:             "GET",
		PathPattern:        "/computercommands",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerCommandsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerCommandsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerCommands: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerCommandsByName finds all computer commands by name
*/
func (a *Client) FindComputerCommandsByName(params *FindComputerCommandsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerCommandsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerCommandsByName",
		Method:             "GET",
		PathPattern:        "/computercommands/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerCommandsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerCommandsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerCommandsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerCommandsByUUID finds a computer command by UUID
*/
func (a *Client) FindComputerCommandsByUUID(params *FindComputerCommandsByUUIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerCommandsByUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerCommandsByUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerCommandsByUuid",
		Method:             "GET",
		PathPattern:        "/computercommands/uuid/{uuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerCommandsByUUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerCommandsByUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerCommandsByUuid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
