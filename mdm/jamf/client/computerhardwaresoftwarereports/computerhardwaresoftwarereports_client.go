// Code generated by go-swagger; DO NOT EDIT.

package computerhardwaresoftwarereports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computerhardwaresoftwarereports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computerhardwaresoftwarereports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindComputerHardwareSoftwareReportsByID(params *FindComputerHardwareSoftwareReportsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByIDOK, error)

	FindComputerHardwareSoftwareReportsByIDSubset(params *FindComputerHardwareSoftwareReportsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByIDSubsetOK, error)

	FindComputerHardwareSoftwareReportsByMacAddress(params *FindComputerHardwareSoftwareReportsByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByMacAddressOK, error)

	FindComputerHardwareSoftwareReportsByMacAddressSubset(params *FindComputerHardwareSoftwareReportsByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByMacAddressSubsetOK, error)

	FindComputerHardwareSoftwareReportsByName(params *FindComputerHardwareSoftwareReportsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByNameOK, error)

	FindComputerHardwareSoftwareReportsByNameSubset(params *FindComputerHardwareSoftwareReportsByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByNameSubsetOK, error)

	FindComputerHardwareSoftwareReportsBySerial(params *FindComputerHardwareSoftwareReportsBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsBySerialOK, error)

	FindComputerHardwareSoftwareReportsBySerialSubset(params *FindComputerHardwareSoftwareReportsBySerialSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsBySerialSubsetOK, error)

	FindComputerHardwareSoftwareReportsByUDID(params *FindComputerHardwareSoftwareReportsByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByUDIDOK, error)

	FindComputerHardwareSoftwareReportsByUDIDSubset(params *FindComputerHardwareSoftwareReportsByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByUDIDSubsetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindComputerHardwareSoftwareReportsByID finds hardware software reports by computer ID
*/
func (a *Client) FindComputerHardwareSoftwareReportsByID(params *FindComputerHardwareSoftwareReportsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsById",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/id/{id}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByIDSubset finds a subset of hardware software reports by computer ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/Software&Hardware)
*/
func (a *Client) FindComputerHardwareSoftwareReportsByIDSubset(params *FindComputerHardwareSoftwareReportsByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByIdSubset",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/id/{id}/{start_date}_{end_date}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByMacAddress finds hardware software reports by computer m a c address
*/
func (a *Client) FindComputerHardwareSoftwareReportsByMacAddress(params *FindComputerHardwareSoftwareReportsByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByMacAddress",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/macaddress/{macaddress}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByMacAddressSubset finds a subset of hardware software reports by computer m a c address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/Software&Hardware)
*/
func (a *Client) FindComputerHardwareSoftwareReportsByMacAddressSubset(params *FindComputerHardwareSoftwareReportsByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/macaddress/{macaddress}/{start_date}_{end_date}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByName finds hardware software reports by computer name
*/
func (a *Client) FindComputerHardwareSoftwareReportsByName(params *FindComputerHardwareSoftwareReportsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByName",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/name/{name}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByNameSubset finds a subset of hardware software reports by computer name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/Software&Hardware)
*/
func (a *Client) FindComputerHardwareSoftwareReportsByNameSubset(params *FindComputerHardwareSoftwareReportsByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByNameSubset",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/name/{name}/{start_date}_{end_date}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsBySerial finds hardware software reports by computer serial number
*/
func (a *Client) FindComputerHardwareSoftwareReportsBySerial(params *FindComputerHardwareSoftwareReportsBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsBySerialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsBySerialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsBySerial",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/serialnumber/{serialnumber}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsBySerialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsBySerialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsBySerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsBySerialSubset finds a subset of hardware software reports by computer serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/Software&Hardware)
*/
func (a *Client) FindComputerHardwareSoftwareReportsBySerialSubset(params *FindComputerHardwareSoftwareReportsBySerialSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsBySerialSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsBySerialSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsBySerialSubset",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/serialnumber/{serialnumber}/{start_date}_{end_date}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsBySerialSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsBySerialSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsBySerialSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByUDID finds hardware software reports by computer u d ID
*/
func (a *Client) FindComputerHardwareSoftwareReportsByUDID(params *FindComputerHardwareSoftwareReportsByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByUDID",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/udid/{udid}/{start_date}_{end_date}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerHardwareSoftwareReportsByUDIDSubset finds a subset of hardware software reports by computer u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/Software&Hardware)
*/
func (a *Client) FindComputerHardwareSoftwareReportsByUDIDSubset(params *FindComputerHardwareSoftwareReportsByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerHardwareSoftwareReportsByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerHardwareSoftwareReportsByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerHardwareSoftwareReportsByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/computerhardwaresoftwarereports/udid/{udid}/{start_date}_{end_date}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerHardwareSoftwareReportsByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerHardwareSoftwareReportsByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerHardwareSoftwareReportsByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
