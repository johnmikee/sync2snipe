// Code generated by go-swagger; DO NOT EDIT.

package computermanagement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new computermanagement API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for computermanagement API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FindComputerManagementByID(params *FindComputerManagementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDOK, error)

	FindComputerManagementByIDPatchFilter(params *FindComputerManagementByIDPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDPatchFilterOK, error)

	FindComputerManagementByIDSubset(params *FindComputerManagementByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDSubsetOK, error)

	FindComputerManagementByIDUsername(params *FindComputerManagementByIDUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDUsernameOK, error)

	FindComputerManagementByIDUsernameSubset(params *FindComputerManagementByIDUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDUsernameSubsetOK, error)

	FindComputerManagementByMacAddress(params *FindComputerManagementByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressOK, error)

	FindComputerManagementByMacAddressPatchFilter(params *FindComputerManagementByMacAddressPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressPatchFilterOK, error)

	FindComputerManagementByMacAddressSubset(params *FindComputerManagementByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressSubsetOK, error)

	FindComputerManagementByMacAddressUsername(params *FindComputerManagementByMacAddressUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressUsernameOK, error)

	FindComputerManagementByMacAddressUsernameSubset(params *FindComputerManagementByMacAddressUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressUsernameSubsetOK, error)

	FindComputerManagementByName(params *FindComputerManagementByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameOK, error)

	FindComputerManagementByNamePatchFilter(params *FindComputerManagementByNamePatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNamePatchFilterOK, error)

	FindComputerManagementByNameSubset(params *FindComputerManagementByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameSubsetOK, error)

	FindComputerManagementByNameUsername(params *FindComputerManagementByNameUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameUsernameOK, error)

	FindComputerManagementByNameUsernameSubset(params *FindComputerManagementByNameUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameUsernameSubsetOK, error)

	FindComputerManagementBySerialNumber(params *FindComputerManagementBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberOK, error)

	FindComputerManagementBySerialNumberPatchFilter(params *FindComputerManagementBySerialNumberPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberPatchFilterOK, error)

	FindComputerManagementBySerialNumberSubset(params *FindComputerManagementBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberSubsetOK, error)

	FindComputerManagementBySerialNumberUsername(params *FindComputerManagementBySerialNumberUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberUsernameOK, error)

	FindComputerManagementBySerialNumberUsernameSubset(params *FindComputerManagementBySerialNumberUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberUsernameSubsetOK, error)

	FindComputerManagementByUDID(params *FindComputerManagementByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUDIDOK, error)

	FindComputerManagementByUDIDSubset(params *FindComputerManagementByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUDIDSubsetOK, error)

	FindComputerManagementByUdidPatchFilter(params *FindComputerManagementByUdidPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidPatchFilterOK, error)

	FindComputerManagementByUdidUsername(params *FindComputerManagementByUdidUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidUsernameOK, error)

	FindComputerManagementByUdidUsernameSubset(params *FindComputerManagementByUdidUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidUsernameSubsetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindComputerManagementByID finds computer management information by ID
*/
func (a *Client) FindComputerManagementByID(params *FindComputerManagementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementById",
		Method:             "GET",
		PathPattern:        "/computermanagement/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByIDPatchFilter displays patch management information for a computer and filter
*/
func (a *Client) FindComputerManagementByIDPatchFilter(params *FindComputerManagementByIDPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDPatchFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByIDPatchFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByIdPatchFilter",
		Method:             "GET",
		PathPattern:        "/computermanagement/id/{id}/patchfilter/{filter}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByIDPatchFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByIDPatchFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByIdPatchFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByIDSubset finds a subset of computer management information by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByIDSubset(params *FindComputerManagementByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByIdSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByIDUsername finds management information for a computer and username
*/
func (a *Client) FindComputerManagementByIDUsername(params *FindComputerManagementByIDUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByIDUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByIdUsername",
		Method:             "GET",
		PathPattern:        "/computermanagement/id/{id}/username/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByIDUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByIDUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByIdUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByIDUsernameSubset finds a subset of management information for a computer and username

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByIDUsernameSubset(params *FindComputerManagementByIDUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByIDUsernameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByIDUsernameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByIdUsernameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/id/{id}/username/{username}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByIDUsernameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByIDUsernameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByIdUsernameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByMacAddress finds computer management information by m a c address
*/
func (a *Client) FindComputerManagementByMacAddress(params *FindComputerManagementByMacAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByMacAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByMacAddress",
		Method:             "GET",
		PathPattern:        "/computermanagement/macaddress/{macaddress}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByMacAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByMacAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByMacAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByMacAddressPatchFilter displays patch management information for a computer and filter
*/
func (a *Client) FindComputerManagementByMacAddressPatchFilter(params *FindComputerManagementByMacAddressPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressPatchFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByMacAddressPatchFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByMacAddressPatchFilter",
		Method:             "GET",
		PathPattern:        "/computermanagement/macaddress/{macaddress}/patchfilter/{filter}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByMacAddressPatchFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByMacAddressPatchFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByMacAddressPatchFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByMacAddressSubset finds a subset of computer management information by m a c address

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByMacAddressSubset(params *FindComputerManagementByMacAddressSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByMacAddressSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByMacAddressSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/macaddress/{macaddress}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByMacAddressSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByMacAddressSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByMacAddressSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByMacAddressUsername finds management information for a computer and username
*/
func (a *Client) FindComputerManagementByMacAddressUsername(params *FindComputerManagementByMacAddressUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByMacAddressUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByMacAddressUsername",
		Method:             "GET",
		PathPattern:        "/computermanagement/macaddress/{macaddress}/username/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByMacAddressUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByMacAddressUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByMacAddressUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByMacAddressUsernameSubset finds a subset of management information for a computer and username

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByMacAddressUsernameSubset(params *FindComputerManagementByMacAddressUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByMacAddressUsernameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByMacAddressUsernameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByMacAddressUsernameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/macaddress/{macaddress}/username/{username}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByMacAddressUsernameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByMacAddressUsernameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByMacAddressUsernameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByName finds computer management information by name
*/
func (a *Client) FindComputerManagementByName(params *FindComputerManagementByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByName",
		Method:             "GET",
		PathPattern:        "/computermanagement/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByNamePatchFilter displays patch management information for a computer and filter
*/
func (a *Client) FindComputerManagementByNamePatchFilter(params *FindComputerManagementByNamePatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNamePatchFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByNamePatchFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByNamePatchFilter",
		Method:             "GET",
		PathPattern:        "/computermanagement/name/{name}/patchfilter/{filter}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByNamePatchFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByNamePatchFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByNamePatchFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByNameSubset finds a subset of computer management information by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByNameSubset(params *FindComputerManagementByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByNameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByNameUsername finds management information for a computer and username
*/
func (a *Client) FindComputerManagementByNameUsername(params *FindComputerManagementByNameUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByNameUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByNameUsername",
		Method:             "GET",
		PathPattern:        "/computermanagement/name/{name}/username/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByNameUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByNameUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByNameUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByNameUsernameSubset finds a subset of management information for a computer and username

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByNameUsernameSubset(params *FindComputerManagementByNameUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByNameUsernameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByNameUsernameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByNameUsernameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/name/{name}/username/{username}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByNameUsernameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByNameUsernameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByNameUsernameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementBySerialNumber finds computer management information by serial number
*/
func (a *Client) FindComputerManagementBySerialNumber(params *FindComputerManagementBySerialNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementBySerialNumber",
		Method:             "GET",
		PathPattern:        "/computermanagement/serialnumber/{serialnumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementBySerialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementBySerialNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementBySerialNumberPatchFilter displays patch management information for a computer and filter
*/
func (a *Client) FindComputerManagementBySerialNumberPatchFilter(params *FindComputerManagementBySerialNumberPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberPatchFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementBySerialNumberPatchFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementBySerialNumberPatchFilter",
		Method:             "GET",
		PathPattern:        "/computermanagement/serialnumber/{serialnumber}/patchfilter/{filter}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementBySerialNumberPatchFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementBySerialNumberPatchFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementBySerialNumberPatchFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementBySerialNumberSubset finds a subset of computer management information by serial number

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementBySerialNumberSubset(params *FindComputerManagementBySerialNumberSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementBySerialNumberSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementBySerialNumberSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/serialnumber/{serialnumber}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementBySerialNumberSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementBySerialNumberSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementBySerialNumberSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementBySerialNumberUsername finds management information for a computer and username
*/
func (a *Client) FindComputerManagementBySerialNumberUsername(params *FindComputerManagementBySerialNumberUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementBySerialNumberUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementBySerialNumberUsername",
		Method:             "GET",
		PathPattern:        "/computermanagement/serialnumber/{serialnumber}/username/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementBySerialNumberUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementBySerialNumberUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementBySerialNumberUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementBySerialNumberUsernameSubset finds a subset of management information for a computer and username

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementBySerialNumberUsernameSubset(params *FindComputerManagementBySerialNumberUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementBySerialNumberUsernameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementBySerialNumberUsernameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementBySerialNumberUsernameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/serialnumber/{serialnumber}/username/{username}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementBySerialNumberUsernameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementBySerialNumberUsernameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementBySerialNumberUsernameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByUDID finds computer management information by u d ID
*/
func (a *Client) FindComputerManagementByUDID(params *FindComputerManagementByUDIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByUDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByUDID",
		Method:             "GET",
		PathPattern:        "/computermanagement/udid/{udid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByUDIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByUDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByUDID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByUDIDSubset finds a subset of computer management information by u d ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByUDIDSubset(params *FindComputerManagementByUDIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUDIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByUDIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByUDIDSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/udid/{udid}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByUDIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByUDIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByUDIDSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByUdidPatchFilter displays patch management information for a computer and filter
*/
func (a *Client) FindComputerManagementByUdidPatchFilter(params *FindComputerManagementByUdidPatchFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidPatchFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByUdidPatchFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByUdidPatchFilter",
		Method:             "GET",
		PathPattern:        "/computermanagement/udid/{udid}/patchfilter/{filter}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByUdidPatchFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByUdidPatchFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByUdidPatchFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByUdidUsername finds management information for a computer and username
*/
func (a *Client) FindComputerManagementByUdidUsername(params *FindComputerManagementByUdidUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByUdidUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByUdidUsername",
		Method:             "GET",
		PathPattern:        "/computermanagement/udid/{udid}/username/{username}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByUdidUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByUdidUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByUdidUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindComputerManagementByUdidUsernameSubset finds a subset of management information for a computer and username

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Policies)
*/
func (a *Client) FindComputerManagementByUdidUsernameSubset(params *FindComputerManagementByUdidUsernameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindComputerManagementByUdidUsernameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindComputerManagementByUdidUsernameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findComputerManagementByUdidUsernameSubset",
		Method:             "GET",
		PathPattern:        "/computermanagement/udid/{udid}/username/{username}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindComputerManagementByUdidUsernameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindComputerManagementByUdidUsernameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findComputerManagementByUdidUsernameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
