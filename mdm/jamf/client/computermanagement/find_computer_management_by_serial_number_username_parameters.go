// Code generated by go-swagger; DO NOT EDIT.

package computermanagement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindComputerManagementBySerialNumberUsernameParams creates a new FindComputerManagementBySerialNumberUsernameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindComputerManagementBySerialNumberUsernameParams() *FindComputerManagementBySerialNumberUsernameParams {
	return &FindComputerManagementBySerialNumberUsernameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindComputerManagementBySerialNumberUsernameParamsWithTimeout creates a new FindComputerManagementBySerialNumberUsernameParams object
// with the ability to set a timeout on a request.
func NewFindComputerManagementBySerialNumberUsernameParamsWithTimeout(timeout time.Duration) *FindComputerManagementBySerialNumberUsernameParams {
	return &FindComputerManagementBySerialNumberUsernameParams{
		timeout: timeout,
	}
}

// NewFindComputerManagementBySerialNumberUsernameParamsWithContext creates a new FindComputerManagementBySerialNumberUsernameParams object
// with the ability to set a context for a request.
func NewFindComputerManagementBySerialNumberUsernameParamsWithContext(ctx context.Context) *FindComputerManagementBySerialNumberUsernameParams {
	return &FindComputerManagementBySerialNumberUsernameParams{
		Context: ctx,
	}
}

// NewFindComputerManagementBySerialNumberUsernameParamsWithHTTPClient creates a new FindComputerManagementBySerialNumberUsernameParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindComputerManagementBySerialNumberUsernameParamsWithHTTPClient(client *http.Client) *FindComputerManagementBySerialNumberUsernameParams {
	return &FindComputerManagementBySerialNumberUsernameParams{
		HTTPClient: client,
	}
}

/*
FindComputerManagementBySerialNumberUsernameParams contains all the parameters to send to the API endpoint

	for the find computer management by serial number username operation.

	Typically these are written to a http.Request.
*/
type FindComputerManagementBySerialNumberUsernameParams struct {

	/* Serialnumber.

	   Computer serial number to filter by
	*/
	Serialnumber string

	/* Username.

	   Username to filter by
	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find computer management by serial number username params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerManagementBySerialNumberUsernameParams) WithDefaults() *FindComputerManagementBySerialNumberUsernameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find computer management by serial number username params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindComputerManagementBySerialNumberUsernameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) WithTimeout(timeout time.Duration) *FindComputerManagementBySerialNumberUsernameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) WithContext(ctx context.Context) *FindComputerManagementBySerialNumberUsernameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) WithHTTPClient(client *http.Client) *FindComputerManagementBySerialNumberUsernameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSerialnumber adds the serialnumber to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) WithSerialnumber(serialnumber string) *FindComputerManagementBySerialNumberUsernameParams {
	o.SetSerialnumber(serialnumber)
	return o
}

// SetSerialnumber adds the serialnumber to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) SetSerialnumber(serialnumber string) {
	o.Serialnumber = serialnumber
}

// WithUsername adds the username to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) WithUsername(username string) *FindComputerManagementBySerialNumberUsernameParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the find computer management by serial number username params
func (o *FindComputerManagementBySerialNumberUsernameParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *FindComputerManagementBySerialNumberUsernameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param serialnumber
	if err := r.SetPathParam("serialnumber", o.Serialnumber); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
