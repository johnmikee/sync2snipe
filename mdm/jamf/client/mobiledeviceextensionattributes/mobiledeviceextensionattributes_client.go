// Code generated by go-swagger; DO NOT EDIT.

package mobiledeviceextensionattributes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledeviceextensionattributes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledeviceextensionattributes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMobiledeviceextensionattributeByID(params *CreateMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobiledeviceextensionattributeByIDCreated, error)

	DeleteMobiledeviceextensionattributeByID(params *DeleteMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobiledeviceextensionattributeByIDOK, error)

	DeleteMobiledeviceextensionattributeByName(params *DeleteMobiledeviceextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobiledeviceextensionattributeByNameOK, error)

	FindMobiledeviceextensionattributes(params *FindMobiledeviceextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesOK, error)

	FindMobiledeviceextensionattributesByID(params *FindMobiledeviceextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesByIDOK, error)

	FindMobiledeviceextensionattributesByName(params *FindMobiledeviceextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesByNameOK, error)

	UpdateMobiledeviceextensionattributeByID(params *UpdateMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobiledeviceextensionattributeByIDCreated, error)

	UpdateMobiledeviceextensionattributeByName(params *UpdateMobiledeviceextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobiledeviceextensionattributeByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMobiledeviceextensionattributeByID creates a new mobile device extension attribute by ID
*/
func (a *Client) CreateMobiledeviceextensionattributeByID(params *CreateMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobiledeviceextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobiledeviceextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMobiledeviceextensionattributeById",
		Method:             "POST",
		PathPattern:        "/mobiledeviceextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobiledeviceextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobiledeviceextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobiledeviceextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobiledeviceextensionattributeByID deletes a mobile device extension attribute by ID
*/
func (a *Client) DeleteMobiledeviceextensionattributeByID(params *DeleteMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobiledeviceextensionattributeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobiledeviceextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobiledeviceextensionattributeById",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobiledeviceextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobiledeviceextensionattributeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobiledeviceextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobiledeviceextensionattributeByName deletes a mobile device extension attribute by name
*/
func (a *Client) DeleteMobiledeviceextensionattributeByName(params *DeleteMobiledeviceextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobiledeviceextensionattributeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobiledeviceextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobiledeviceextensionattributeByName",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobiledeviceextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobiledeviceextensionattributeByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobiledeviceextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobiledeviceextensionattributes finds all mobile device extension attributes
*/
func (a *Client) FindMobiledeviceextensionattributes(params *FindMobiledeviceextensionattributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobiledeviceextensionattributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobiledeviceextensionattributes",
		Method:             "GET",
		PathPattern:        "/mobiledeviceextensionattributes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobiledeviceextensionattributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobiledeviceextensionattributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobiledeviceextensionattributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobiledeviceextensionattributesByID finds mobile device extension attributes by ID
*/
func (a *Client) FindMobiledeviceextensionattributesByID(params *FindMobiledeviceextensionattributesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobiledeviceextensionattributesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobiledeviceextensionattributesById",
		Method:             "GET",
		PathPattern:        "/mobiledeviceextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobiledeviceextensionattributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobiledeviceextensionattributesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobiledeviceextensionattributesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobiledeviceextensionattributesByName finds mobiledeviceextensionattributes by name
*/
func (a *Client) FindMobiledeviceextensionattributesByName(params *FindMobiledeviceextensionattributesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobiledeviceextensionattributesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobiledeviceextensionattributesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobiledeviceextensionattributesByName",
		Method:             "GET",
		PathPattern:        "/mobiledeviceextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobiledeviceextensionattributesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobiledeviceextensionattributesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobiledeviceextensionattributesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobiledeviceextensionattributeByID updates an existing mobile device extension attribute by ID
*/
func (a *Client) UpdateMobiledeviceextensionattributeByID(params *UpdateMobiledeviceextensionattributeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobiledeviceextensionattributeByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobiledeviceextensionattributeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobiledeviceextensionattributeById",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceextensionattributes/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobiledeviceextensionattributeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobiledeviceextensionattributeByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobiledeviceextensionattributeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobiledeviceextensionattributeByName updates an existing mobile device extension attribute by name
*/
func (a *Client) UpdateMobiledeviceextensionattributeByName(params *UpdateMobiledeviceextensionattributeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobiledeviceextensionattributeByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobiledeviceextensionattributeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobiledeviceextensionattributeByName",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceextensionattributes/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobiledeviceextensionattributeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobiledeviceextensionattributeByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobiledeviceextensionattributeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
