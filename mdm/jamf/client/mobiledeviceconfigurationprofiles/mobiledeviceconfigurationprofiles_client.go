// Code generated by go-swagger; DO NOT EDIT.

package mobiledeviceconfigurationprofiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mobiledeviceconfigurationprofiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mobiledeviceconfigurationprofiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMobileDeviceConfigurationProfileByID(params *CreateMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceConfigurationProfileByIDCreated, error)

	DeleteMobileDeviceConfigurationProfileByID(params *DeleteMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceConfigurationProfileByIDOK, error)

	DeleteMobileDeviceConfigurationProfileByName(params *DeleteMobileDeviceConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceConfigurationProfileByNameOK, error)

	FindMobileDeviceConfigurationProfiles(params *FindMobileDeviceConfigurationProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesOK, error)

	FindMobileDeviceConfigurationProfilesByID(params *FindMobileDeviceConfigurationProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByIDOK, error)

	FindMobileDeviceConfigurationProfilesByIDSubset(params *FindMobileDeviceConfigurationProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByIDSubsetOK, error)

	FindMobileDeviceConfigurationProfilesByName(params *FindMobileDeviceConfigurationProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByNameOK, error)

	FindMobileDeviceConfigurationProfilesByNameSubset(params *FindMobileDeviceConfigurationProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByNameSubsetOK, error)

	UpdateMobileDeviceConfigurationProfileByID(params *UpdateMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceConfigurationProfileByIDCreated, error)

	UpdateMobileDeviceConfigurationProfileByName(params *UpdateMobileDeviceConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceConfigurationProfileByNameCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMobileDeviceConfigurationProfileByID creates a new mobile device configuration profile by ID
*/
func (a *Client) CreateMobileDeviceConfigurationProfileByID(params *CreateMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMobileDeviceConfigurationProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobileDeviceConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMobileDeviceConfigurationProfileById",
		Method:             "POST",
		PathPattern:        "/mobiledeviceconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobileDeviceConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobileDeviceConfigurationProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobileDeviceConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceConfigurationProfileByID deletes a mobile device configuration profile by ID
*/
func (a *Client) DeleteMobileDeviceConfigurationProfileByID(params *DeleteMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceConfigurationProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceConfigurationProfileById",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceConfigurationProfileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMobileDeviceConfigurationProfileByName deletes a mobile device configuration profile by name
*/
func (a *Client) DeleteMobileDeviceConfigurationProfileByName(params *DeleteMobileDeviceConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMobileDeviceConfigurationProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMobileDeviceConfigurationProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMobileDeviceConfigurationProfileByName",
		Method:             "DELETE",
		PathPattern:        "/mobiledeviceconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMobileDeviceConfigurationProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMobileDeviceConfigurationProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMobileDeviceConfigurationProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceConfigurationProfiles finds all mobile device configuration profiles
*/
func (a *Client) FindMobileDeviceConfigurationProfiles(params *FindMobileDeviceConfigurationProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceConfigurationProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceConfigurationProfiles",
		Method:             "GET",
		PathPattern:        "/mobiledeviceconfigurationprofiles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceConfigurationProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceConfigurationProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceConfigurationProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceConfigurationProfilesByID finds mobile device configuration profiles by ID
*/
func (a *Client) FindMobileDeviceConfigurationProfilesByID(params *FindMobileDeviceConfigurationProfilesByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceConfigurationProfilesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceConfigurationProfilesById",
		Method:             "GET",
		PathPattern:        "/mobiledeviceconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceConfigurationProfilesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceConfigurationProfilesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceConfigurationProfilesById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceConfigurationProfilesByIDSubset finds a subset of data for a mobile device configuration profile by ID

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindMobileDeviceConfigurationProfilesByIDSubset(params *FindMobileDeviceConfigurationProfilesByIDSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByIDSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceConfigurationProfilesByIDSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceConfigurationProfilesByIdSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceconfigurationprofiles/id/{id}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceConfigurationProfilesByIDSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceConfigurationProfilesByIDSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceConfigurationProfilesByIdSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceConfigurationProfilesByName finds mobile device configuration profiles by name
*/
func (a *Client) FindMobileDeviceConfigurationProfilesByName(params *FindMobileDeviceConfigurationProfilesByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceConfigurationProfilesByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceConfigurationProfilesByName",
		Method:             "GET",
		PathPattern:        "/mobiledeviceconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceConfigurationProfilesByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceConfigurationProfilesByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceConfigurationProfilesByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindMobileDeviceConfigurationProfilesByNameSubset finds a subset of data for mobile device configuration profiles by name

Subset values can also be appended using an ampersand to return multiple subsets (e.g. /subsets/General&Scope)
*/
func (a *Client) FindMobileDeviceConfigurationProfilesByNameSubset(params *FindMobileDeviceConfigurationProfilesByNameSubsetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindMobileDeviceConfigurationProfilesByNameSubsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindMobileDeviceConfigurationProfilesByNameSubsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findMobileDeviceConfigurationProfilesByNameSubset",
		Method:             "GET",
		PathPattern:        "/mobiledeviceconfigurationprofiles/name/{name}/subset/{subset}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindMobileDeviceConfigurationProfilesByNameSubsetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindMobileDeviceConfigurationProfilesByNameSubsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findMobileDeviceConfigurationProfilesByNameSubset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceConfigurationProfileByID updates an existing mobile device configuration profile by ID
*/
func (a *Client) UpdateMobileDeviceConfigurationProfileByID(params *UpdateMobileDeviceConfigurationProfileByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceConfigurationProfileByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceConfigurationProfileByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceConfigurationProfileById",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceconfigurationprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceConfigurationProfileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceConfigurationProfileByIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceConfigurationProfileById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMobileDeviceConfigurationProfileByName updates an existing mobile device configuration profile by name
*/
func (a *Client) UpdateMobileDeviceConfigurationProfileByName(params *UpdateMobileDeviceConfigurationProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMobileDeviceConfigurationProfileByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMobileDeviceConfigurationProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMobileDeviceConfigurationProfileByName",
		Method:             "PUT",
		PathPattern:        "/mobiledeviceconfigurationprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMobileDeviceConfigurationProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMobileDeviceConfigurationProfileByNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMobileDeviceConfigurationProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
