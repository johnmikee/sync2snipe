// Package snipe provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package snipe

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for Categories1ParamsCategoryType.
const (
	Categories1ParamsCategoryTypeAccessory  Categories1ParamsCategoryType = "accessory"
	Categories1ParamsCategoryTypeAsset      Categories1ParamsCategoryType = "asset"
	Categories1ParamsCategoryTypeComponent  Categories1ParamsCategoryType = "component"
	Categories1ParamsCategoryTypeConsumable Categories1ParamsCategoryType = "consumable"
	Categories1ParamsCategoryTypeLicense    Categories1ParamsCategoryType = "license"
)

// Defines values for Fields2JSONBodyElement.
const (
	Fields2JSONBodyElementCheckbox Fields2JSONBodyElement = "checkbox"
	Fields2JSONBodyElementListbox  Fields2JSONBodyElement = "listbox"
	Fields2JSONBodyElementRadio    Fields2JSONBodyElement = "radio"
	Fields2JSONBodyElementText     Fields2JSONBodyElement = "text"
	Fields2JSONBodyElementTextarea Fields2JSONBodyElement = "textarea"
)

// Defines values for Fieldsid2JSONBodyElement.
const (
	Fieldsid2JSONBodyElementCheckbox Fieldsid2JSONBodyElement = "checkbox"
	Fieldsid2JSONBodyElementListbox  Fieldsid2JSONBodyElement = "listbox"
	Fieldsid2JSONBodyElementRadio    Fieldsid2JSONBodyElement = "radio"
	Fieldsid2JSONBodyElementText     Fieldsid2JSONBodyElement = "text"
	Fieldsid2JSONBodyElementTextarea Fieldsid2JSONBodyElement = "textarea"
)

// Defines values for UpdateFieldsJSONBodyElement.
const (
	Checkbox UpdateFieldsJSONBodyElement = "checkbox"
	Listbox  UpdateFieldsJSONBodyElement = "listbox"
	Radio    UpdateFieldsJSONBodyElement = "radio"
	Text     UpdateFieldsJSONBodyElement = "text"
	Textarea UpdateFieldsJSONBodyElement = "textarea"
)

// Defines values for HardwareCheckoutJSONBodyCheckoutToType.
const (
	HardwareCheckoutJSONBodyCheckoutToTypeAsset    HardwareCheckoutJSONBodyCheckoutToType = "asset"
	HardwareCheckoutJSONBodyCheckoutToTypeLocation HardwareCheckoutJSONBodyCheckoutToType = "location"
	HardwareCheckoutJSONBodyCheckoutToTypeUser     HardwareCheckoutJSONBodyCheckoutToType = "user"
)

// Defines values for Maintenances1JSONBodyAssetMaintenanceType.
const (
	HardwareSupport Maintenances1JSONBodyAssetMaintenanceType = "Hardware Support"
	Maintenance     Maintenances1JSONBodyAssetMaintenanceType = "Maintenance"
	PATTest         Maintenances1JSONBodyAssetMaintenanceType = "PAT Test"
	Repair          Maintenances1JSONBodyAssetMaintenanceType = "Repair"
	SoftwareSupport Maintenances1JSONBodyAssetMaintenanceType = "Software Support"
	Upgrade         Maintenances1JSONBodyAssetMaintenanceType = "Upgrade"
)

// Defines values for ReportsactivityParamsItemType.
const (
	Accessory  ReportsactivityParamsItemType = "accessory"
	Asset      ReportsactivityParamsItemType = "asset"
	Component  ReportsactivityParamsItemType = "component"
	Consumable ReportsactivityParamsItemType = "consumable"
	User       ReportsactivityParamsItemType = "user"
)

// Defines values for ReportsactivityParamsActionType.
const (
	Accepted    ReportsactivityParamsActionType = "accepted"
	Audit       ReportsactivityParamsActionType = "audit"
	CheckinFrom ReportsactivityParamsActionType = "checkin from"
	Checkout    ReportsactivityParamsActionType = "checkout"
	Create      ReportsactivityParamsActionType = "create"
	Declined    ReportsactivityParamsActionType = "declined"
	Delete      ReportsactivityParamsActionType = "delete"
	Requested   ReportsactivityParamsActionType = "requested"
	Update      ReportsactivityParamsActionType = "update"
	Uploaded    ReportsactivityParamsActionType = "uploaded"
)

// Defines values for ReportsactivityParamsOrder.
const (
	Asc  ReportsactivityParamsOrder = "asc"
	Desc ReportsactivityParamsOrder = "desc"
)

// Defines values for ReportsactivityParamsSort.
const (
	AcceptSignature                     ReportsactivityParamsSort = "accept_signature"
	ActionType                          ReportsactivityParamsSort = "action_type"
	CreatedAt                           ReportsactivityParamsSort = "created_at"
	Id                                  ReportsactivityParamsSort = "id"
	NoteDefaultsToDescIfNotValueIsGiven ReportsactivityParamsSort = "note (defaults to desc if not value is given)"
	TargetId                            ReportsactivityParamsSort = "target_id"
	UserId                              ReportsactivityParamsSort = "user_id"
)

// Defines values for StatuslabelsParamsStatusType.
const (
	StatuslabelsParamsStatusTypeArchived     StatuslabelsParamsStatusType = "archived"
	StatuslabelsParamsStatusTypeDeployable   StatuslabelsParamsStatusType = "deployable"
	StatuslabelsParamsStatusTypePending      StatuslabelsParamsStatusType = "pending"
	StatuslabelsParamsStatusTypeUndeployable StatuslabelsParamsStatusType = "undeployable"
)

// Defines values for Statuslabels1JSONBodyType.
const (
	Statuslabels1JSONBodyTypeArchived     Statuslabels1JSONBodyType = "archived"
	Statuslabels1JSONBodyTypeDeployable   Statuslabels1JSONBodyType = "deployable"
	Statuslabels1JSONBodyTypePending      Statuslabels1JSONBodyType = "pending"
	Statuslabels1JSONBodyTypeUndeployable Statuslabels1JSONBodyType = "undeployable"
)

// Defines values for Statuslabelsid3JSONBodyType.
const (
	Statuslabelsid3JSONBodyTypeArchived     Statuslabelsid3JSONBodyType = "archived"
	Statuslabelsid3JSONBodyTypeDeployable   Statuslabelsid3JSONBodyType = "deployable"
	Statuslabelsid3JSONBodyTypePending      Statuslabelsid3JSONBodyType = "pending"
	Statuslabelsid3JSONBodyTypeUndeployable Statuslabelsid3JSONBodyType = "undeployable"
)

// Defines values for Statuslabelsid2JSONBodyType.
const (
	Statuslabelsid2JSONBodyTypeArchived     Statuslabelsid2JSONBodyType = "archived"
	Statuslabelsid2JSONBodyTypeDeployable   Statuslabelsid2JSONBodyType = "deployable"
	Statuslabelsid2JSONBodyTypePending      Statuslabelsid2JSONBodyType = "pending"
	Statuslabelsid2JSONBodyTypeUndeployable Statuslabelsid2JSONBodyType = "undeployable"
)

// AccessoriesParams defines parameters for Accessories.
type AccessoriesParams struct {
	// Limit Specify the number of results you wish to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search A text string to search the assets data for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderNumber Return only assets associated with a specific order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty"`

	// Sort Specify the column name you wish to sort by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Specify the order (asc or desc) you wish to order by on your sort column
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Expand Whether to include detailed information on categories, etc (true) or just the text name (false)
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`
}

// Accessories1JSONBody defines parameters for Accessories1.
type Accessories1JSONBody struct {
	// CategoryId ID number of the category the accessory belongs to
	CategoryId int32 `json:"category_id"`

	// CompanyId ID Number of the company the accessory is assigned to
	CompanyId *int32 `json:"company_id,omitempty"`

	// LocationId ID number of the location the accessory is assigned to
	LocationId *int32 `json:"location_id,omitempty"`

	// ManufacturerId ID number of the manufacturer for this accessory.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// ModelNumber Model number of Accessory
	ModelNumber *string `json:"model_number,omitempty"`
	Name        string  `json:"name"`

	// OrderNumber Order number for this accessory.
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of item being purchased.
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date accessory was purchased
	PurchaseDate *string `json:"purchase_date,omitempty"`

	// Qty Quantity of the accessory you have
	Qty int32 `json:"qty"`

	// SupplierId ID number of the supplier for this accessory
	SupplierId *int32 `json:"supplier_id,omitempty"`
}

// Accessoriesid2JSONBody defines parameters for Accessoriesid2.
type Accessoriesid2JSONBody struct {
	// CategoryId ID number of the category the accessory belongs to
	CategoryId *int32 `json:"category_id,omitempty"`

	// CompanyId ID Number of the company the accessory is assigned to
	CompanyId *int32 `json:"company_id,omitempty"`

	// LocationId ID number of the location the accessory is assigned to
	LocationId *int32 `json:"location_id,omitempty"`

	// ManufacturerId ID number of the manufacturer for this accessory.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// ModelNumber Model number of Accessory
	ModelNumber *string `json:"model_number,omitempty"`
	Name        *string `json:"name,omitempty"`

	// OrderNumber Order number for this accessory.
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of item being purchased.
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date accessory was purchased
	PurchaseDate *string `json:"purchase_date,omitempty"`

	// Qty Quantity of the accessory you have
	Qty *int32 `json:"qty,omitempty"`

	// SupplierId ID number of the supplier for this accessory
	SupplierId *int32 `json:"supplier_id,omitempty"`
}

// Accessoriesid1JSONBody defines parameters for Accessoriesid1.
type Accessoriesid1JSONBody struct {
	// CategoryId ID number of the category the accessory belongs to
	CategoryId int32 `json:"category_id"`

	// CompanyId ID Number of the company the accessory is assigned to
	CompanyId *int32 `json:"company_id,omitempty"`

	// LocationId ID number of the location the accessory is assigned to
	LocationId *int32 `json:"location_id,omitempty"`

	// ManufacturerId ID number of the manufacturer for this accessory.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// ModelNumber Model number of Accessory
	ModelNumber *string `json:"model_number,omitempty"`
	Name        string  `json:"name"`

	// OrderNumber Order number for this accessory.
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of item being purchased.
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date accessory was purchased
	PurchaseDate *string `json:"purchase_date,omitempty"`

	// Qty Quantity of the accessory you have
	Qty int32 `json:"qty"`

	// SupplierId ID number of the supplier for this accessory
	SupplierId *int32 `json:"supplier_id,omitempty"`
}

// AccessoriesidcheckedoutParams defines parameters for Accessoriesidcheckedout.
type AccessoriesidcheckedoutParams struct {
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// Accessoriesidcheckedout1JSONBody defines parameters for Accessoriesidcheckedout1.
type Accessoriesidcheckedout1JSONBody struct {
	// AssignedTo User ID of a user to check an accessory out to
	AssignedTo int32 `json:"assigned_to"`

	// Note Note comment on the checkout
	Note *string `json:"note,omitempty"`
}

// Accessoriesidcheckedout1Params defines parameters for Accessoriesidcheckedout1.
type Accessoriesidcheckedout1Params struct {
	Limit  *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`
}

// Categories1Params defines parameters for Categories1.
type Categories1Params struct {
	// Name Category name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset number (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Search string
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// CategoryId ID number of the category you'd like to filter by
	CategoryId *int32 `form:"category_id,omitempty" json:"category_id,omitempty"`

	// CategoryType Type of category
	CategoryType      *Categories1ParamsCategoryType `form:"category_type,omitempty" json:"category_type,omitempty"`
	UseDefaultEula    *bool                          `form:"use_default_eula,omitempty" json:"use_default_eula,omitempty"`
	RequireAcceptance *bool                          `form:"require_acceptance,omitempty" json:"require_acceptance,omitempty"`
	CheckinEmail      *bool                          `form:"checkin_email,omitempty" json:"checkin_email,omitempty"`
}

// Categories1ParamsCategoryType defines parameters for Categories1.
type Categories1ParamsCategoryType string

// Categories2JSONBody defines parameters for Categories2.
type Categories2JSONBody struct {
	// CategoryType (asset, accessory, consumable, component) - as of post-v5.2, this is no longer case sensitive
	CategoryType string `json:"category_type"`

	// CheckinEmail Should the user be emailed the EULA and/or an acceptance confirmation email when this item is checked in?
	CheckinEmail *bool `json:"checkin_email,omitempty"`

	// Name Model name
	Name              string `json:"name"`
	RequireAcceptance *bool  `json:"require_acceptance,omitempty"`
	UseDefaultEula    *bool  `json:"use_default_eula,omitempty"`
}

// Categoriesid1JSONBody defines parameters for Categoriesid1.
type Categoriesid1JSONBody struct {
	// CategoryType (asset, accessory, consumable, component) - as of post-v5.2, this is no longer case sensitive
	CategoryType string `json:"category_type"`

	// CheckinEmail Should the user be emailed the EULA and/or an acceptance confirmation email when this item is checked in?
	CheckinEmail *bool `json:"checkin_email,omitempty"`

	// Name Model name
	Name              string `json:"name"`
	RequireAcceptance *bool  `json:"require_acceptance,omitempty"`
	UseDefaultEula    *bool  `json:"use_default_eula,omitempty"`
}

// CategoriesidJSONBody defines parameters for Categoriesid.
type CategoriesidJSONBody struct {
	// CategoryType (asset, accessory, consumable, component) - as of post-v5.2, this is no longer case sensitive
	CategoryType string `json:"category_type"`

	// CheckinEmail Should the user be emailed the EULA and/or an acceptance confirmation email when this item is checked in?
	CheckinEmail *bool `json:"checkin_email,omitempty"`

	// Name Model name
	Name              string `json:"name"`
	RequireAcceptance *bool  `json:"require_acceptance,omitempty"`
	UseDefaultEula    *bool  `json:"use_default_eula,omitempty"`
}

// CompaniesParams defines parameters for Companies.
type CompaniesParams struct {
	// Name Company name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// Companies1JSONBody defines parameters for Companies1.
type Companies1JSONBody struct {
	Name string `json:"name"`
}

// Companiesid2JSONBody defines parameters for Companiesid2.
type Companiesid2JSONBody struct {
	Name string `json:"name"`
}

// Companiesid1JSONBody defines parameters for Companiesid1.
type Companiesid1JSONBody struct {
	Name string `json:"name"`
}

// ComponentsParams defines parameters for Components.
type ComponentsParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Specify the number of results you wish to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search A text string to search the assets data for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderNumber Return only assets associated with a specific order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty"`

	// Sort Specify the column name you wish to sort by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Specify the order (asc or desc) you wish to order by on your sort column
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Expand Whether to include detailed information on categories, etc (true) or just the text name (false)
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`
}

// Components1JSONBody defines parameters for Components1.
type Components1JSONBody struct {
	CategoryId   int32               `json:"category_id"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	LocationId   *int32              `json:"location_id,omitempty"`
	MinAmt       *int32              `json:"min_amt,omitempty"`
	Name         string              `json:"name"`
	OrderNumber  *string             `json:"order_number,omitempty"`
	PurchaseCost *float32            `json:"purchase_cost,omitempty"`
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty          int32               `json:"qty"`
	Serial       *string             `json:"serial,omitempty"`
}

// Componentsid2JSONBody defines parameters for Componentsid2.
type Componentsid2JSONBody struct {
	CategoryId   int32               `json:"category_id"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	LocationId   *int32              `json:"location_id,omitempty"`
	MinAmt       *int32              `json:"min_amt,omitempty"`
	Name         string              `json:"name"`
	OrderNumber  *string             `json:"order_number,omitempty"`
	PurchaseCost *float32            `json:"purchase_cost,omitempty"`
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty          int32               `json:"qty"`
	Serial       *string             `json:"serial,omitempty"`
}

// Componentsid1JSONBody defines parameters for Componentsid1.
type Componentsid1JSONBody struct {
	CategoryId   int32               `json:"category_id"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	LocationId   *int32              `json:"location_id,omitempty"`
	MinAmt       *int32              `json:"min_amt,omitempty"`
	Name         string              `json:"name"`
	OrderNumber  *string             `json:"order_number,omitempty"`
	PurchaseCost *float32            `json:"purchase_cost,omitempty"`
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty          int32               `json:"qty"`
	Serial       *string             `json:"serial,omitempty"`
}

// ComponentsidcheckinJSONBody defines parameters for Componentsidcheckin.
type ComponentsidcheckinJSONBody struct {
	// CheckinQty Quantity of the components to check in from the asset
	CheckinQty int32 `json:"checkin_qty"`
}

// ComponentsidcheckoutJSONBody defines parameters for Componentsidcheckout.
type ComponentsidcheckoutJSONBody struct {
	// AssignedQty Quantity of the components to check out to the asset
	AssignedQty int32 `json:"assigned_qty"`

	// AssignedTo User ID of an asset to check a component out to
	AssignedTo int32 `json:"assigned_to"`
}

// ConsumablesParams defines parameters for Consumables.
type ConsumablesParams struct {
	// Name Consumable name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Specify the number of results you wish to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search A text string to search the assets data for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderNumber Return only assets associated with a specific order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty"`

	// Sort Specify the column name you wish to sort by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Specify the order (asc or desc) you wish to order by on your sort column
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Expand Whether to include detailed information on categories, etc (true) or just the text name (false)
	Expand *string `form:"expand,omitempty" json:"expand,omitempty"`

	// CategoryId Category ID to filter by
	CategoryId *int32 `form:"category_id,omitempty" json:"category_id,omitempty"`

	// CompanyId Company ID to filter by
	CompanyId *int32 `form:"company_id,omitempty" json:"company_id,omitempty"`

	// ManufacturerId Manufacturer ID to filter by
	ManufacturerId *int32 `form:"manufacturer_id,omitempty" json:"manufacturer_id,omitempty"`
}

// Consumables1JSONBody defines parameters for Consumables1.
type Consumables1JSONBody struct {
	CategoryId     int32               `json:"category_id"`
	CompanyId      *int32              `json:"company_id,omitempty"`
	ItemNo         *string             `json:"item_no,omitempty"`
	LocationId     *string             `json:"location_id,omitempty"`
	ManufacturerId *string             `json:"manufacturer_id,omitempty"`
	MinAmt         *int32              `json:"min_amt,omitempty"`
	ModelNumber    *string             `json:"model_number,omitempty"`
	Name           string              `json:"name"`
	OrderNumber    *string             `json:"order_number,omitempty"`
	PurchaseDate   *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty            int32               `json:"qty"`
	Requestable    *bool               `json:"requestable,omitempty"`
}

// Consumablesid1JSONBody defines parameters for Consumablesid1.
type Consumablesid1JSONBody struct {
	CategoryId     int32               `json:"category_id"`
	CompanyId      *int32              `json:"company_id,omitempty"`
	ItemNo         *string             `json:"item_no,omitempty"`
	LocationId     *string             `json:"location_id,omitempty"`
	ManufacturerId *string             `json:"manufacturer_id,omitempty"`
	MinAmt         *int32              `json:"min_amt,omitempty"`
	ModelNumber    *string             `json:"model_number,omitempty"`
	Name           string              `json:"name"`
	OrderNumber    *string             `json:"order_number,omitempty"`
	PurchaseDate   *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty            int32               `json:"qty"`
	Requestable    *bool               `json:"requestable,omitempty"`
}

// Consumables2JSONBody defines parameters for Consumables2.
type Consumables2JSONBody struct {
	CategoryId     int32               `json:"category_id"`
	CompanyId      *int32              `json:"company_id,omitempty"`
	ItemNo         *string             `json:"item_no,omitempty"`
	LocationId     *string             `json:"location_id,omitempty"`
	ManufacturerId *string             `json:"manufacturer_id,omitempty"`
	MinAmt         *int32              `json:"min_amt,omitempty"`
	ModelNumber    *string             `json:"model_number,omitempty"`
	Name           string              `json:"name"`
	OrderNumber    *string             `json:"order_number,omitempty"`
	PurchaseDate   *openapi_types.Date `json:"purchase_date,omitempty"`
	Qty            int32               `json:"qty"`
	Requestable    *bool               `json:"requestable,omitempty"`
}

// ConsumablesidcheckoutJSONBody defines parameters for Consumablesidcheckout.
type ConsumablesidcheckoutJSONBody struct {
	// AssignedTo User ID of a user to check an accessory out to
	AssignedTo *int32 `json:"assigned_to,omitempty"`
}

// DepartmentsParams defines parameters for Departments.
type DepartmentsParams struct {
	Name       *string `form:"name,omitempty" json:"name,omitempty"`
	CompanyId  *int32  `form:"company_id,omitempty" json:"company_id,omitempty"`
	ManagerId  *int32  `form:"manager_id,omitempty" json:"manager_id,omitempty"`
	LocationId *int32  `form:"location_id,omitempty" json:"location_id,omitempty"`
}

// Departments1JSONBody defines parameters for Departments1.
type Departments1JSONBody struct {
	// Name Department name
	Name string `json:"name"`
}

// Departmentsid1JSONBody defines parameters for Departmentsid1.
type Departmentsid1JSONBody struct {
	// Name Department name
	Name string `json:"name"`
}

// DepartmentsEditJSONBody defines parameters for DepartmentsEdit.
type DepartmentsEditJSONBody struct {
	// Name Department name
	Name string `json:"name"`
}

// Fields2JSONBody defines parameters for Fields2.
type Fields2JSONBody struct {
	// Element Form field type that should be displayed.
	Element Fields2JSONBodyElement `json:"element"`

	// FieldEncrypted Whether the field should be encrypted. (This can cause issues if you change it after the field was created.)
	FieldEncrypted *bool `json:"field_encrypted,omitempty"`

	// FieldValues In the case of list boxes, etc, this should be a list of the options available
	FieldValues *string `json:"field_values,omitempty"`

	// Format Validation constraints on this field
	Format *string `json:"format,omitempty"`

	// HelpText Any additional text you wish to display under the new form field to make it clearer what the gauges should be.
	HelpText *string `json:"help_text,omitempty"`

	// Name The field's name, which is also the form label
	Name string `json:"name"`

	// ShowInEmail Whether or not to show the custom field in email notifications
	ShowInEmail *bool `json:"show_in_email,omitempty"`
}

// Fields2JSONBodyElement defines parameters for Fields2.
type Fields2JSONBodyElement string

// Fieldsid2JSONBody defines parameters for Fieldsid2.
type Fieldsid2JSONBody struct {
	// Element The type of form field you want to display
	Element *Fieldsid2JSONBodyElement `json:"element,omitempty"`

	// Name Model name
	Name *string `json:"name,omitempty"`
}

// Fieldsid2JSONBodyElement defines parameters for Fieldsid2.
type Fieldsid2JSONBodyElement string

// UpdateFieldsJSONBody defines parameters for UpdateFields.
type UpdateFieldsJSONBody struct {
	// Element The type of form field you want to display
	Element UpdateFieldsJSONBodyElement `json:"element"`

	// Name Model name
	Name string `json:"name"`
}

// UpdateFieldsJSONBodyElement defines parameters for UpdateFields.
type UpdateFieldsJSONBodyElement string

// FieldsidassociateJSONBody defines parameters for Fieldsidassociate.
type FieldsidassociateJSONBody struct {
	// FieldsetId Fieldset ID
	FieldsetId int32 `json:"fieldset_id"`
}

// FieldsiddisassociateJSONBody defines parameters for Fieldsiddisassociate.
type FieldsiddisassociateJSONBody struct {
	// FieldsetId Fieldset ID
	FieldsetId int32 `json:"fieldset_id"`
}

// FieldsetsJSONBody defines parameters for Fieldsets.
type FieldsetsJSONBody struct {
	// Name Fieldset name
	Name string `json:"name"`
}

// Fieldsetsid1JSONBody defines parameters for Fieldsetsid1.
type Fieldsetsid1JSONBody struct {
	// Name Model name
	Name string `json:"name"`
}

// Groups1Params defines parameters for Groups1.
type Groups1Params struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// Groupsid1JSONBody defines parameters for Groupsid1.
type Groupsid1JSONBody struct {
	Name        string          `json:"name"`
	Permissions json.RawMessage `json:"permissions,omitempty"`
}

// Groupsid4JSONBody defines parameters for Groupsid4.
type Groupsid4JSONBody struct {
	Name        string          `json:"name"`
	Permissions json.RawMessage `json:"permissions,omitempty"`
}

// Groupsid2JSONBody defines parameters for Groupsid2.
type Groupsid2JSONBody struct {
	Name        string          `json:"name"`
	Permissions json.RawMessage `json:"permissions,omitempty"`
}

// HardwareListParams defines parameters for HardwareList.
type HardwareListParams struct {
	// Limit Specify the number of results you wish to return. Defaults to 50, but we have it set to 2 by default so the API explorer doesn't scroll forever.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search A text string to search the assets data for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderNumber Return only assets associated with a specific order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty"`

	// Sort Specify the column name you wish to sort by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Specify the order (asc or desc) you wish to order by on your sort column
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// ModelId Optionally restrict asset results to this asset model ID
	ModelId *int32 `form:"model_id,omitempty" json:"model_id,omitempty"`

	// CategoryId Optionally restrict asset results to this status label ID
	CategoryId *int32 `form:"category_id,omitempty" json:"category_id,omitempty"`

	// ManufacturerId Optionally restrict asset results to this asset model ID
	ManufacturerId *int32 `form:"manufacturer_id,omitempty" json:"manufacturer_id,omitempty"`

	// CompanyId Optionally restrict asset results to this company ID
	CompanyId *int32 `form:"company_id,omitempty" json:"company_id,omitempty"`

	// LocationId Optionally restrict asset results to this location ID
	LocationId *int32 `form:"location_id,omitempty" json:"location_id,omitempty"`

	// Status Optionally restrict asset results to one of these status types: RTD, Deployed, Undeployable, Deleted, Archived, Requestable
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// StatusId Optionally restrict asset results to this status label ID
	StatusId *int32 `form:"status_id,omitempty" json:"status_id,omitempty"`
}

// HardwareCreateJSONBody defines parameters for HardwareCreate.
type HardwareCreateJSONBody struct {
	Archived *bool `json:"archived,omitempty"`

	// AssetTag The asset tag of the asset. If auto-incrementing is enabled in the settings, this is not required and will be generated.
	AssetTag   string `json:"asset_tag"`
	Byod       *bool  `json:"byod,omitempty"`
	Depreciate *bool  `json:"depreciate,omitempty"`

	// Image data:@[mime];base64,[base64encodeddata]
	Image         *openapi_types.Date `json:"image,omitempty"`
	LastAuditDate *openapi_types.Date `json:"last_audit_date,omitempty"`
	LocationId    *int32              `json:"location_id,omitempty"`

	// ModelId The id of the related asset model
	ModelId int32 `json:"model_id"`

	// Name Asset name
	Name         *string             `json:"name,omitempty"`
	Notes        *string             `json:"notes,omitempty"`
	OrderNumber  *string             `json:"order_number,omitempty"`
	PurchaseCost *float32            `json:"purchase_cost,omitempty"`
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`
	Requestable  *bool               `json:"requestable,omitempty"`

	// RtdLocationId The corresponding location_id from a location in the locations table that should indicate where the item is when it's NOT checked out to someone
	RtdLocationId *int32  `json:"rtd_location_id,omitempty"`
	Serial        *string `json:"serial,omitempty"`

	// StatusId The id of the related status label
	StatusId       int32  `json:"status_id"`
	SupplierId     *int32 `json:"supplier_id,omitempty"`
	WarrantyMonths *int32 `json:"warranty_months,omitempty"`
}

// HardwareauditJSONBody defines parameters for Hardwareaudit.
type HardwareauditJSONBody struct {
	// AssetTag The asset tag of the asset you wish to audit
	AssetTag string `json:"asset_tag"`

	// LocationId ID of the location you want to associate with the audit
	LocationId *int32 `json:"location_id,omitempty"`

	// NextAuditDate The desired next audit date for the asset. If unset, the default audit interval will be used instead
	NextAuditDate *openapi_types.Date `json:"next_audit_date,omitempty"`
}

// HardwareBySerialParams defines parameters for HardwareBySerial.
type HardwareBySerialParams struct {
	// Deleted true | false to include deleted items in your results
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// HardwareByAssetTagParams defines parameters for HardwareByAssetTag.
type HardwareByAssetTagParams struct {
	// Deleted true | false to include deleted items in your results
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// HardwarePartialUpdateJSONBody defines parameters for HardwarePartialUpdate.
type HardwarePartialUpdateJSONBody struct {
	// Archived Whether or not the asset is archived. Archived assets cannot be checked out and do not show up in the deployable asset screens
	Archived *bool `json:"archived,omitempty"`

	// AssetTag Unique asset tag of the asset
	AssetTag *string `json:"asset_tag,omitempty"`

	// AssignedTo The id of the user the asset is currently checked out to
	AssignedTo *int32 `json:"assigned_to,omitempty"`
	Byod       *int32 `json:"byod,omitempty"`

	// CompanyId The id of an associated company id
	CompanyId *int32 `json:"company_id,omitempty"`

	// LastCheckout Date the asset was last checked out
	LastCheckout *openapi_types.Date `json:"last_checkout,omitempty"`
	LocationId   *string             `json:"location_id,omitempty"`

	// ModelId The id of the associated asset model id
	ModelId *int32 `json:"model_id,omitempty"`

	// Name Asset name
	Name *string `json:"name,omitempty"`

	// Notes Asset notes
	Notes *string `json:"notes,omitempty"`

	// OrderNumber Order number for the asset
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Purchase cost of the asset, without a currency symbol
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date of asset purchase
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`

	// Requestable Whether or not the asset can be requested by users with the permission to request assets
	Requestable *bool `json:"requestable,omitempty"`

	// RtdLocationId The id that corresponds to the location where the asset is usually located when not checked out
	RtdLocationId *int32 `json:"rtd_location_id,omitempty"`

	// Serial Serial number of the asset
	Serial *string `json:"serial,omitempty"`

	// StatusId The id of the corresponding status label
	StatusId *int32 `json:"status_id,omitempty"`

	// WarrantyMonths Number of months for the asset warranty
	WarrantyMonths *int32 `json:"warranty_months,omitempty"`
}

// HardwareUpdateJSONBody defines parameters for HardwareUpdate.
type HardwareUpdateJSONBody struct {
	// Archived Whether or not the asset is archived. Archived assets cannot be checked out and do not show up in the deployable asset screens
	Archived *bool `json:"archived,omitempty"`

	// AssetTag Unique asset tag of the asset
	AssetTag string `json:"asset_tag"`

	// AssignedTo The id of the user the asset is currently checked out to
	AssignedTo *int32 `json:"assigned_to,omitempty"`
	Byod       *int32 `json:"byod,omitempty"`

	// CompanyId The id of an associated company id
	CompanyId *int32              `json:"company_id,omitempty"`
	Image     *openapi_types.File `json:"image,omitempty"`

	// LastCheckout Date the asset was last checked out
	LastCheckout *openapi_types.Date `json:"last_checkout,omitempty"`
	LocationId   *int32              `json:"location_id,omitempty"`

	// ModelId The id of the associated asset model id
	ModelId int32 `json:"model_id"`

	// Name Asset name
	Name *string `json:"name,omitempty"`

	// Notes Asset notes
	Notes *string `json:"notes,omitempty"`

	// OrderNumber Order number for the asset
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Purchase cost of the asset, without a currency symbol
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date of asset purchase
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`

	// Requestable Whether or not the asset can be requested by users with the permission to request assets
	Requestable *bool `json:"requestable,omitempty"`

	// RtdLocationId The id that corresponds to the location where the asset is usually located when not checked out
	RtdLocationId *int32 `json:"rtd_location_id,omitempty"`

	// Serial Serial number of the asset
	Serial *string `json:"serial,omitempty"`

	// StatusId The id of the corresponding status label
	StatusId int32 `json:"status_id"`

	// WarrantyMonths Number of months for the asset warranty
	WarrantyMonths *int32 `json:"warranty_months,omitempty"`
}

// HardwareCheckinJSONBody defines parameters for HardwareCheckin.
type HardwareCheckinJSONBody struct {
	// LocationId Updated Location for this item.
	LocationId *string `json:"location_id,omitempty"`
	Name       *string `json:"name,omitempty"`

	// Note Note about the checkin
	Note     *string `json:"note,omitempty"`
	StatusId int32   `json:"status_id"`
}

// HardwareCheckoutJSONBody defines parameters for HardwareCheckout.
type HardwareCheckoutJSONBody struct {
	// AssignedAsset The asset ID to associate the asset to. Required if `checkout_to_type` is set to `asset`
	AssignedAsset *int32 `json:"assigned_asset,omitempty"`

	// AssignedLocation The location ID to check the asset out to. Required if `checkout_to_type` is set to `location`
	AssignedLocation *int32 `json:"assigned_location,omitempty"`

	// AssignedUser The ID of the user to check the asset out to. Required if `checkout_to_type` is set to `user`
	AssignedUser *int32 `json:"assigned_user,omitempty"`

	// CheckoutAt Optional date to override the checkout time of now
	CheckoutAt *openapi_types.Date `json:"checkout_at,omitempty"`

	// CheckoutToType Type of entity the asset is being checked out to: user, asset, or location
	CheckoutToType HardwareCheckoutJSONBodyCheckoutToType `json:"checkout_to_type"`

	// ExpectedCheckin Optional date the asset is expected to be checked in
	ExpectedCheckin *openapi_types.Date `json:"expected_checkin,omitempty"`

	// Name Optional new asset name. This is useful for changing the asset's name on new checkout, for example, an asset that was named "Anna's Macbook Pro" could be renamed on the fly when it's checked out to Elizabeth, to "Beth's Macbook Pro"
	Name *string `json:"name,omitempty"`

	// Note Optional note about the checkout
	Note *string `json:"note,omitempty"`

	// StatusId Valid status ID
	StatusId int32 `json:"status_id"`
}

// HardwareCheckoutJSONBodyCheckoutToType defines parameters for HardwareCheckout.
type HardwareCheckoutJSONBodyCheckoutToType string

// LicensesParams defines parameters for Licenses.
type LicensesParams struct {
	Name       *string `form:"name,omitempty" json:"name,omitempty"`
	ProductKey *string `form:"product_key,omitempty" json:"product_key,omitempty"`

	// Limit Specify the number of results you wish to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search A text string to search the assets data for
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderNumber Return only assets associated with a specific order number
	OrderNumber *string `form:"order_number,omitempty" json:"order_number,omitempty"`

	// Sort Specify the column name you wish to sort by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Specify the order (asc or desc) you wish to order by on your sort column
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Expand Whether to include detailed information on categories, etc (true) or just the text name (false)
	Expand        *string `form:"expand,omitempty" json:"expand,omitempty"`
	PurchaseOrder *string `form:"purchase_order,omitempty" json:"purchase_order,omitempty"`

	// LicenseName Name of the person on the license
	LicenseName *string `form:"license_name,omitempty" json:"license_name,omitempty"`

	// LicenseEmail Email address associated with license
	LicenseEmail *string `form:"license_email,omitempty" json:"license_email,omitempty"`

	// ManufacturerId Manufacturer ID
	ManufacturerId *int32 `form:"manufacturer_id,omitempty" json:"manufacturer_id,omitempty"`

	// SupplierId Supplier ID
	SupplierId *int32 `form:"supplier_id,omitempty" json:"supplier_id,omitempty"`

	// CategoryId Category ID
	CategoryId *int32 `form:"category_id,omitempty" json:"category_id,omitempty"`

	// DepreciationId Depreciation ID
	DepreciationId *int32 `form:"depreciation_id,omitempty" json:"depreciation_id,omitempty"`

	// Maintained true / false
	Maintained *bool `form:"maintained,omitempty" json:"maintained,omitempty"`

	// Deleted Set to true to return deleted licenses
	Deleted *string `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// TestinputJSONBody defines parameters for Testinput.
type TestinputJSONBody struct {
	// CompanyId Id number of company license belongs to
	CompanyId *int32 `json:"company_id,omitempty"`

	// ExpirationDate Date of license expiration
	ExpirationDate *openapi_types.Date `json:"expiration_date,omitempty"`

	// LicenseEmail Email address associated with license
	LicenseEmail *string `json:"license_email,omitempty"`

	// LicenseName Name of license contact person
	LicenseName *string `json:"license_name,omitempty"`

	// Maintained Maintained status of license.
	Maintained *bool `json:"maintained,omitempty"`

	// ManufacturerId ID number of manufacturer of license.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// Name Name of license being created
	Name string `json:"name"`

	// Notes License Notes
	Notes *string `json:"notes,omitempty"`

	// OrderNumber Order number of license purchase
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of license
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date of license purchase
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`

	// PurchaseOrder Purchase Order #
	PurchaseOrder *string `json:"purchase_order,omitempty"`

	// Reassignable Is license reassignable?
	Reassignable *bool `json:"reassignable,omitempty"`

	// Seats Number of license seats owned.
	Seats  int32   `json:"seats"`
	Serial *string `json:"serial,omitempty"`

	// SupplierId ID number of license supplier
	SupplierId *int32 `json:"supplier_id,omitempty"`

	// TerminationDate Termination date for license.
	TerminationDate *openapi_types.Date `json:"termination_date,omitempty"`
}

// Licensesid2JSONBody defines parameters for Licensesid2.
type Licensesid2JSONBody struct {
	// CompanyId Id number of company license belongs to
	CompanyId *int32 `json:"company_id,omitempty"`

	// ExpirationDate Date of license expiration
	ExpirationDate *openapi_types.Date `json:"expiration_date,omitempty"`

	// LicenseEmail Email address associated with license
	LicenseEmail *string `json:"license_email,omitempty"`

	// LicenseName Name of license contact person
	LicenseName *string `json:"license_name,omitempty"`

	// Maintained Maintained status of license.
	Maintained *bool `json:"maintained,omitempty"`

	// ManufacturerId ID number of manufacturer of license.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// Name Name of license being created
	Name *string `json:"name,omitempty"`

	// Notes License Notes
	Notes *string `json:"notes,omitempty"`

	// OrderNumber Order number of license purchase
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of license
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date of license purchase
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`

	// PurchaseOrder Purchase Order #
	PurchaseOrder *string `json:"purchase_order,omitempty"`

	// Reassignable Is license reassignable?
	Reassignable *bool `json:"reassignable,omitempty"`

	// Seats Number of license seats owned.
	Seats *int32 `json:"seats,omitempty"`

	// Serial Product key of the license
	Serial *string `json:"serial,omitempty"`

	// SupplierId ID number of license supplier
	SupplierId *int32 `json:"supplier_id,omitempty"`

	// TerminationDate Termination date for license.
	TerminationDate *openapi_types.Date `json:"termination_date,omitempty"`
}

// Licensesid1JSONBody defines parameters for Licensesid1.
type Licensesid1JSONBody struct {
	// CompanyId Id number of company license belongs to
	CompanyId *int32 `json:"company_id,omitempty"`

	// ExpirationDate Date of license expiration
	ExpirationDate *openapi_types.Date `json:"expiration_date,omitempty"`

	// LicenseEmail Email address associated with license
	LicenseEmail *string `json:"license_email,omitempty"`

	// LicenseName Name of license contact person
	LicenseName *string `json:"license_name,omitempty"`

	// Maintained Maintained status of license.
	Maintained *bool `json:"maintained,omitempty"`

	// ManufacturerId ID number of manufacturer of license.
	ManufacturerId *int32 `json:"manufacturer_id,omitempty"`

	// Name Name of license being created
	Name *string `json:"name,omitempty"`

	// Notes License Notes
	Notes *string `json:"notes,omitempty"`

	// OrderNumber Order number of license purchase
	OrderNumber *string `json:"order_number,omitempty"`

	// PurchaseCost Cost of license
	PurchaseCost *float32 `json:"purchase_cost,omitempty"`

	// PurchaseDate Date of license purchase
	PurchaseDate *openapi_types.Date `json:"purchase_date,omitempty"`

	// PurchaseOrder Purchase Order #
	PurchaseOrder *string `json:"purchase_order,omitempty"`

	// Reassignable Is license reassignable?
	Reassignable *bool `json:"reassignable,omitempty"`

	// Seats Number of license seats owned.
	Seats *int32 `json:"seats,omitempty"`

	// Serial Product key of the license
	Serial *string `json:"serial,omitempty"`

	// SupplierId ID number of license supplier
	SupplierId *int32 `json:"supplier_id,omitempty"`

	// TerminationDate Termination date for license.
	TerminationDate *openapi_types.Date `json:"termination_date,omitempty"`
}

// LicensesidseatsseatId2JSONBody defines parameters for LicensesidseatsseatId2.
type LicensesidseatsseatId2JSONBody struct {
	// AssetId The Asset ID to assign this license to
	AssetId *int32 `json:"asset_id,omitempty"`

	// AssignedTo The User ID to assign the license to
	AssignedTo *int32 `json:"assigned_to,omitempty"`
}

// LicensesidseatsseatId1JSONBody defines parameters for LicensesidseatsseatId1.
type LicensesidseatsseatId1JSONBody struct {
	// AssetId The Asset ID to assign this license to
	AssetId *int32 `json:"asset_id,omitempty"`

	// AssignedTo The User ID to assign the license to
	AssignedTo *int32 `json:"assigned_to,omitempty"`
}

// LocationsParams defines parameters for Locations.
type LocationsParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use when retrieving results (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Search string
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Field to order by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order    *string `form:"order,omitempty" json:"order,omitempty"`
	Address  *string `form:"address,omitempty" json:"address,omitempty"`
	Address2 *string `form:"address2,omitempty" json:"address2,omitempty"`
	City     *string `form:"city,omitempty" json:"city,omitempty"`
	Zip      *string `form:"zip,omitempty" json:"zip,omitempty"`
	Country  *string `form:"country,omitempty" json:"country,omitempty"`
}

// Locations2JSONBody defines parameters for Locations2.
type Locations2JSONBody struct {
	Address   *string `json:"address,omitempty"`
	Address2  *string `json:"address2,omitempty"`
	City      *string `json:"city,omitempty"`
	Country   *string `json:"country,omitempty"`
	Currency  *string `json:"currency,omitempty"`
	LdapOu    *string `json:"ldap_ou,omitempty"`
	ManagerId *int32  `json:"manager_id,omitempty"`
	Name      string  `json:"name"`
	ParentId  *int32  `json:"parent_id,omitempty"`
	State     *string `json:"state,omitempty"`
	Zip       *string `json:"zip,omitempty"`
}

// LocationsidJSONBody defines parameters for Locationsid.
type LocationsidJSONBody struct {
	Address   *string `json:"address,omitempty"`
	Address2  *string `json:"address2,omitempty"`
	City      *string `json:"city,omitempty"`
	Country   *string `json:"country,omitempty"`
	Currency  *string `json:"currency,omitempty"`
	LdapOu    *string `json:"ldap_ou,omitempty"`
	ManagerId *int32  `json:"manager_id,omitempty"`
	Name      *string `json:"name,omitempty"`
	ParentId  *int32  `json:"parent_id,omitempty"`
	State     *string `json:"state,omitempty"`
	Zip       *string `json:"zip,omitempty"`
}

// Locations3JSONBody defines parameters for Locations3.
type Locations3JSONBody struct {
	Address   *string `json:"address,omitempty"`
	Address2  *string `json:"address2,omitempty"`
	City      *string `json:"city,omitempty"`
	Country   *string `json:"country,omitempty"`
	Currency  *string `json:"currency,omitempty"`
	LdapOu    *string `json:"ldap_ou,omitempty"`
	ManagerId *int32  `json:"manager_id,omitempty"`
	Name      string  `json:"name"`
	ParentId  *int32  `json:"parent_id,omitempty"`
	State     *string `json:"state,omitempty"`
	Zip       *string `json:"zip,omitempty"`
}

// MaintenancesParams defines parameters for Maintenances.
type MaintenancesParams struct {
	// Limit Number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use when retrieving results (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Search string
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Field to order by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// AssetId Asset ID of the asset you'd like to return maintenances for
	AssetId *int32 `form:"asset_id,omitempty" json:"asset_id,omitempty"`
}

// Maintenances1JSONBody defines parameters for Maintenances1.
type Maintenances1JSONBody struct {
	AssetId              int32                                     `json:"asset_id"`
	AssetMaintenanceType Maintenances1JSONBodyAssetMaintenanceType `json:"asset_maintenance_type"`
	CompletionDate       *openapi_types.Date                       `json:"completion_date,omitempty"`
	Cost                 *float32                                  `json:"cost,omitempty"`
	IsWarranty           *bool                                     `json:"is_warranty,omitempty"`
	Notes                *string                                   `json:"notes,omitempty"`
	StartDate            openapi_types.Date                        `json:"start_date"`
	SupplierId           int32                                     `json:"supplier_id"`
	Title                string                                    `json:"title"`
}

// Maintenances1JSONBodyAssetMaintenanceType defines parameters for Maintenances1.
type Maintenances1JSONBodyAssetMaintenanceType string

// ManufacturersParams defines parameters for Manufacturers.
type ManufacturersParams struct {
	// Name Name of the manufacturer
	Name *string `form:"name,omitempty" json:"name,omitempty"`
	Url  *string `form:"url,omitempty" json:"url,omitempty"`

	// SupportUrl Support URL
	SupportUrl *string `form:"support_url,omitempty" json:"support_url,omitempty"`

	// SupportPhone Support phone number
	SupportPhone *string `form:"support_phone,omitempty" json:"support_phone,omitempty"`

	// SupportEmail Support email
	SupportEmail *string `form:"support_email,omitempty" json:"support_email,omitempty"`
}

// Manufacturers1JSONBody defines parameters for Manufacturers1.
type Manufacturers1JSONBody struct {
	// Name Manufacturer name
	Name string `json:"name"`
}

// ManufacturersidJSONBody defines parameters for Manufacturersid.
type ManufacturersidJSONBody struct {
	// Name Model name
	Name string `json:"name"`
}

// Manufacturersid3JSONBody defines parameters for Manufacturersid3.
type Manufacturersid3JSONBody struct {
	// Name Model name
	Name string `json:"name"`
}

// ModelsParams defines parameters for Models.
type ModelsParams struct {
	// Limit Number of records to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use when retrieving results (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search Search string
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Field to order by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order *string `form:"order,omitempty" json:"order,omitempty"`
}

// Models1JSONBody defines parameters for Models1.
type Models1JSONBody struct {
	CategoryId int32 `json:"category_id"`

	// Eol Number of months until this model's assets are considered EOL
	Eol *int32 `json:"eol,omitempty"`

	// FieldsetId The ID of an EXISTING custom fieldset
	FieldsetId     *int32 `json:"fieldset_id,omitempty"`
	ManufacturerId int32  `json:"manufacturer_id"`

	// ModelNumber Part or model number of the model
	ModelNumber *string `json:"model_number,omitempty"`

	// Name Model name
	Name string `json:"name"`
}

// Modelsid2JSONBody defines parameters for Modelsid2.
type Modelsid2JSONBody struct {
	CategoryId     *int32  `json:"category_id,omitempty"`
	DepreciationId *int32  `json:"depreciation_id,omitempty"`
	FieldsetId     *int32  `json:"fieldset_id,omitempty"`
	ManufacturerId *int32  `json:"manufacturer_id,omitempty"`
	ModelNumber    *string `json:"model_number,omitempty"`
	Name           *string `json:"name,omitempty"`
	Notes          *string `json:"notes,omitempty"`
	Requestable    *bool   `json:"requestable,omitempty"`
}

// Modelsid1JSONBody defines parameters for Modelsid1.
type Modelsid1JSONBody struct {
	CategoryId     int32  `json:"category_id"`
	DepreciationId *int32 `json:"depreciation_id,omitempty"`

	// Eol Number of months until this model's assets are considered EOL
	Eol *int32 `json:"eol,omitempty"`

	// FieldsetId The ID of an EXISTING custom fieldset
	FieldsetId     *int32 `json:"fieldset_id,omitempty"`
	ManufacturerId int32  `json:"manufacturer_id"`

	// ModelNumber Part or model number of the model
	ModelNumber *string `json:"model_number,omitempty"`

	// Name Model name
	Name        string  `json:"name"`
	Notes       *string `json:"notes,omitempty"`
	Requestable *bool   `json:"requestable,omitempty"`
}

// ReportsactivityParams defines parameters for Reportsactivity.
type ReportsactivityParams struct {
	// Limit Specify the number of results you wish to return. Defaults to 50, but we have it set to 2 by default so the API explorer doesn't scroll forever.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset from the start of results to use in order to page through the result set
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search String to search on
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// TargetType The type of target (entity something is checked out to) you're searching against. `App\Models\User`, etc. Required when passing target_id.
	TargetType *string `form:"target_type,omitempty" json:"target_type,omitempty"`

	// TargetId The ID of the target you're querying against. Required if passing target_type
	TargetId *int32 `form:"target_id,omitempty" json:"target_id,omitempty"`

	// ItemType The type of item you're searching against. `App\Models\Asset`, etc. Required when passing item_id.
	ItemType *ReportsactivityParamsItemType `form:"item_type,omitempty" json:"item_type,omitempty"`

	// ItemId The ID of the item you're querying against. Required if passing item_type
	ItemId *int32 `form:"item_id,omitempty" json:"item_id,omitempty"`

	// ActionType The action type you'e querying against. Example values here are: "add seats", "checkin from", "checkout", "update"
	ActionType *ReportsactivityParamsActionType `form:"action_type,omitempty" json:"action_type,omitempty"`

	// Order Ascending or descending order (defaults to desc if no value is given)
	Order *ReportsactivityParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Sort What column the results should be sorted by (defaults to created_at date if no value is given)
	Sort *ReportsactivityParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// ReportsactivityParamsItemType defines parameters for Reportsactivity.
type ReportsactivityParamsItemType string

// ReportsactivityParamsActionType defines parameters for Reportsactivity.
type ReportsactivityParamsActionType string

// ReportsactivityParamsOrder defines parameters for Reportsactivity.
type ReportsactivityParamsOrder string

// ReportsactivityParamsSort defines parameters for Reportsactivity.
type ReportsactivityParamsSort string

// StatuslabelsParams defines parameters for Statuslabels.
type StatuslabelsParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Number of records to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use when retrieving results (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Search String to search on
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Field to order by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order      *string                       `form:"order,omitempty" json:"order,omitempty"`
	StatusType *StatuslabelsParamsStatusType `form:"status_type,omitempty" json:"status_type,omitempty"`
}

// StatuslabelsParamsStatusType defines parameters for Statuslabels.
type StatuslabelsParamsStatusType string

// Statuslabels1JSONBody defines parameters for Statuslabels1.
type Statuslabels1JSONBody struct {
	// Color Hex code showing what color the status label should be on the pie chart in the dashboard
	Color *string `json:"color,omitempty"`

	// DefaultLabel 1 or 0 - determine whether it should be bubbled up to the top of the list of available statuses
	DefaultLabel *bool   `json:"default_label,omitempty"`
	Name         string  `json:"name"`
	Notes        *string `json:"notes,omitempty"`

	// ShowInNav 1 or 0 - determine whether the status label should show in the left-side nav of the web GUI
	ShowInNav *bool                     `json:"show_in_nav,omitempty"`
	Type      Statuslabels1JSONBodyType `json:"type"`
}

// Statuslabels1JSONBodyType defines parameters for Statuslabels1.
type Statuslabels1JSONBodyType string

// Statuslabelsid3JSONBody defines parameters for Statuslabelsid3.
type Statuslabelsid3JSONBody struct {
	// Color Hex code showing what color the status label should be on the pie chart in the dashboard
	Color *string `json:"color,omitempty"`

	// DefaultLabel 1 or 0 - determine whether it should be bubbled up to the top of the list of available statuses
	DefaultLabel *bool   `json:"default_label,omitempty"`
	Name         string  `json:"name"`
	Notes        *string `json:"notes,omitempty"`

	// ShowInNav 1 or 0 - determine whether the status label should show in the left-side nav of the web GUI
	ShowInNav *bool                        `json:"show_in_nav,omitempty"`
	Type      *Statuslabelsid3JSONBodyType `json:"type,omitempty"`
}

// Statuslabelsid3JSONBodyType defines parameters for Statuslabelsid3.
type Statuslabelsid3JSONBodyType string

// Statuslabelsid2JSONBody defines parameters for Statuslabelsid2.
type Statuslabelsid2JSONBody struct {
	// Color Hex code showing what color the status label should be on the pie chart in the dashboard
	Color *string `json:"color,omitempty"`

	// DefaultLabel 1 or 0 - determine whether it should be bubbled up to the top of the list of available statuses
	DefaultLabel *bool   `json:"default_label,omitempty"`
	Name         string  `json:"name"`
	Notes        *string `json:"notes,omitempty"`

	// ShowInNav 1 or 0 - determine whether the status label should show in the left-side nav of the web GUI
	ShowInNav *bool                       `json:"show_in_nav,omitempty"`
	Type      Statuslabelsid2JSONBodyType `json:"type"`
}

// Statuslabelsid2JSONBodyType defines parameters for Statuslabelsid2.
type Statuslabelsid2JSONBodyType string

// SuppliersParams defines parameters for Suppliers.
type SuppliersParams struct {
	Name     *string `form:"name,omitempty" json:"name,omitempty"`
	Address  *string `form:"address,omitempty" json:"address,omitempty"`
	Address2 *string `form:"address2,omitempty" json:"address2,omitempty"`
	City     *string `form:"city,omitempty" json:"city,omitempty"`
	Zip      *string `form:"zip,omitempty" json:"zip,omitempty"`
	Country  *string `form:"country,omitempty" json:"country,omitempty"`
	Fax      *string `form:"fax,omitempty" json:"fax,omitempty"`
	Email    *string `form:"email,omitempty" json:"email,omitempty"`
	Url      *string `form:"url,omitempty" json:"url,omitempty"`
	Notes    *string `form:"notes,omitempty" json:"notes,omitempty"`
}

// UsersParams defines parameters for Users.
type UsersParams struct {
	// Search String to search on
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Number of records to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset to use when retrieving results (useful in pagination)
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Field to order by
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (asc or desc)
	Order        *string `form:"order,omitempty" json:"order,omitempty"`
	FirstName    *string `form:"first_name,omitempty" json:"first_name,omitempty"`
	LastName     *string `form:"last_name,omitempty" json:"last_name,omitempty"`
	Username     *string `form:"username,omitempty" json:"username,omitempty"`
	Email        *string `form:"email,omitempty" json:"email,omitempty"`
	EmployeeNum  *string `form:"employee_num,omitempty" json:"employee_num,omitempty"`
	State        *string `form:"state,omitempty" json:"state,omitempty"`
	Zip          *string `form:"zip,omitempty" json:"zip,omitempty"`
	Country      *string `form:"country,omitempty" json:"country,omitempty"`
	GroupId      *int32  `form:"group_id,omitempty" json:"group_id,omitempty"`
	DepartmentId *int32  `form:"department_id,omitempty" json:"department_id,omitempty"`
	CompanyId    *int32  `form:"company_id,omitempty" json:"company_id,omitempty"`
	LocationId   *int32  `form:"location_id,omitempty" json:"location_id,omitempty"`

	// Deleted Set this to "true" if you want to return only deleted users
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`

	// All Set this to "true" if you want both deleted and active users
	All *bool `form:"all,omitempty" json:"all,omitempty"`

	// LdapImport Whether the user was imported/synched with LDAP - should be 0 or 1
	LdapImport *bool `form:"ldap_import,omitempty" json:"ldap_import,omitempty"`

	// AssetsCount Number of checked out assets
	AssetsCount *int32 `form:"assets_count,omitempty" json:"assets_count,omitempty"`

	// LicensesCount Number of checked out licenses
	LicensesCount *int32 `form:"licenses_count,omitempty" json:"licenses_count,omitempty"`

	// AccessoriesCount Number of checked out accessories
	AccessoriesCount *int32 `form:"accessories_count,omitempty" json:"accessories_count,omitempty"`

	// ConsumablesCount Number of checked out consumables
	ConsumablesCount *int32 `form:"consumables_count,omitempty" json:"consumables_count,omitempty"`

	// Remote Whether the user is marked as a remote worker or not (should be 0 or 1)
	Remote *bool `form:"remote,omitempty" json:"remote,omitempty"`

	// Vip Whether or not the user is marked as a VIP (1 or 0 for true or false, respectively)
	Vip       *int32              `form:"vip,omitempty" json:"vip,omitempty"`
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// Users2JSONBody defines parameters for Users2.
type Users2JSONBody struct {
	Activated    *bool               `json:"activated,omitempty"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	DepartmentId *int32              `json:"department_id,omitempty"`
	Email        *string             `json:"email,omitempty"`
	EmployeeNum  *string             `json:"employee_num,omitempty"`
	EndDate      *openapi_types.Date `json:"end_date,omitempty"`
	FirstName    string              `json:"first_name"`

	// Groups ID of the group or groups the user should be associated with. This can be a single ID number, or an array, like [1,2,3]
	Groups     *int32  `json:"groups,omitempty"`
	Jobtitle   *string `json:"jobtitle,omitempty"`
	LastName   *string `json:"last_name,omitempty"`
	LocationId *int32  `json:"location_id,omitempty"`
	ManagerId  *int32  `json:"manager_id,omitempty"`
	Notes      *string `json:"notes,omitempty"`
	Password   string  `json:"password"`

	// PasswordConfirmation Needs to match the 'password' exactly
	PasswordConfirmation string  `json:"password_confirmation"`
	Permissions          *string `json:"permissions,omitempty"`
	Phone                *string `json:"phone,omitempty"`

	// Remote Whether or not the user is a remote worker
	Remote            *bool               `json:"remote,omitempty"`
	StartDate         *openapi_types.Date `json:"start_date,omitempty"`
	TwoFactorEnrolled *bool               `json:"two_factor_enrolled,omitempty"`
	TwoFactorOptin    *bool               `json:"two_factor_optin,omitempty"`
	Username          string              `json:"username"`
	Vip               *bool               `json:"vip,omitempty"`
}

// Users2Params defines parameters for Users2.
type Users2Params struct {
	Accept *string `json:"Accept,omitempty"`
}

// Users3JSONBody defines parameters for Users3.
type Users3JSONBody struct {
	Activated    *bool               `json:"activated,omitempty"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	DepartmentId *int32              `json:"department_id,omitempty"`
	Email        *string             `json:"email,omitempty"`
	EmployeeNum  *string             `json:"employee_num,omitempty"`
	EndDate      *openapi_types.Date `json:"end_date,omitempty"`
	FirstName    *string             `json:"first_name,omitempty"`

	// Groups ID of the group or groups the user should be associated with. This can be a single ID number, or an array, like [1,2,3]
	Groups            *int32              `json:"groups,omitempty"`
	Jobtitle          *string             `json:"jobtitle,omitempty"`
	LastName          *string             `json:"last_name,omitempty"`
	LocationId        *int32              `json:"location_id,omitempty"`
	ManagerId         *int32              `json:"manager_id,omitempty"`
	Notes             *string             `json:"notes,omitempty"`
	Password          *string             `json:"password,omitempty"`
	Permissions       *string             `json:"permissions,omitempty"`
	Phone             *string             `json:"phone,omitempty"`
	Remote            *bool               `json:"remote,omitempty"`
	StartDate         *openapi_types.Date `json:"start_date,omitempty"`
	TwoFactorEnrolled *bool               `json:"two_factor_enrolled,omitempty"`
	TwoFactorOptin    *bool               `json:"two_factor_optin,omitempty"`
	Username          *string             `json:"username,omitempty"`
	Vip               *int32              `json:"vip,omitempty"`
}

// Usersid2JSONBody defines parameters for Usersid2.
type Usersid2JSONBody struct {
	Activated    *bool               `json:"activated,omitempty"`
	CompanyId    *int32              `json:"company_id,omitempty"`
	DepartmentId *int32              `json:"department_id,omitempty"`
	Email        *string             `json:"email,omitempty"`
	EmployeeNum  *string             `json:"employee_num,omitempty"`
	EndDate      *openapi_types.Date `json:"end_date,omitempty"`
	FirstName    *string             `json:"first_name,omitempty"`

	// Groups ID of the group or groups the user should be associated with. This can be a single ID number, or an array, like [1,2,3]
	Groups      *int32  `json:"groups,omitempty"`
	Jobtitle    *string `json:"jobtitle,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	LocationId  *int32  `json:"location_id,omitempty"`
	ManagerId   *int32  `json:"manager_id,omitempty"`
	Notes       *string `json:"notes,omitempty"`
	Password    *string `json:"password,omitempty"`
	Permissions *string `json:"permissions,omitempty"`
	Phone       *string `json:"phone,omitempty"`

	// Remote Whether or not the user is a remote worker (0 or 1)
	Remote            *bool               `json:"remote,omitempty"`
	StartDate         *openapi_types.Date `json:"start_date,omitempty"`
	TwoFactorEnrolled *bool               `json:"two_factor_enrolled,omitempty"`
	TwoFactorOptin    *bool               `json:"two_factor_optin,omitempty"`
	Username          *string             `json:"username,omitempty"`
	Vip               *int32              `json:"vip,omitempty"`
}

// Accessories1JSONRequestBody defines body for Accessories1 for application/json ContentType.
type Accessories1JSONRequestBody Accessories1JSONBody

// Accessoriesid2JSONRequestBody defines body for Accessoriesid2 for application/json ContentType.
type Accessoriesid2JSONRequestBody Accessoriesid2JSONBody

// Accessoriesid1JSONRequestBody defines body for Accessoriesid1 for application/json ContentType.
type Accessoriesid1JSONRequestBody Accessoriesid1JSONBody

// Accessoriesidcheckedout1JSONRequestBody defines body for Accessoriesidcheckedout1 for application/json ContentType.
type Accessoriesidcheckedout1JSONRequestBody Accessoriesidcheckedout1JSONBody

// Categories2JSONRequestBody defines body for Categories2 for application/json ContentType.
type Categories2JSONRequestBody Categories2JSONBody

// Categoriesid1JSONRequestBody defines body for Categoriesid1 for application/json ContentType.
type Categoriesid1JSONRequestBody Categoriesid1JSONBody

// CategoriesidJSONRequestBody defines body for Categoriesid for application/json ContentType.
type CategoriesidJSONRequestBody CategoriesidJSONBody

// Companies1JSONRequestBody defines body for Companies1 for application/json ContentType.
type Companies1JSONRequestBody Companies1JSONBody

// Companiesid2JSONRequestBody defines body for Companiesid2 for application/json ContentType.
type Companiesid2JSONRequestBody Companiesid2JSONBody

// Companiesid1JSONRequestBody defines body for Companiesid1 for application/json ContentType.
type Companiesid1JSONRequestBody Companiesid1JSONBody

// Components1JSONRequestBody defines body for Components1 for application/json ContentType.
type Components1JSONRequestBody Components1JSONBody

// Componentsid2JSONRequestBody defines body for Componentsid2 for application/json ContentType.
type Componentsid2JSONRequestBody Componentsid2JSONBody

// Componentsid1JSONRequestBody defines body for Componentsid1 for application/json ContentType.
type Componentsid1JSONRequestBody Componentsid1JSONBody

// ComponentsidcheckinJSONRequestBody defines body for Componentsidcheckin for application/json ContentType.
type ComponentsidcheckinJSONRequestBody ComponentsidcheckinJSONBody

// ComponentsidcheckoutJSONRequestBody defines body for Componentsidcheckout for application/json ContentType.
type ComponentsidcheckoutJSONRequestBody ComponentsidcheckoutJSONBody

// Consumables1JSONRequestBody defines body for Consumables1 for application/json ContentType.
type Consumables1JSONRequestBody Consumables1JSONBody

// Consumablesid1JSONRequestBody defines body for Consumablesid1 for application/json ContentType.
type Consumablesid1JSONRequestBody Consumablesid1JSONBody

// Consumables2JSONRequestBody defines body for Consumables2 for application/json ContentType.
type Consumables2JSONRequestBody Consumables2JSONBody

// ConsumablesidcheckoutJSONRequestBody defines body for Consumablesidcheckout for application/json ContentType.
type ConsumablesidcheckoutJSONRequestBody ConsumablesidcheckoutJSONBody

// Departments1JSONRequestBody defines body for Departments1 for application/json ContentType.
type Departments1JSONRequestBody Departments1JSONBody

// Departmentsid1JSONRequestBody defines body for Departmentsid1 for application/json ContentType.
type Departmentsid1JSONRequestBody Departmentsid1JSONBody

// DepartmentsEditJSONRequestBody defines body for DepartmentsEdit for application/json ContentType.
type DepartmentsEditJSONRequestBody DepartmentsEditJSONBody

// Fields2JSONRequestBody defines body for Fields2 for application/json ContentType.
type Fields2JSONRequestBody Fields2JSONBody

// Fieldsid2JSONRequestBody defines body for Fieldsid2 for application/json ContentType.
type Fieldsid2JSONRequestBody Fieldsid2JSONBody

// UpdateFieldsJSONRequestBody defines body for UpdateFields for application/json ContentType.
type UpdateFieldsJSONRequestBody UpdateFieldsJSONBody

// FieldsidassociateJSONRequestBody defines body for Fieldsidassociate for application/json ContentType.
type FieldsidassociateJSONRequestBody FieldsidassociateJSONBody

// FieldsiddisassociateJSONRequestBody defines body for Fieldsiddisassociate for application/json ContentType.
type FieldsiddisassociateJSONRequestBody FieldsiddisassociateJSONBody

// FieldsetsJSONRequestBody defines body for Fieldsets for application/json ContentType.
type FieldsetsJSONRequestBody FieldsetsJSONBody

// Fieldsetsid1JSONRequestBody defines body for Fieldsetsid1 for application/json ContentType.
type Fieldsetsid1JSONRequestBody Fieldsetsid1JSONBody

// Groupsid1JSONRequestBody defines body for Groupsid1 for application/json ContentType.
type Groupsid1JSONRequestBody Groupsid1JSONBody

// Groupsid4JSONRequestBody defines body for Groupsid4 for application/json ContentType.
type Groupsid4JSONRequestBody Groupsid4JSONBody

// Groupsid2JSONRequestBody defines body for Groupsid2 for application/json ContentType.
type Groupsid2JSONRequestBody Groupsid2JSONBody

// HardwareCreateJSONRequestBody defines body for HardwareCreate for application/json ContentType.
type HardwareCreateJSONRequestBody HardwareCreateJSONBody

// HardwareauditJSONRequestBody defines body for Hardwareaudit for application/json ContentType.
type HardwareauditJSONRequestBody HardwareauditJSONBody

// HardwarePartialUpdateJSONRequestBody defines body for HardwarePartialUpdate for application/json ContentType.
type HardwarePartialUpdateJSONRequestBody HardwarePartialUpdateJSONBody

// HardwareUpdateJSONRequestBody defines body for HardwareUpdate for application/json ContentType.
type HardwareUpdateJSONRequestBody HardwareUpdateJSONBody

// HardwareCheckinJSONRequestBody defines body for HardwareCheckin for application/json ContentType.
type HardwareCheckinJSONRequestBody HardwareCheckinJSONBody

// HardwareCheckoutJSONRequestBody defines body for HardwareCheckout for application/json ContentType.
type HardwareCheckoutJSONRequestBody HardwareCheckoutJSONBody

// TestinputJSONRequestBody defines body for Testinput for application/json ContentType.
type TestinputJSONRequestBody TestinputJSONBody

// Licensesid2JSONRequestBody defines body for Licensesid2 for application/json ContentType.
type Licensesid2JSONRequestBody Licensesid2JSONBody

// Licensesid1JSONRequestBody defines body for Licensesid1 for application/json ContentType.
type Licensesid1JSONRequestBody Licensesid1JSONBody

// LicensesidseatsseatId2JSONRequestBody defines body for LicensesidseatsseatId2 for application/json ContentType.
type LicensesidseatsseatId2JSONRequestBody LicensesidseatsseatId2JSONBody

// LicensesidseatsseatId1JSONRequestBody defines body for LicensesidseatsseatId1 for application/json ContentType.
type LicensesidseatsseatId1JSONRequestBody LicensesidseatsseatId1JSONBody

// Locations2JSONRequestBody defines body for Locations2 for application/json ContentType.
type Locations2JSONRequestBody Locations2JSONBody

// LocationsidJSONRequestBody defines body for Locationsid for application/json ContentType.
type LocationsidJSONRequestBody LocationsidJSONBody

// Locations3JSONRequestBody defines body for Locations3 for application/json ContentType.
type Locations3JSONRequestBody Locations3JSONBody

// Maintenances1JSONRequestBody defines body for Maintenances1 for application/json ContentType.
type Maintenances1JSONRequestBody Maintenances1JSONBody

// Manufacturers1JSONRequestBody defines body for Manufacturers1 for application/json ContentType.
type Manufacturers1JSONRequestBody Manufacturers1JSONBody

// ManufacturersidJSONRequestBody defines body for Manufacturersid for application/json ContentType.
type ManufacturersidJSONRequestBody ManufacturersidJSONBody

// Manufacturersid3JSONRequestBody defines body for Manufacturersid3 for application/json ContentType.
type Manufacturersid3JSONRequestBody Manufacturersid3JSONBody

// Models1JSONRequestBody defines body for Models1 for application/json ContentType.
type Models1JSONRequestBody Models1JSONBody

// Modelsid2JSONRequestBody defines body for Modelsid2 for application/json ContentType.
type Modelsid2JSONRequestBody Modelsid2JSONBody

// Modelsid1JSONRequestBody defines body for Modelsid1 for application/json ContentType.
type Modelsid1JSONRequestBody Modelsid1JSONBody

// Statuslabels1JSONRequestBody defines body for Statuslabels1 for application/json ContentType.
type Statuslabels1JSONRequestBody Statuslabels1JSONBody

// Statuslabelsid3JSONRequestBody defines body for Statuslabelsid3 for application/json ContentType.
type Statuslabelsid3JSONRequestBody Statuslabelsid3JSONBody

// Statuslabelsid2JSONRequestBody defines body for Statuslabelsid2 for application/json ContentType.
type Statuslabelsid2JSONRequestBody Statuslabelsid2JSONBody

// Users2JSONRequestBody defines body for Users2 for application/json ContentType.
type Users2JSONRequestBody Users2JSONBody

// Users3JSONRequestBody defines body for Users3 for application/json ContentType.
type Users3JSONRequestBody Users3JSONBody

// Usersid2JSONRequestBody defines body for Usersid2 for application/json ContentType.
type Usersid2JSONRequestBody Usersid2JSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Accessories request
	Accessories(ctx context.Context, params *AccessoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessories1WithBody request with any body
	Accessories1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Accessories1(ctx context.Context, body Accessories1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesid3 request
	Accessoriesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesid request
	Accessoriesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesid2WithBody request with any body
	Accessoriesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Accessoriesid2(ctx context.Context, id int32, body Accessoriesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesid1WithBody request with any body
	Accessoriesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Accessoriesid1(ctx context.Context, id int32, body Accessoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesidcheckedout request
	Accessoriesidcheckedout(ctx context.Context, id int32, params *AccessoriesidcheckedoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesidcheckin request
	Accessoriesidcheckin(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Accessoriesidcheckedout1WithBody request with any body
	Accessoriesidcheckedout1WithBody(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Accessoriesidcheckedout1(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, body Accessoriesidcheckedout1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Categories1 request
	Categories1(ctx context.Context, params *Categories1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Categories2WithBody request with any body
	Categories2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Categories2(ctx context.Context, body Categories2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Categoriesid2 request
	Categoriesid2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Categoriesid3 request
	Categoriesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Categoriesid1WithBody request with any body
	Categoriesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Categoriesid1(ctx context.Context, id int32, body Categoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CategoriesidWithBody request with any body
	CategoriesidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Categoriesid(ctx context.Context, id int32, body CategoriesidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companies request
	Companies(ctx context.Context, params *CompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companies1WithBody request with any body
	Companies1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Companies1(ctx context.Context, body Companies1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companiesid3 request
	Companiesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companiesid request
	Companiesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companiesid2WithBody request with any body
	Companiesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Companiesid2(ctx context.Context, id int32, body Companiesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Companiesid1WithBody request with any body
	Companiesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Companiesid1(ctx context.Context, id int32, body Companiesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Components request
	Components(ctx context.Context, params *ComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Components1WithBody request with any body
	Components1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Components1(ctx context.Context, body Components1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Componentsid3 request
	Componentsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Componentsid request
	Componentsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Componentsid2WithBody request with any body
	Componentsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Componentsid2(ctx context.Context, id int32, body Componentsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Componentsid1WithBody request with any body
	Componentsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Componentsid1(ctx context.Context, id int32, body Componentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Componentsidassets request
	Componentsidassets(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComponentsidcheckinWithBody request with any body
	ComponentsidcheckinWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Componentsidcheckin(ctx context.Context, id int32, body ComponentsidcheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComponentsidcheckoutWithBody request with any body
	ComponentsidcheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Componentsidcheckout(ctx context.Context, id int32, body ComponentsidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumables request
	Consumables(ctx context.Context, params *ConsumablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumables1WithBody request with any body
	Consumables1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Consumables1(ctx context.Context, body Consumables1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumablesid2 request
	Consumablesid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumablesid request
	Consumablesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumablesid1WithBody request with any body
	Consumablesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Consumablesid1(ctx context.Context, id int32, body Consumablesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Consumables2WithBody request with any body
	Consumables2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Consumables2(ctx context.Context, id int32, body Consumables2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConsumablesidcheckoutWithBody request with any body
	ConsumablesidcheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Consumablesidcheckout(ctx context.Context, id int32, body ConsumablesidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Departments request
	Departments(ctx context.Context, params *DepartmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Departments1WithBody request with any body
	Departments1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Departments1(ctx context.Context, body Departments1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Departmentsid2 request
	Departmentsid2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Departmentsid request
	Departmentsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Departmentsid1WithBody request with any body
	Departmentsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Departmentsid1(ctx context.Context, id int32, body Departmentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DepartmentsEditWithBody request with any body
	DepartmentsEditWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DepartmentsEdit(ctx context.Context, id int32, body DepartmentsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fields1 request
	Fields1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fields2WithBody request with any body
	Fields2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fields2(ctx context.Context, body Fields2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsid1 request
	Fieldsid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsid request
	Fieldsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsid2WithBody request with any body
	Fieldsid2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fieldsid2(ctx context.Context, id string, body Fieldsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFieldsWithBody request with any body
	UpdateFieldsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFields(ctx context.Context, id string, body UpdateFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FieldsidassociateWithBody request with any body
	FieldsidassociateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fieldsidassociate(ctx context.Context, id string, body FieldsidassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FieldsiddisassociateWithBody request with any body
	FieldsiddisassociateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fieldsiddisassociate(ctx context.Context, id string, body FieldsiddisassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fields request
	Fields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FieldsetsWithBody request with any body
	FieldsetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fieldsets(ctx context.Context, body FieldsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsetsid2 request
	Fieldsetsid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsetsid request
	Fieldsetsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsetsid1WithBody request with any body
	Fieldsetsid1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Fieldsetsid1(ctx context.Context, id string, body Fieldsetsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Fieldsetsidfields request
	Fieldsetsidfields(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groups1 request
	Groups1(ctx context.Context, params *Groups1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groupsid1WithBody request with any body
	Groupsid1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Groupsid1(ctx context.Context, body Groupsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groupsid3 request
	Groupsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groupsid request
	Groupsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groupsid4WithBody request with any body
	Groupsid4WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Groupsid4(ctx context.Context, id int32, body Groupsid4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Groupsid2WithBody request with any body
	Groupsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Groupsid2(ctx context.Context, id int32, body Groupsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareList request
	HardwareList(ctx context.Context, params *HardwareListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareCreateWithBody request with any body
	HardwareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HardwareCreate(ctx context.Context, body HardwareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Hardwareidrestore request
	Hardwareidrestore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareauditWithBody request with any body
	HardwareauditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Hardwareaudit(ctx context.Context, body HardwareauditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Hardwareauditdue request
	Hardwareauditdue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Hardwareauditoverdue request
	Hardwareauditoverdue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareBySerial request
	HardwareBySerial(ctx context.Context, serial string, params *HardwareBySerialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareByAssetTag request
	HardwareByAssetTag(ctx context.Context, assetTag string, params *HardwareByAssetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareDelete request
	HardwareDelete(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareById request
	HardwareById(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwarePartialUpdateWithBody request with any body
	HardwarePartialUpdateWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HardwarePartialUpdate(ctx context.Context, id int32, body HardwarePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareUpdateWithBody request with any body
	HardwareUpdateWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HardwareUpdate(ctx context.Context, id int32, body HardwareUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareCheckinWithBody request with any body
	HardwareCheckinWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HardwareCheckin(ctx context.Context, id int32, body HardwareCheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardwareCheckoutWithBody request with any body
	HardwareCheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HardwareCheckout(ctx context.Context, id int32, body HardwareCheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Hardwareidlicenses request
	Hardwareidlicenses(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licenses request
	Licenses(ctx context.Context, params *LicensesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestinputWithBody request with any body
	TestinputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Testinput(ctx context.Context, body TestinputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licensesid3 request
	Licensesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licensesid request
	Licensesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licensesid2WithBody request with any body
	Licensesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Licensesid2(ctx context.Context, id int32, body Licensesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licensesid1WithBody request with any body
	Licensesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Licensesid1(ctx context.Context, id int32, body Licensesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Licensesidseats request
	Licensesidseats(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LicensesidseatsseatId request
	LicensesidseatsseatId(ctx context.Context, id int32, seatId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LicensesidseatsseatId2WithBody request with any body
	LicensesidseatsseatId2WithBody(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LicensesidseatsseatId2(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LicensesidseatsseatId1WithBody request with any body
	LicensesidseatsseatId1WithBody(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LicensesidseatsseatId1(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Locations request
	Locations(ctx context.Context, params *LocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Locations2WithBody request with any body
	Locations2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Locations2(ctx context.Context, body Locations2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Locationsid2 request
	Locationsid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Locations1 request
	Locations1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LocationsidWithBody request with any body
	LocationsidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Locationsid(ctx context.Context, id int32, body LocationsidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Locations3WithBody request with any body
	Locations3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Locations3(ctx context.Context, id int32, body Locations3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Maintenances request
	Maintenances(ctx context.Context, params *MaintenancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Maintenances1WithBody request with any body
	Maintenances1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Maintenances1(ctx context.Context, body Maintenances1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Maintenancesid request
	Maintenancesid(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Manufacturers request
	Manufacturers(ctx context.Context, params *ManufacturersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Manufacturers1WithBody request with any body
	Manufacturers1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Manufacturers1(ctx context.Context, body Manufacturers1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Manufacturersid2 request
	Manufacturersid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Manufacturersid1 request
	Manufacturersid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManufacturersidWithBody request with any body
	ManufacturersidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Manufacturersid(ctx context.Context, id int32, body ManufacturersidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Manufacturersid3WithBody request with any body
	Manufacturersid3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Manufacturersid3(ctx context.Context, id int32, body Manufacturersid3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Models request
	Models(ctx context.Context, params *ModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Models1WithBody request with any body
	Models1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Models1(ctx context.Context, body Models1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modelsid3 request
	Modelsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modelsid request
	Modelsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modelsid2WithBody request with any body
	Modelsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Modelsid2(ctx context.Context, id int32, body Modelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modelsid1WithBody request with any body
	Modelsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Modelsid1(ctx context.Context, id int32, body Modelsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Reportsactivity request
	Reportsactivity(ctx context.Context, params *ReportsactivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Backups1 request
	Backups1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Backupsdownloadfile request
	Backupsdownloadfile(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabels request
	Statuslabels(ctx context.Context, params *StatuslabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabels1WithBody request with any body
	Statuslabels1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Statuslabels1(ctx context.Context, body Statuslabels1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabelsid1 request
	Statuslabelsid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabelsid request
	Statuslabelsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabelsid3WithBody request with any body
	Statuslabelsid3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Statuslabelsid3(ctx context.Context, id int32, body Statuslabelsid3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabelsid2WithBody request with any body
	Statuslabelsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Statuslabelsid2(ctx context.Context, id int32, body Statuslabelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Statuslabelsidassetlist request
	Statuslabelsidassetlist(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Suppliers request
	Suppliers(ctx context.Context, params *SuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Suppliersid request
	Suppliersid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Users request
	Users(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Users2WithBody request with any body
	Users2WithBody(ctx context.Context, params *Users2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Users2(ctx context.Context, params *Users2Params, body Users2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersme request
	Usersme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersid1 request
	Usersid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersid request
	Usersid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Users3WithBody request with any body
	Users3WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Users3(ctx context.Context, id string, body Users3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersid2WithBody request with any body
	Usersid2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Usersid2(ctx context.Context, id string, body Usersid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersidaccessories request
	Usersidaccessories(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersidassets request
	Usersidassets(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Usersidlicenses request
	Usersidlicenses(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Accessories(ctx context.Context, params *AccessoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessories1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessories1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessories1(ctx context.Context, body Accessories1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessories1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid2(ctx context.Context, id int32, body Accessoriesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesid1(ctx context.Context, id int32, body Accessoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesidcheckedout(ctx context.Context, id int32, params *AccessoriesidcheckedoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesidcheckedoutRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesidcheckin(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesidcheckinRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesidcheckedout1WithBody(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesidcheckedout1RequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Accessoriesidcheckedout1(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, body Accessoriesidcheckedout1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessoriesidcheckedout1Request(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categories1(ctx context.Context, params *Categories1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategories1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categories2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategories2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categories2(ctx context.Context, body Categories2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategories2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categoriesid2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categoriesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categoriesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categoriesid1(ctx context.Context, id int32, body Categoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CategoriesidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesidRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Categoriesid(ctx context.Context, id int32, body CategoriesidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCategoriesidRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companies(ctx context.Context, params *CompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companies1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompanies1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companies1(ctx context.Context, body Companies1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompanies1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid2(ctx context.Context, id int32, body Companiesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Companiesid1(ctx context.Context, id int32, body Companiesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompaniesid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Components(ctx context.Context, params *ComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Components1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponents1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Components1(ctx context.Context, body Components1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponents1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid2(ctx context.Context, id int32, body Componentsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsid1(ctx context.Context, id int32, body Componentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsidassets(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidassetsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComponentsidcheckinWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidcheckinRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsidcheckin(ctx context.Context, id int32, body ComponentsidcheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidcheckinRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComponentsidcheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidcheckoutRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Componentsidcheckout(ctx context.Context, id int32, body ComponentsidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComponentsidcheckoutRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumables(ctx context.Context, params *ConsumablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumables1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumables1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumables1(ctx context.Context, body Consumables1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumables1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumablesid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumablesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumablesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumablesid1(ctx context.Context, id int32, body Consumablesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumables2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumables2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumables2(ctx context.Context, id int32, body Consumables2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumables2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConsumablesidcheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesidcheckoutRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Consumablesidcheckout(ctx context.Context, id int32, body ConsumablesidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConsumablesidcheckoutRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departments(ctx context.Context, params *DepartmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departments1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartments1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departments1(ctx context.Context, body Departments1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartments1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departmentsid2(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departmentsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departmentsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Departmentsid1(ctx context.Context, id int32, body Departmentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DepartmentsEditWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsEditRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DepartmentsEdit(ctx context.Context, id int32, body DepartmentsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDepartmentsEditRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fields1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFields1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fields2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFields2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fields2(ctx context.Context, body Fields2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFields2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsid1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsid2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsid2(ctx context.Context, id string, body Fieldsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFieldsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFieldsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFields(ctx context.Context, id string, body UpdateFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFieldsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FieldsidassociateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsidassociateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsidassociate(ctx context.Context, id string, body FieldsidassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsidassociateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FieldsiddisassociateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsiddisassociateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsiddisassociate(ctx context.Context, id string, body FieldsiddisassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsiddisassociateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FieldsetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsets(ctx context.Context, body FieldsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsetsid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsetsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsetsid1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsetsid1(ctx context.Context, id string, body Fieldsetsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Fieldsetsidfields(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFieldsetsidfieldsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groups1(ctx context.Context, params *Groups1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroups1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid1(ctx context.Context, body Groupsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid4WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid4RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid4(ctx context.Context, id int32, body Groupsid4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid4Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Groupsid2(ctx context.Context, id int32, body Groupsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareList(ctx context.Context, params *HardwareListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCreate(ctx context.Context, body HardwareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Hardwareidrestore(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareidrestoreRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareauditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareauditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Hardwareaudit(ctx context.Context, body HardwareauditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareauditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Hardwareauditdue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareauditdueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Hardwareauditoverdue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareauditoverdueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareBySerial(ctx context.Context, serial string, params *HardwareBySerialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareBySerialRequest(c.Server, serial, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareByAssetTag(ctx context.Context, assetTag string, params *HardwareByAssetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareByAssetTagRequest(c.Server, assetTag, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareDelete(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareById(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwarePartialUpdateWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwarePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwarePartialUpdate(ctx context.Context, id int32, body HardwarePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwarePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareUpdateWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareUpdate(ctx context.Context, id int32, body HardwareUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCheckinWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCheckinRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCheckin(ctx context.Context, id int32, body HardwareCheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCheckinRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCheckoutWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCheckoutRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardwareCheckout(ctx context.Context, id int32, body HardwareCheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareCheckoutRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Hardwareidlicenses(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardwareidlicensesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licenses(ctx context.Context, params *LicensesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestinputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestinputRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Testinput(ctx context.Context, body TestinputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestinputRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid2(ctx context.Context, id int32, body Licensesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesid1(ctx context.Context, id int32, body Licensesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Licensesidseats(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LicensesidseatsseatId(ctx context.Context, id int32, seatId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsseatIdRequest(c.Server, id, seatId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LicensesidseatsseatId2WithBody(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsseatId2RequestWithBody(c.Server, id, seatId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LicensesidseatsseatId2(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsseatId2Request(c.Server, id, seatId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LicensesidseatsseatId1WithBody(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsseatId1RequestWithBody(c.Server, id, seatId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LicensesidseatsseatId1(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLicensesidseatsseatId1Request(c.Server, id, seatId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations(ctx context.Context, params *LocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocations2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations2(ctx context.Context, body Locations2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocations2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locationsid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocationsid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocations1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LocationsidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocationsidRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locationsid(ctx context.Context, id int32, body LocationsidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocationsidRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocations3RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Locations3(ctx context.Context, id int32, body Locations3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLocations3Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Maintenances(ctx context.Context, params *MaintenancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMaintenancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Maintenances1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMaintenances1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Maintenances1(ctx context.Context, body Maintenances1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMaintenances1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Maintenancesid(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMaintenancesidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturers(ctx context.Context, params *ManufacturersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturers1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturers1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturers1(ctx context.Context, body Manufacturers1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturers1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturersid2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersid2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturersid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersid1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManufacturersidWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersidRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturersid(ctx context.Context, id int32, body ManufacturersidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersidRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturersid3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersid3RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Manufacturersid3(ctx context.Context, id int32, body Manufacturersid3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManufacturersid3Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Models(ctx context.Context, params *ModelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Models1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModels1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Models1(ctx context.Context, body Models1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModels1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid3(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsid3Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid2(ctx context.Context, id int32, body Modelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid1WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsid1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modelsid1(ctx context.Context, id int32, body Modelsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModelsid1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Reportsactivity(ctx context.Context, params *ReportsactivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportsactivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Backups1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackups1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Backupsdownloadfile(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackupsdownloadfileRequest(c.Server, file)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabels(ctx context.Context, params *StatuslabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabels1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabels1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabels1(ctx context.Context, body Statuslabels1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabels1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsid1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid3WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsid3RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid3(ctx context.Context, id int32, body Statuslabelsid3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsid3Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid2WithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsid2(ctx context.Context, id int32, body Statuslabelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Statuslabelsidassetlist(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatuslabelsidassetlistRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Suppliers(ctx context.Context, params *SuppliersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuppliersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Suppliersid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuppliersidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users2WithBody(ctx context.Context, params *Users2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsers2RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users2(ctx context.Context, params *Users2Params, body Users2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsers2Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersmeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersid1(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersid1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersid(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users3WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsers3RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Users3(ctx context.Context, id string, body Users3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsers3Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersid2WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersid2RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersid2(ctx context.Context, id string, body Usersid2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersid2Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersidaccessories(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersidaccessoriesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersidassets(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersidassetsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Usersidlicenses(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersidlicensesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessoriesRequest generates requests for Accessories
func NewAccessoriesRequest(server string, params *AccessoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessories1Request calls the generic Accessories1 builder with application/json body
func NewAccessories1Request(server string, body Accessories1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessories1RequestWithBody(server, "application/json", bodyReader)
}

// NewAccessories1RequestWithBody generates requests for Accessories1 with any type of body
func NewAccessories1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessoriesid3Request generates requests for Accessoriesid3
func NewAccessoriesid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessoriesidRequest generates requests for Accessoriesid
func NewAccessoriesidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessoriesid2Request calls the generic Accessoriesid2 builder with application/json body
func NewAccessoriesid2Request(server string, id int32, body Accessoriesid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessoriesid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessoriesid2RequestWithBody generates requests for Accessoriesid2 with any type of body
func NewAccessoriesid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessoriesid1Request calls the generic Accessoriesid1 builder with application/json body
func NewAccessoriesid1Request(server string, id int32, body Accessoriesid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessoriesid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessoriesid1RequestWithBody generates requests for Accessoriesid1 with any type of body
func NewAccessoriesid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessoriesidcheckedoutRequest generates requests for Accessoriesidcheckedout
func NewAccessoriesidcheckedoutRequest(server string, id int32, params *AccessoriesidcheckedoutParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s/checkedout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessoriesidcheckinRequest generates requests for Accessoriesidcheckin
func NewAccessoriesidcheckinRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s/checkin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessoriesidcheckedout1Request calls the generic Accessoriesidcheckedout1 builder with application/json body
func NewAccessoriesidcheckedout1Request(server string, id int32, params *Accessoriesidcheckedout1Params, body Accessoriesidcheckedout1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessoriesidcheckedout1RequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAccessoriesidcheckedout1RequestWithBody generates requests for Accessoriesidcheckedout1 with any type of body
func NewAccessoriesidcheckedout1RequestWithBody(server string, id int32, params *Accessoriesidcheckedout1Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accessories/%s/checkout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategories1Request generates requests for Categories1
func NewCategories1Request(server string, params *Categories1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_type", runtime.ParamLocationQuery, *params.CategoryType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UseDefaultEula != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use_default_eula", runtime.ParamLocationQuery, *params.UseDefaultEula); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RequireAcceptance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "require_acceptance", runtime.ParamLocationQuery, *params.RequireAcceptance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CheckinEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checkin_email", runtime.ParamLocationQuery, *params.CheckinEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategories2Request calls the generic Categories2 builder with application/json body
func NewCategories2Request(server string, body Categories2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategories2RequestWithBody(server, "application/json", bodyReader)
}

// NewCategories2RequestWithBody generates requests for Categories2 with any type of body
func NewCategories2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoriesid2Request generates requests for Categoriesid2
func NewCategoriesid2Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesid3Request generates requests for Categoriesid3
func NewCategoriesid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCategoriesid1Request calls the generic Categoriesid1 builder with application/json body
func NewCategoriesid1Request(server string, id int32, body Categoriesid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoriesid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCategoriesid1RequestWithBody generates requests for Categoriesid1 with any type of body
func NewCategoriesid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCategoriesidRequest calls the generic Categoriesid builder with application/json body
func NewCategoriesidRequest(server string, id int32, body CategoriesidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCategoriesidRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCategoriesidRequestWithBody generates requests for Categoriesid with any type of body
func NewCategoriesidRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompaniesRequest generates requests for Companies
func NewCompaniesRequest(server string, params *CompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompanies1Request calls the generic Companies1 builder with application/json body
func NewCompanies1Request(server string, body Companies1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompanies1RequestWithBody(server, "application/json", bodyReader)
}

// NewCompanies1RequestWithBody generates requests for Companies1 with any type of body
func NewCompanies1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompaniesid3Request generates requests for Companiesid3
func NewCompaniesid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompaniesidRequest generates requests for Companiesid
func NewCompaniesidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompaniesid2Request calls the generic Companiesid2 builder with application/json body
func NewCompaniesid2Request(server string, id int32, body Companiesid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompaniesid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCompaniesid2RequestWithBody generates requests for Companiesid2 with any type of body
func NewCompaniesid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompaniesid1Request calls the generic Companiesid1 builder with application/json body
func NewCompaniesid1Request(server string, id int32, body Companiesid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompaniesid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCompaniesid1RequestWithBody generates requests for Companiesid1 with any type of body
func NewCompaniesid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComponentsRequest generates requests for Components
func NewComponentsRequest(server string, params *ComponentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComponents1Request calls the generic Components1 builder with application/json body
func NewComponents1Request(server string, body Components1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponents1RequestWithBody(server, "application/json", bodyReader)
}

// NewComponents1RequestWithBody generates requests for Components1 with any type of body
func NewComponents1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComponentsid3Request generates requests for Componentsid3
func NewComponentsid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComponentsidRequest generates requests for Componentsid
func NewComponentsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComponentsid2Request calls the generic Componentsid2 builder with application/json body
func NewComponentsid2Request(server string, id int32, body Componentsid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponentsid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewComponentsid2RequestWithBody generates requests for Componentsid2 with any type of body
func NewComponentsid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComponentsid1Request calls the generic Componentsid1 builder with application/json body
func NewComponentsid1Request(server string, id int32, body Componentsid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponentsid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewComponentsid1RequestWithBody generates requests for Componentsid1 with any type of body
func NewComponentsid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComponentsidassetsRequest generates requests for Componentsidassets
func NewComponentsidassetsRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComponentsidcheckinRequest calls the generic Componentsidcheckin builder with application/json body
func NewComponentsidcheckinRequest(server string, id int32, body ComponentsidcheckinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponentsidcheckinRequestWithBody(server, id, "application/json", bodyReader)
}

// NewComponentsidcheckinRequestWithBody generates requests for Componentsidcheckin with any type of body
func NewComponentsidcheckinRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s/checkin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComponentsidcheckoutRequest calls the generic Componentsidcheckout builder with application/json body
func NewComponentsidcheckoutRequest(server string, id int32, body ComponentsidcheckoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComponentsidcheckoutRequestWithBody(server, id, "application/json", bodyReader)
}

// NewComponentsidcheckoutRequestWithBody generates requests for Componentsidcheckout with any type of body
func NewComponentsidcheckoutRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/components/%s/checkout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConsumablesRequest generates requests for Consumables
func NewConsumablesRequest(server string, params *ConsumablesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ManufacturerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manufacturer_id", runtime.ParamLocationQuery, *params.ManufacturerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConsumables1Request calls the generic Consumables1 builder with application/json body
func NewConsumables1Request(server string, body Consumables1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConsumables1RequestWithBody(server, "application/json", bodyReader)
}

// NewConsumables1RequestWithBody generates requests for Consumables1 with any type of body
func NewConsumables1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConsumablesid2Request generates requests for Consumablesid2
func NewConsumablesid2Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConsumablesidRequest generates requests for Consumablesid
func NewConsumablesidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConsumablesid1Request calls the generic Consumablesid1 builder with application/json body
func NewConsumablesid1Request(server string, id int32, body Consumablesid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConsumablesid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewConsumablesid1RequestWithBody generates requests for Consumablesid1 with any type of body
func NewConsumablesid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConsumables2Request calls the generic Consumables2 builder with application/json body
func NewConsumables2Request(server string, id int32, body Consumables2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConsumables2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewConsumables2RequestWithBody generates requests for Consumables2 with any type of body
func NewConsumables2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConsumablesidcheckoutRequest calls the generic Consumablesidcheckout builder with application/json body
func NewConsumablesidcheckoutRequest(server string, id int32, body ConsumablesidcheckoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConsumablesidcheckoutRequestWithBody(server, id, "application/json", bodyReader)
}

// NewConsumablesidcheckoutRequestWithBody generates requests for Consumablesidcheckout with any type of body
func NewConsumablesidcheckoutRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumables/%s/checkout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDepartmentsRequest generates requests for Departments
func NewDepartmentsRequest(server string, params *DepartmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ManagerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager_id", runtime.ParamLocationQuery, *params.ManagerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDepartments1Request calls the generic Departments1 builder with application/json body
func NewDepartments1Request(server string, body Departments1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDepartments1RequestWithBody(server, "application/json", bodyReader)
}

// NewDepartments1RequestWithBody generates requests for Departments1 with any type of body
func NewDepartments1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDepartmentsid2Request generates requests for Departmentsid2
func NewDepartmentsid2Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDepartmentsidRequest generates requests for Departmentsid
func NewDepartmentsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDepartmentsid1Request calls the generic Departmentsid1 builder with application/json body
func NewDepartmentsid1Request(server string, id int32, body Departmentsid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDepartmentsid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewDepartmentsid1RequestWithBody generates requests for Departmentsid1 with any type of body
func NewDepartmentsid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDepartmentsEditRequest calls the generic DepartmentsEdit builder with application/json body
func NewDepartmentsEditRequest(server string, id int32, body DepartmentsEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDepartmentsEditRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDepartmentsEditRequestWithBody generates requests for DepartmentsEdit with any type of body
func NewDepartmentsEditRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFields1Request generates requests for Fields1
func NewFields1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFields2Request calls the generic Fields2 builder with application/json body
func NewFields2Request(server string, body Fields2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFields2RequestWithBody(server, "application/json", bodyReader)
}

// NewFields2RequestWithBody generates requests for Fields2 with any type of body
func NewFields2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsid1Request generates requests for Fieldsid1
func NewFieldsid1Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFieldsidRequest generates requests for Fieldsid
func NewFieldsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFieldsid2Request calls the generic Fieldsid2 builder with application/json body
func NewFieldsid2Request(server string, id string, body Fieldsid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFieldsid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewFieldsid2RequestWithBody generates requests for Fieldsid2 with any type of body
func NewFieldsid2RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFieldsRequest calls the generic UpdateFields builder with application/json body
func NewUpdateFieldsRequest(server string, id string, body UpdateFieldsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFieldsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateFieldsRequestWithBody generates requests for UpdateFields with any type of body
func NewUpdateFieldsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsidassociateRequest calls the generic Fieldsidassociate builder with application/json body
func NewFieldsidassociateRequest(server string, id string, body FieldsidassociateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFieldsidassociateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFieldsidassociateRequestWithBody generates requests for Fieldsidassociate with any type of body
func NewFieldsidassociateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s/associate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsiddisassociateRequest calls the generic Fieldsiddisassociate builder with application/json body
func NewFieldsiddisassociateRequest(server string, id string, body FieldsiddisassociateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFieldsiddisassociateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFieldsiddisassociateRequestWithBody generates requests for Fieldsiddisassociate with any type of body
func NewFieldsiddisassociateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fields/%s/disassociate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsRequest generates requests for Fields
func NewFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFieldsetsRequest calls the generic Fieldsets builder with application/json body
func NewFieldsetsRequest(server string, body FieldsetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFieldsetsRequestWithBody(server, "application/json", bodyReader)
}

// NewFieldsetsRequestWithBody generates requests for Fieldsets with any type of body
func NewFieldsetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsetsid2Request generates requests for Fieldsetsid2
func NewFieldsetsid2Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFieldsetsidRequest generates requests for Fieldsetsid
func NewFieldsetsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFieldsetsid1Request calls the generic Fieldsetsid1 builder with application/json body
func NewFieldsetsid1Request(server string, id string, body Fieldsetsid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFieldsetsid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewFieldsetsid1RequestWithBody generates requests for Fieldsetsid1 with any type of body
func NewFieldsetsid1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFieldsetsidfieldsRequest generates requests for Fieldsetsidfields
func NewFieldsetsidfieldsRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fieldsets/%s/fields", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroups1Request generates requests for Groups1
func NewGroups1Request(server string, params *Groups1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsid1Request calls the generic Groupsid1 builder with application/json body
func NewGroupsid1Request(server string, body Groupsid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsid1RequestWithBody(server, "application/json", bodyReader)
}

// NewGroupsid1RequestWithBody generates requests for Groupsid1 with any type of body
func NewGroupsid1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsid3Request generates requests for Groupsid3
func NewGroupsid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsidRequest generates requests for Groupsid
func NewGroupsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsid4Request calls the generic Groupsid4 builder with application/json body
func NewGroupsid4Request(server string, id int32, body Groupsid4JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsid4RequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsid4RequestWithBody generates requests for Groupsid4 with any type of body
func NewGroupsid4RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsid2Request calls the generic Groupsid2 builder with application/json body
func NewGroupsid2Request(server string, id int32, body Groupsid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsid2RequestWithBody generates requests for Groupsid2 with any type of body
func NewGroupsid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareListRequest generates requests for HardwareList
func NewHardwareListRequest(server string, params *HardwareListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model_id", runtime.ParamLocationQuery, *params.ModelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ManufacturerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manufacturer_id", runtime.ParamLocationQuery, *params.ManufacturerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_id", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareCreateRequest calls the generic HardwareCreate builder with application/json body
func NewHardwareCreateRequest(server string, body HardwareCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwareCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewHardwareCreateRequestWithBody generates requests for HardwareCreate with any type of body
func NewHardwareCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareidrestoreRequest generates requests for Hardwareidrestore
func NewHardwareidrestoreRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/:id/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareauditRequest calls the generic Hardwareaudit builder with application/json body
func NewHardwareauditRequest(server string, body HardwareauditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwareauditRequestWithBody(server, "application/json", bodyReader)
}

// NewHardwareauditRequestWithBody generates requests for Hardwareaudit with any type of body
func NewHardwareauditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareauditdueRequest generates requests for Hardwareauditdue
func NewHardwareauditdueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/audit/due")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareauditoverdueRequest generates requests for Hardwareauditoverdue
func NewHardwareauditoverdueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/audit/overdue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareBySerialRequest generates requests for HardwareBySerial
func NewHardwareBySerialRequest(server string, serial string, params *HardwareBySerialParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serial", runtime.ParamLocationPath, serial)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/byserial/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareByAssetTagRequest generates requests for HardwareByAssetTag
func NewHardwareByAssetTagRequest(server string, assetTag string, params *HardwareByAssetTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asset_tag", runtime.ParamLocationPath, assetTag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/bytag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareDeleteRequest generates requests for HardwareDelete
func NewHardwareDeleteRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwareByIdRequest generates requests for HardwareById
func NewHardwareByIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardwarePartialUpdateRequest calls the generic HardwarePartialUpdate builder with application/json body
func NewHardwarePartialUpdateRequest(server string, id int32, body HardwarePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwarePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewHardwarePartialUpdateRequestWithBody generates requests for HardwarePartialUpdate with any type of body
func NewHardwarePartialUpdateRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareUpdateRequest calls the generic HardwareUpdate builder with application/json body
func NewHardwareUpdateRequest(server string, id int32, body HardwareUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwareUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewHardwareUpdateRequestWithBody generates requests for HardwareUpdate with any type of body
func NewHardwareUpdateRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareCheckinRequest calls the generic HardwareCheckin builder with application/json body
func NewHardwareCheckinRequest(server string, id int32, body HardwareCheckinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwareCheckinRequestWithBody(server, id, "application/json", bodyReader)
}

// NewHardwareCheckinRequestWithBody generates requests for HardwareCheckin with any type of body
func NewHardwareCheckinRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s/checkin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareCheckoutRequest calls the generic HardwareCheckout builder with application/json body
func NewHardwareCheckoutRequest(server string, id int32, body HardwareCheckoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHardwareCheckoutRequestWithBody(server, id, "application/json", bodyReader)
}

// NewHardwareCheckoutRequestWithBody generates requests for HardwareCheckout with any type of body
func NewHardwareCheckoutRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s/checkout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHardwareidlicensesRequest generates requests for Hardwareidlicenses
func NewHardwareidlicensesRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/%s/licenses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLicensesRequest generates requests for Licenses
func NewLicensesRequest(server string, params *LicensesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_key", runtime.ParamLocationQuery, *params.ProductKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurchaseOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purchase_order", runtime.ParamLocationQuery, *params.PurchaseOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LicenseName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "license_name", runtime.ParamLocationQuery, *params.LicenseName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LicenseEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "license_email", runtime.ParamLocationQuery, *params.LicenseEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ManufacturerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manufacturer_id", runtime.ParamLocationQuery, *params.ManufacturerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupplierId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supplier_id", runtime.ParamLocationQuery, *params.SupplierId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category_id", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepreciationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depreciation_id", runtime.ParamLocationQuery, *params.DepreciationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maintained != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maintained", runtime.ParamLocationQuery, *params.Maintained); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestinputRequest calls the generic Testinput builder with application/json body
func NewTestinputRequest(server string, body TestinputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestinputRequestWithBody(server, "application/json", bodyReader)
}

// NewTestinputRequestWithBody generates requests for Testinput with any type of body
func NewTestinputRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLicensesid3Request generates requests for Licensesid3
func NewLicensesid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLicensesidRequest generates requests for Licensesid
func NewLicensesidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLicensesid2Request calls the generic Licensesid2 builder with application/json body
func NewLicensesid2Request(server string, id int32, body Licensesid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLicensesid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewLicensesid2RequestWithBody generates requests for Licensesid2 with any type of body
func NewLicensesid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLicensesid1Request calls the generic Licensesid1 builder with application/json body
func NewLicensesid1Request(server string, id int32, body Licensesid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLicensesid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewLicensesid1RequestWithBody generates requests for Licensesid1 with any type of body
func NewLicensesid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLicensesidseatsRequest generates requests for Licensesidseats
func NewLicensesidseatsRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s/seats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLicensesidseatsseatIdRequest generates requests for LicensesidseatsseatId
func NewLicensesidseatsseatIdRequest(server string, id int32, seatId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seat_id", runtime.ParamLocationPath, seatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s/seats/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLicensesidseatsseatId2Request calls the generic LicensesidseatsseatId2 builder with application/json body
func NewLicensesidseatsseatId2Request(server string, id int32, seatId int32, body LicensesidseatsseatId2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLicensesidseatsseatId2RequestWithBody(server, id, seatId, "application/json", bodyReader)
}

// NewLicensesidseatsseatId2RequestWithBody generates requests for LicensesidseatsseatId2 with any type of body
func NewLicensesidseatsseatId2RequestWithBody(server string, id int32, seatId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seat_id", runtime.ParamLocationPath, seatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s/seats/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLicensesidseatsseatId1Request calls the generic LicensesidseatsseatId1 builder with application/json body
func NewLicensesidseatsseatId1Request(server string, id int32, seatId int32, body LicensesidseatsseatId1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLicensesidseatsseatId1RequestWithBody(server, id, seatId, "application/json", bodyReader)
}

// NewLicensesidseatsseatId1RequestWithBody generates requests for LicensesidseatsseatId1 with any type of body
func NewLicensesidseatsseatId1RequestWithBody(server string, id int32, seatId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seat_id", runtime.ParamLocationPath, seatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/licenses/%s/seats/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLocationsRequest generates requests for Locations
func NewLocationsRequest(server string, params *LocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Address != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Address2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address2", runtime.ParamLocationQuery, *params.Address2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Zip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zip", runtime.ParamLocationQuery, *params.Zip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocations2Request calls the generic Locations2 builder with application/json body
func NewLocations2Request(server string, body Locations2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLocations2RequestWithBody(server, "application/json", bodyReader)
}

// NewLocations2RequestWithBody generates requests for Locations2 with any type of body
func NewLocations2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLocationsid2Request generates requests for Locationsid2
func NewLocationsid2Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocations1Request generates requests for Locations1
func NewLocations1Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLocationsidRequest calls the generic Locationsid builder with application/json body
func NewLocationsidRequest(server string, id int32, body LocationsidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLocationsidRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLocationsidRequestWithBody generates requests for Locationsid with any type of body
func NewLocationsidRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLocations3Request calls the generic Locations3 builder with application/json body
func NewLocations3Request(server string, id int32, body Locations3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLocations3RequestWithBody(server, id, "application/json", bodyReader)
}

// NewLocations3RequestWithBody generates requests for Locations3 with any type of body
func NewLocations3RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMaintenancesRequest generates requests for Maintenances
func NewMaintenancesRequest(server string, params *MaintenancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asset_id", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMaintenances1Request calls the generic Maintenances1 builder with application/json body
func NewMaintenances1Request(server string, body Maintenances1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMaintenances1RequestWithBody(server, "application/json", bodyReader)
}

// NewMaintenances1RequestWithBody generates requests for Maintenances1 with any type of body
func NewMaintenances1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMaintenancesidRequest generates requests for Maintenancesid
func NewMaintenancesidRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManufacturersRequest generates requests for Manufacturers
func NewManufacturersRequest(server string, params *ManufacturersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "support_url", runtime.ParamLocationQuery, *params.SupportUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportPhone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "support_phone", runtime.ParamLocationQuery, *params.SupportPhone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "support_email", runtime.ParamLocationQuery, *params.SupportEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManufacturers1Request calls the generic Manufacturers1 builder with application/json body
func NewManufacturers1Request(server string, body Manufacturers1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManufacturers1RequestWithBody(server, "application/json", bodyReader)
}

// NewManufacturers1RequestWithBody generates requests for Manufacturers1 with any type of body
func NewManufacturers1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManufacturersid2Request generates requests for Manufacturersid2
func NewManufacturersid2Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManufacturersid1Request generates requests for Manufacturersid1
func NewManufacturersid1Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewManufacturersidRequest calls the generic Manufacturersid builder with application/json body
func NewManufacturersidRequest(server string, id int32, body ManufacturersidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManufacturersidRequestWithBody(server, id, "application/json", bodyReader)
}

// NewManufacturersidRequestWithBody generates requests for Manufacturersid with any type of body
func NewManufacturersidRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManufacturersid3Request calls the generic Manufacturersid3 builder with application/json body
func NewManufacturersid3Request(server string, id int32, body Manufacturersid3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManufacturersid3RequestWithBody(server, id, "application/json", bodyReader)
}

// NewManufacturersid3RequestWithBody generates requests for Manufacturersid3 with any type of body
func NewManufacturersid3RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/manufacturers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelsRequest generates requests for Models
func NewModelsRequest(server string, params *ModelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModels1Request calls the generic Models1 builder with application/json body
func NewModels1Request(server string, body Models1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModels1RequestWithBody(server, "application/json", bodyReader)
}

// NewModels1RequestWithBody generates requests for Models1 with any type of body
func NewModels1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelsid3Request generates requests for Modelsid3
func NewModelsid3Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelsidRequest generates requests for Modelsid
func NewModelsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModelsid2Request calls the generic Modelsid2 builder with application/json body
func NewModelsid2Request(server string, id int32, body Modelsid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelsid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewModelsid2RequestWithBody generates requests for Modelsid2 with any type of body
func NewModelsid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModelsid1Request calls the generic Modelsid1 builder with application/json body
func NewModelsid1Request(server string, id int32, body Modelsid1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModelsid1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewModelsid1RequestWithBody generates requests for Modelsid1 with any type of body
func NewModelsid1RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReportsactivityRequest generates requests for Reportsactivity
func NewReportsactivityRequest(server string, params *ReportsactivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reports/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_type", runtime.ParamLocationQuery, *params.TargetType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_id", runtime.ParamLocationQuery, *params.TargetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item_type", runtime.ParamLocationQuery, *params.ItemType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item_id", runtime.ParamLocationQuery, *params.ItemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action_type", runtime.ParamLocationQuery, *params.ActionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackups1Request generates requests for Backups1
func NewBackups1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/backups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackupsdownloadfileRequest generates requests for Backupsdownloadfile
func NewBackupsdownloadfileRequest(server string, file string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file", runtime.ParamLocationPath, file)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/backups/download/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatuslabelsRequest generates requests for Statuslabels
func NewStatuslabelsRequest(server string, params *StatuslabelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_type", runtime.ParamLocationQuery, *params.StatusType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatuslabels1Request calls the generic Statuslabels1 builder with application/json body
func NewStatuslabels1Request(server string, body Statuslabels1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStatuslabels1RequestWithBody(server, "application/json", bodyReader)
}

// NewStatuslabels1RequestWithBody generates requests for Statuslabels1 with any type of body
func NewStatuslabels1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStatuslabelsid1Request generates requests for Statuslabelsid1
func NewStatuslabelsid1Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatuslabelsidRequest generates requests for Statuslabelsid
func NewStatuslabelsidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatuslabelsid3Request calls the generic Statuslabelsid3 builder with application/json body
func NewStatuslabelsid3Request(server string, id int32, body Statuslabelsid3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStatuslabelsid3RequestWithBody(server, id, "application/json", bodyReader)
}

// NewStatuslabelsid3RequestWithBody generates requests for Statuslabelsid3 with any type of body
func NewStatuslabelsid3RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStatuslabelsid2Request calls the generic Statuslabelsid2 builder with application/json body
func NewStatuslabelsid2Request(server string, id int32, body Statuslabelsid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStatuslabelsid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewStatuslabelsid2RequestWithBody generates requests for Statuslabelsid2 with any type of body
func NewStatuslabelsid2RequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStatuslabelsidassetlistRequest generates requests for Statuslabelsidassetlist
func NewStatuslabelsidassetlistRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuslabels/%s/assetlist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuppliersRequest generates requests for Suppliers
func NewSuppliersRequest(server string, params *SuppliersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Address != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Address2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address2", runtime.ParamLocationQuery, *params.Address2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Zip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zip", runtime.ParamLocationQuery, *params.Zip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fax != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax", runtime.ParamLocationQuery, *params.Fax); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Notes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notes", runtime.ParamLocationQuery, *params.Notes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuppliersidRequest generates requests for Suppliersid
func NewSuppliersidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/suppliers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRequest generates requests for Users
func NewUsersRequest(server string, params *UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmployeeNum != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "employee_num", runtime.ParamLocationQuery, *params.EmployeeNum); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Zip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zip", runtime.ParamLocationQuery, *params.Zip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepartmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "department_id", runtime.ParamLocationQuery, *params.DepartmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LdapImport != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ldap_import", runtime.ParamLocationQuery, *params.LdapImport); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssetsCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assets_count", runtime.ParamLocationQuery, *params.AssetsCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LicensesCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "licenses_count", runtime.ParamLocationQuery, *params.LicensesCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccessoriesCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accessories_count", runtime.ParamLocationQuery, *params.AccessoriesCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConsumablesCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consumables_count", runtime.ParamLocationQuery, *params.ConsumablesCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Remote != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote", runtime.ParamLocationQuery, *params.Remote); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vip", runtime.ParamLocationQuery, *params.Vip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsers2Request calls the generic Users2 builder with application/json body
func NewUsers2Request(server string, params *Users2Params, body Users2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsers2RequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsers2RequestWithBody generates requests for Users2 with any type of body
func NewUsers2RequestWithBody(server string, params *Users2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewUsersmeRequest generates requests for Usersme
func NewUsersmeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersid1Request generates requests for Usersid1
func NewUsersid1Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersidRequest generates requests for Usersid
func NewUsersidRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsers3Request calls the generic Users3 builder with application/json body
func NewUsers3Request(server string, id string, body Users3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsers3RequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsers3RequestWithBody generates requests for Users3 with any type of body
func NewUsers3RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersid2Request calls the generic Usersid2 builder with application/json body
func NewUsersid2Request(server string, id string, body Usersid2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersid2RequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersid2RequestWithBody generates requests for Usersid2 with any type of body
func NewUsersid2RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersidaccessoriesRequest generates requests for Usersidaccessories
func NewUsersidaccessoriesRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/accessories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersidassetsRequest generates requests for Usersidassets
func NewUsersidassetsRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersidlicensesRequest generates requests for Usersidlicenses
func NewUsersidlicensesRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/licenses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessoriesWithResponse request
	AccessoriesWithResponse(ctx context.Context, params *AccessoriesParams, reqEditors ...RequestEditorFn) (*AccessoriesResponse, error)

	// Accessories1WithBodyWithResponse request with any body
	Accessories1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessories1Response, error)

	Accessories1WithResponse(ctx context.Context, body Accessories1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessories1Response, error)

	// Accessoriesid3WithResponse request
	Accessoriesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Accessoriesid3Response, error)

	// AccessoriesidWithResponse request
	AccessoriesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*AccessoriesidResponse, error)

	// Accessoriesid2WithBodyWithResponse request with any body
	Accessoriesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesid2Response, error)

	Accessoriesid2WithResponse(ctx context.Context, id int32, body Accessoriesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesid2Response, error)

	// Accessoriesid1WithBodyWithResponse request with any body
	Accessoriesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesid1Response, error)

	Accessoriesid1WithResponse(ctx context.Context, id int32, body Accessoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesid1Response, error)

	// AccessoriesidcheckedoutWithResponse request
	AccessoriesidcheckedoutWithResponse(ctx context.Context, id int32, params *AccessoriesidcheckedoutParams, reqEditors ...RequestEditorFn) (*AccessoriesidcheckedoutResponse, error)

	// AccessoriesidcheckinWithResponse request
	AccessoriesidcheckinWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*AccessoriesidcheckinResponse, error)

	// Accessoriesidcheckedout1WithBodyWithResponse request with any body
	Accessoriesidcheckedout1WithBodyWithResponse(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesidcheckedout1Response, error)

	Accessoriesidcheckedout1WithResponse(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, body Accessoriesidcheckedout1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesidcheckedout1Response, error)

	// Categories1WithResponse request
	Categories1WithResponse(ctx context.Context, params *Categories1Params, reqEditors ...RequestEditorFn) (*Categories1Response, error)

	// Categories2WithBodyWithResponse request with any body
	Categories2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Categories2Response, error)

	Categories2WithResponse(ctx context.Context, body Categories2JSONRequestBody, reqEditors ...RequestEditorFn) (*Categories2Response, error)

	// Categoriesid2WithResponse request
	Categoriesid2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Categoriesid2Response, error)

	// Categoriesid3WithResponse request
	Categoriesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Categoriesid3Response, error)

	// Categoriesid1WithBodyWithResponse request with any body
	Categoriesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Categoriesid1Response, error)

	Categoriesid1WithResponse(ctx context.Context, id int32, body Categoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Categoriesid1Response, error)

	// CategoriesidWithBodyWithResponse request with any body
	CategoriesidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesidResponse, error)

	CategoriesidWithResponse(ctx context.Context, id int32, body CategoriesidJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesidResponse, error)

	// CompaniesWithResponse request
	CompaniesWithResponse(ctx context.Context, params *CompaniesParams, reqEditors ...RequestEditorFn) (*CompaniesResponse, error)

	// Companies1WithBodyWithResponse request with any body
	Companies1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companies1Response, error)

	Companies1WithResponse(ctx context.Context, body Companies1JSONRequestBody, reqEditors ...RequestEditorFn) (*Companies1Response, error)

	// Companiesid3WithResponse request
	Companiesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Companiesid3Response, error)

	// CompaniesidWithResponse request
	CompaniesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*CompaniesidResponse, error)

	// Companiesid2WithBodyWithResponse request with any body
	Companiesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companiesid2Response, error)

	Companiesid2WithResponse(ctx context.Context, id int32, body Companiesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Companiesid2Response, error)

	// Companiesid1WithBodyWithResponse request with any body
	Companiesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companiesid1Response, error)

	Companiesid1WithResponse(ctx context.Context, id int32, body Companiesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Companiesid1Response, error)

	// ComponentsWithResponse request
	ComponentsWithResponse(ctx context.Context, params *ComponentsParams, reqEditors ...RequestEditorFn) (*ComponentsResponse, error)

	// Components1WithBodyWithResponse request with any body
	Components1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Components1Response, error)

	Components1WithResponse(ctx context.Context, body Components1JSONRequestBody, reqEditors ...RequestEditorFn) (*Components1Response, error)

	// Componentsid3WithResponse request
	Componentsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Componentsid3Response, error)

	// ComponentsidWithResponse request
	ComponentsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ComponentsidResponse, error)

	// Componentsid2WithBodyWithResponse request with any body
	Componentsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Componentsid2Response, error)

	Componentsid2WithResponse(ctx context.Context, id int32, body Componentsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Componentsid2Response, error)

	// Componentsid1WithBodyWithResponse request with any body
	Componentsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Componentsid1Response, error)

	Componentsid1WithResponse(ctx context.Context, id int32, body Componentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Componentsid1Response, error)

	// ComponentsidassetsWithResponse request
	ComponentsidassetsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ComponentsidassetsResponse, error)

	// ComponentsidcheckinWithBodyWithResponse request with any body
	ComponentsidcheckinWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsidcheckinResponse, error)

	ComponentsidcheckinWithResponse(ctx context.Context, id int32, body ComponentsidcheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsidcheckinResponse, error)

	// ComponentsidcheckoutWithBodyWithResponse request with any body
	ComponentsidcheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsidcheckoutResponse, error)

	ComponentsidcheckoutWithResponse(ctx context.Context, id int32, body ComponentsidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsidcheckoutResponse, error)

	// ConsumablesWithResponse request
	ConsumablesWithResponse(ctx context.Context, params *ConsumablesParams, reqEditors ...RequestEditorFn) (*ConsumablesResponse, error)

	// Consumables1WithBodyWithResponse request with any body
	Consumables1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumables1Response, error)

	Consumables1WithResponse(ctx context.Context, body Consumables1JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumables1Response, error)

	// Consumablesid2WithResponse request
	Consumablesid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Consumablesid2Response, error)

	// ConsumablesidWithResponse request
	ConsumablesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ConsumablesidResponse, error)

	// Consumablesid1WithBodyWithResponse request with any body
	Consumablesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumablesid1Response, error)

	Consumablesid1WithResponse(ctx context.Context, id int32, body Consumablesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumablesid1Response, error)

	// Consumables2WithBodyWithResponse request with any body
	Consumables2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumables2Response, error)

	Consumables2WithResponse(ctx context.Context, id int32, body Consumables2JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumables2Response, error)

	// ConsumablesidcheckoutWithBodyWithResponse request with any body
	ConsumablesidcheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConsumablesidcheckoutResponse, error)

	ConsumablesidcheckoutWithResponse(ctx context.Context, id int32, body ConsumablesidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ConsumablesidcheckoutResponse, error)

	// DepartmentsWithResponse request
	DepartmentsWithResponse(ctx context.Context, params *DepartmentsParams, reqEditors ...RequestEditorFn) (*DepartmentsResponse, error)

	// Departments1WithBodyWithResponse request with any body
	Departments1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Departments1Response, error)

	Departments1WithResponse(ctx context.Context, body Departments1JSONRequestBody, reqEditors ...RequestEditorFn) (*Departments1Response, error)

	// Departmentsid2WithResponse request
	Departmentsid2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Departmentsid2Response, error)

	// DepartmentsidWithResponse request
	DepartmentsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DepartmentsidResponse, error)

	// Departmentsid1WithBodyWithResponse request with any body
	Departmentsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Departmentsid1Response, error)

	Departmentsid1WithResponse(ctx context.Context, id int32, body Departmentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Departmentsid1Response, error)

	// DepartmentsEditWithBodyWithResponse request with any body
	DepartmentsEditWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DepartmentsEditResponse, error)

	DepartmentsEditWithResponse(ctx context.Context, id int32, body DepartmentsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*DepartmentsEditResponse, error)

	// Fields1WithResponse request
	Fields1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Fields1Response, error)

	// Fields2WithBodyWithResponse request with any body
	Fields2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fields2Response, error)

	Fields2WithResponse(ctx context.Context, body Fields2JSONRequestBody, reqEditors ...RequestEditorFn) (*Fields2Response, error)

	// Fieldsid1WithResponse request
	Fieldsid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Fieldsid1Response, error)

	// FieldsidWithResponse request
	FieldsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsidResponse, error)

	// Fieldsid2WithBodyWithResponse request with any body
	Fieldsid2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fieldsid2Response, error)

	Fieldsid2WithResponse(ctx context.Context, id string, body Fieldsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Fieldsid2Response, error)

	// UpdateFieldsWithBodyWithResponse request with any body
	UpdateFieldsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFieldsResponse, error)

	UpdateFieldsWithResponse(ctx context.Context, id string, body UpdateFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFieldsResponse, error)

	// FieldsidassociateWithBodyWithResponse request with any body
	FieldsidassociateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsidassociateResponse, error)

	FieldsidassociateWithResponse(ctx context.Context, id string, body FieldsidassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsidassociateResponse, error)

	// FieldsiddisassociateWithBodyWithResponse request with any body
	FieldsiddisassociateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsiddisassociateResponse, error)

	FieldsiddisassociateWithResponse(ctx context.Context, id string, body FieldsiddisassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsiddisassociateResponse, error)

	// FieldsWithResponse request
	FieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FieldsResponse, error)

	// FieldsetsWithBodyWithResponse request with any body
	FieldsetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsetsResponse, error)

	FieldsetsWithResponse(ctx context.Context, body FieldsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsetsResponse, error)

	// Fieldsetsid2WithResponse request
	Fieldsetsid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Fieldsetsid2Response, error)

	// FieldsetsidWithResponse request
	FieldsetsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsetsidResponse, error)

	// Fieldsetsid1WithBodyWithResponse request with any body
	Fieldsetsid1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fieldsetsid1Response, error)

	Fieldsetsid1WithResponse(ctx context.Context, id string, body Fieldsetsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Fieldsetsid1Response, error)

	// FieldsetsidfieldsWithResponse request
	FieldsetsidfieldsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsetsidfieldsResponse, error)

	// Groups1WithResponse request
	Groups1WithResponse(ctx context.Context, params *Groups1Params, reqEditors ...RequestEditorFn) (*Groups1Response, error)

	// Groupsid1WithBodyWithResponse request with any body
	Groupsid1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid1Response, error)

	Groupsid1WithResponse(ctx context.Context, body Groupsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid1Response, error)

	// Groupsid3WithResponse request
	Groupsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Groupsid3Response, error)

	// GroupsidWithResponse request
	GroupsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GroupsidResponse, error)

	// Groupsid4WithBodyWithResponse request with any body
	Groupsid4WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid4Response, error)

	Groupsid4WithResponse(ctx context.Context, id int32, body Groupsid4JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid4Response, error)

	// Groupsid2WithBodyWithResponse request with any body
	Groupsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid2Response, error)

	Groupsid2WithResponse(ctx context.Context, id int32, body Groupsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid2Response, error)

	// HardwareListWithResponse request
	HardwareListWithResponse(ctx context.Context, params *HardwareListParams, reqEditors ...RequestEditorFn) (*HardwareListResponse, error)

	// HardwareCreateWithBodyWithResponse request with any body
	HardwareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCreateResponse, error)

	HardwareCreateWithResponse(ctx context.Context, body HardwareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCreateResponse, error)

	// HardwareidrestoreWithResponse request
	HardwareidrestoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareidrestoreResponse, error)

	// HardwareauditWithBodyWithResponse request with any body
	HardwareauditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareauditResponse, error)

	HardwareauditWithResponse(ctx context.Context, body HardwareauditJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareauditResponse, error)

	// HardwareauditdueWithResponse request
	HardwareauditdueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareauditdueResponse, error)

	// HardwareauditoverdueWithResponse request
	HardwareauditoverdueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareauditoverdueResponse, error)

	// HardwareBySerialWithResponse request
	HardwareBySerialWithResponse(ctx context.Context, serial string, params *HardwareBySerialParams, reqEditors ...RequestEditorFn) (*HardwareBySerialResponse, error)

	// HardwareByAssetTagWithResponse request
	HardwareByAssetTagWithResponse(ctx context.Context, assetTag string, params *HardwareByAssetTagParams, reqEditors ...RequestEditorFn) (*HardwareByAssetTagResponse, error)

	// HardwareDeleteWithResponse request
	HardwareDeleteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareDeleteResponse, error)

	// HardwareByIdWithResponse request
	HardwareByIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareByIdResponse, error)

	// HardwarePartialUpdateWithBodyWithResponse request with any body
	HardwarePartialUpdateWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwarePartialUpdateResponse, error)

	HardwarePartialUpdateWithResponse(ctx context.Context, id int32, body HardwarePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwarePartialUpdateResponse, error)

	// HardwareUpdateWithBodyWithResponse request with any body
	HardwareUpdateWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareUpdateResponse, error)

	HardwareUpdateWithResponse(ctx context.Context, id int32, body HardwareUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareUpdateResponse, error)

	// HardwareCheckinWithBodyWithResponse request with any body
	HardwareCheckinWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCheckinResponse, error)

	HardwareCheckinWithResponse(ctx context.Context, id int32, body HardwareCheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCheckinResponse, error)

	// HardwareCheckoutWithBodyWithResponse request with any body
	HardwareCheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCheckoutResponse, error)

	HardwareCheckoutWithResponse(ctx context.Context, id int32, body HardwareCheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCheckoutResponse, error)

	// HardwareidlicensesWithResponse request
	HardwareidlicensesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareidlicensesResponse, error)

	// LicensesWithResponse request
	LicensesWithResponse(ctx context.Context, params *LicensesParams, reqEditors ...RequestEditorFn) (*LicensesResponse, error)

	// TestinputWithBodyWithResponse request with any body
	TestinputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestinputResponse, error)

	TestinputWithResponse(ctx context.Context, body TestinputJSONRequestBody, reqEditors ...RequestEditorFn) (*TestinputResponse, error)

	// Licensesid3WithResponse request
	Licensesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Licensesid3Response, error)

	// LicensesidWithResponse request
	LicensesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*LicensesidResponse, error)

	// Licensesid2WithBodyWithResponse request with any body
	Licensesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Licensesid2Response, error)

	Licensesid2WithResponse(ctx context.Context, id int32, body Licensesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Licensesid2Response, error)

	// Licensesid1WithBodyWithResponse request with any body
	Licensesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Licensesid1Response, error)

	Licensesid1WithResponse(ctx context.Context, id int32, body Licensesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Licensesid1Response, error)

	// LicensesidseatsWithResponse request
	LicensesidseatsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*LicensesidseatsResponse, error)

	// LicensesidseatsseatIdWithResponse request
	LicensesidseatsseatIdWithResponse(ctx context.Context, id int32, seatId int32, reqEditors ...RequestEditorFn) (*LicensesidseatsseatIdResponse, error)

	// LicensesidseatsseatId2WithBodyWithResponse request with any body
	LicensesidseatsseatId2WithBodyWithResponse(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId2Response, error)

	LicensesidseatsseatId2WithResponse(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId2JSONRequestBody, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId2Response, error)

	// LicensesidseatsseatId1WithBodyWithResponse request with any body
	LicensesidseatsseatId1WithBodyWithResponse(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId1Response, error)

	LicensesidseatsseatId1WithResponse(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId1JSONRequestBody, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId1Response, error)

	// LocationsWithResponse request
	LocationsWithResponse(ctx context.Context, params *LocationsParams, reqEditors ...RequestEditorFn) (*LocationsResponse, error)

	// Locations2WithBodyWithResponse request with any body
	Locations2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Locations2Response, error)

	Locations2WithResponse(ctx context.Context, body Locations2JSONRequestBody, reqEditors ...RequestEditorFn) (*Locations2Response, error)

	// Locationsid2WithResponse request
	Locationsid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Locationsid2Response, error)

	// Locations1WithResponse request
	Locations1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Locations1Response, error)

	// LocationsidWithBodyWithResponse request with any body
	LocationsidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LocationsidResponse, error)

	LocationsidWithResponse(ctx context.Context, id int32, body LocationsidJSONRequestBody, reqEditors ...RequestEditorFn) (*LocationsidResponse, error)

	// Locations3WithBodyWithResponse request with any body
	Locations3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Locations3Response, error)

	Locations3WithResponse(ctx context.Context, id int32, body Locations3JSONRequestBody, reqEditors ...RequestEditorFn) (*Locations3Response, error)

	// MaintenancesWithResponse request
	MaintenancesWithResponse(ctx context.Context, params *MaintenancesParams, reqEditors ...RequestEditorFn) (*MaintenancesResponse, error)

	// Maintenances1WithBodyWithResponse request with any body
	Maintenances1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Maintenances1Response, error)

	Maintenances1WithResponse(ctx context.Context, body Maintenances1JSONRequestBody, reqEditors ...RequestEditorFn) (*Maintenances1Response, error)

	// MaintenancesidWithResponse request
	MaintenancesidWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*MaintenancesidResponse, error)

	// ManufacturersWithResponse request
	ManufacturersWithResponse(ctx context.Context, params *ManufacturersParams, reqEditors ...RequestEditorFn) (*ManufacturersResponse, error)

	// Manufacturers1WithBodyWithResponse request with any body
	Manufacturers1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Manufacturers1Response, error)

	Manufacturers1WithResponse(ctx context.Context, body Manufacturers1JSONRequestBody, reqEditors ...RequestEditorFn) (*Manufacturers1Response, error)

	// Manufacturersid2WithResponse request
	Manufacturersid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Manufacturersid2Response, error)

	// Manufacturersid1WithResponse request
	Manufacturersid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Manufacturersid1Response, error)

	// ManufacturersidWithBodyWithResponse request with any body
	ManufacturersidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManufacturersidResponse, error)

	ManufacturersidWithResponse(ctx context.Context, id int32, body ManufacturersidJSONRequestBody, reqEditors ...RequestEditorFn) (*ManufacturersidResponse, error)

	// Manufacturersid3WithBodyWithResponse request with any body
	Manufacturersid3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Manufacturersid3Response, error)

	Manufacturersid3WithResponse(ctx context.Context, id int32, body Manufacturersid3JSONRequestBody, reqEditors ...RequestEditorFn) (*Manufacturersid3Response, error)

	// ModelsWithResponse request
	ModelsWithResponse(ctx context.Context, params *ModelsParams, reqEditors ...RequestEditorFn) (*ModelsResponse, error)

	// Models1WithBodyWithResponse request with any body
	Models1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Models1Response, error)

	Models1WithResponse(ctx context.Context, body Models1JSONRequestBody, reqEditors ...RequestEditorFn) (*Models1Response, error)

	// Modelsid3WithResponse request
	Modelsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Modelsid3Response, error)

	// ModelsidWithResponse request
	ModelsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ModelsidResponse, error)

	// Modelsid2WithBodyWithResponse request with any body
	Modelsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modelsid2Response, error)

	Modelsid2WithResponse(ctx context.Context, id int32, body Modelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Modelsid2Response, error)

	// Modelsid1WithBodyWithResponse request with any body
	Modelsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modelsid1Response, error)

	Modelsid1WithResponse(ctx context.Context, id int32, body Modelsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Modelsid1Response, error)

	// ReportsactivityWithResponse request
	ReportsactivityWithResponse(ctx context.Context, params *ReportsactivityParams, reqEditors ...RequestEditorFn) (*ReportsactivityResponse, error)

	// Backups1WithResponse request
	Backups1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Backups1Response, error)

	// BackupsdownloadfileWithResponse request
	BackupsdownloadfileWithResponse(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*BackupsdownloadfileResponse, error)

	// StatuslabelsWithResponse request
	StatuslabelsWithResponse(ctx context.Context, params *StatuslabelsParams, reqEditors ...RequestEditorFn) (*StatuslabelsResponse, error)

	// Statuslabels1WithBodyWithResponse request with any body
	Statuslabels1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabels1Response, error)

	Statuslabels1WithResponse(ctx context.Context, body Statuslabels1JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabels1Response, error)

	// Statuslabelsid1WithResponse request
	Statuslabelsid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Statuslabelsid1Response, error)

	// StatuslabelsidWithResponse request
	StatuslabelsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StatuslabelsidResponse, error)

	// Statuslabelsid3WithBodyWithResponse request with any body
	Statuslabelsid3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabelsid3Response, error)

	Statuslabelsid3WithResponse(ctx context.Context, id int32, body Statuslabelsid3JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabelsid3Response, error)

	// Statuslabelsid2WithBodyWithResponse request with any body
	Statuslabelsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabelsid2Response, error)

	Statuslabelsid2WithResponse(ctx context.Context, id int32, body Statuslabelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabelsid2Response, error)

	// StatuslabelsidassetlistWithResponse request
	StatuslabelsidassetlistWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StatuslabelsidassetlistResponse, error)

	// SuppliersWithResponse request
	SuppliersWithResponse(ctx context.Context, params *SuppliersParams, reqEditors ...RequestEditorFn) (*SuppliersResponse, error)

	// SuppliersidWithResponse request
	SuppliersidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*SuppliersidResponse, error)

	// UsersWithResponse request
	UsersWithResponse(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*UsersResponse, error)

	// Users2WithBodyWithResponse request with any body
	Users2WithBodyWithResponse(ctx context.Context, params *Users2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Users2Response, error)

	Users2WithResponse(ctx context.Context, params *Users2Params, body Users2JSONRequestBody, reqEditors ...RequestEditorFn) (*Users2Response, error)

	// UsersmeWithResponse request
	UsersmeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersmeResponse, error)

	// Usersid1WithResponse request
	Usersid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Usersid1Response, error)

	// UsersidWithResponse request
	UsersidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidResponse, error)

	// Users3WithBodyWithResponse request with any body
	Users3WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Users3Response, error)

	Users3WithResponse(ctx context.Context, id string, body Users3JSONRequestBody, reqEditors ...RequestEditorFn) (*Users3Response, error)

	// Usersid2WithBodyWithResponse request with any body
	Usersid2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Usersid2Response, error)

	Usersid2WithResponse(ctx context.Context, id string, body Usersid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Usersid2Response, error)

	// UsersidaccessoriesWithResponse request
	UsersidaccessoriesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidaccessoriesResponse, error)

	// UsersidassetsWithResponse request
	UsersidassetsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidassetsResponse, error)

	// UsersidlicensesWithResponse request
	UsersidlicensesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidlicensesResponse, error)
}

type AccessoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int         `json:"id,omitempty"`
			Image    *interface{} `json:"image,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Manufacturer *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			MinQty       *int         `json:"min_qty,omitempty"`
			ModelNumber  *string      `json:"model_number,omitempty"`
			Name         *string      `json:"name,omitempty"`
			Notes        *interface{} `json:"notes,omitempty"`
			OrderNumber  *interface{} `json:"order_number,omitempty"`
			PurchaseCost *interface{} `json:"purchase_cost,omitempty"`
			PurchaseDate *interface{} `json:"purchase_date,omitempty"`
			Qty          *int         `json:"qty,omitempty"`
			RemainingQty *int         `json:"remaining_qty,omitempty"`
			Supplier     *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"supplier,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AccessoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Accessories1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Accessories1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Accessories1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Accessoriesid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Accessoriesid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Accessoriesid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessoriesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AccessoriesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessoriesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Accessoriesid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Accessoriesid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Accessoriesid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Accessoriesid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Accessoriesid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Accessoriesid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessoriesidcheckedoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AccessoriesidcheckedoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessoriesidcheckedoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessoriesidcheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AccessoriesidcheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessoriesidcheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Accessoriesidcheckedout1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Accessoriesidcheckedout1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Accessoriesidcheckedout1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Categories1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Categories1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Categories1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Categories2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Categories2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Categories2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Categoriesid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Categoriesid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Categoriesid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Categoriesid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Categoriesid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Categoriesid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Categoriesid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Categoriesid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Categoriesid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CategoriesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CategoriesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CategoriesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AccessoriesCount *int `json:"accessories_count,omitempty"`
			AssetsCount      *int `json:"assets_count,omitempty"`
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			ComponentsCount  *int `json:"components_count,omitempty"`
			ConsumablesCount *int `json:"consumables_count,omitempty"`
			CreatedAt        *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id            *int         `json:"id,omitempty"`
			Image         *interface{} `json:"image,omitempty"`
			LicensesCount *int         `json:"licenses_count,omitempty"`
			Name          *string      `json:"name,omitempty"`
			UpdatedAt     *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UsersCount *int `json:"users_count,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Companies1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			CreatedAt *string `json:"created_at,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			UpdatedAt *string `json:"updated_at,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Companies1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Companies1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Companiesid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Companiesid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Companiesid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompaniesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessoriesCount *int `json:"accessories_count,omitempty"`
		AssetsCount      *int `json:"assets_count,omitempty"`
		AvailableActions *struct {
			Delete *bool `json:"delete,omitempty"`
			Update *bool `json:"update,omitempty"`
		} `json:"available_actions,omitempty"`
		ComponentsCount  *int `json:"components_count,omitempty"`
		ConsumablesCount *int `json:"consumables_count,omitempty"`
		CreatedAt        *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"created_at,omitempty"`
		Id            *int         `json:"id,omitempty"`
		Image         *interface{} `json:"image,omitempty"`
		LicensesCount *int         `json:"licenses_count,omitempty"`
		Name          *string      `json:"name,omitempty"`
		UpdatedAt     *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"updated_at,omitempty"`
		UsersCount *int `json:"users_count,omitempty"`
	}
	JSON401 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
	JSON404 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CompaniesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompaniesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Companiesid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Companiesid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Companiesid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Companiesid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Companiesid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Companiesid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			Company *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int         `json:"id,omitempty"`
			Image    *interface{} `json:"image,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			MinAmt       *int    `json:"min_amt,omitempty"`
			Name         *string `json:"name,omitempty"`
			OrderNumber  *string `json:"order_number,omitempty"`
			PurchaseCost *string `json:"purchase_cost,omitempty"`
			PurchaseDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			Qty       *int         `json:"qty,omitempty"`
			Remaining *int         `json:"remaining,omitempty"`
			Serial    *interface{} `json:"serial,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *int `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Components1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Components1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Components1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Componentsid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Componentsid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Componentsid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ComponentsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Componentsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Componentsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Componentsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Componentsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Componentsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Componentsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsidassetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ComponentsidassetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsidassetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsidcheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ComponentsidcheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsidcheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComponentsidcheckoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ComponentsidcheckoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComponentsidcheckoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConsumablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			Company *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id           *int         `json:"id,omitempty"`
			Image        *interface{} `json:"image,omitempty"`
			ItemNo       *string      `json:"item_no,omitempty"`
			Location     *interface{} `json:"location,omitempty"`
			Manufacturer *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			MinAmt       *int         `json:"min_amt,omitempty"`
			ModelNumber  *interface{} `json:"model_number,omitempty"`
			Name         *string      `json:"name,omitempty"`
			OrderNumber  *string      `json:"order_number,omitempty"`
			PurchaseCost *string      `json:"purchase_cost,omitempty"`
			PurchaseDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			Qty       *int `json:"qty,omitempty"`
			Remaining *int `json:"remaining,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ConsumablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConsumablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Consumables1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Consumables1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Consumables1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Consumablesid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Consumablesid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Consumablesid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConsumablesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ConsumablesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConsumablesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Consumablesid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Consumablesid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Consumablesid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Consumables2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Consumables2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Consumables2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConsumablesidcheckoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ConsumablesidcheckoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConsumablesidcheckoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepartmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int         `json:"id,omitempty"`
			Image    *interface{} `json:"image,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Manager   *interface{} `json:"manager,omitempty"`
			Name      *string      `json:"name,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UsersCount *string `json:"users_count,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DepartmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepartmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Departments1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			CreatedAt *string      `json:"created_at,omitempty"`
			Id        *int         `json:"id,omitempty"`
			ManagerId *interface{} `json:"manager_id,omitempty"`
			Name      *string      `json:"name,omitempty"`
			UpdatedAt *string      `json:"updated_at,omitempty"`
			UserId    *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Departments1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Departments1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Departmentsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Departmentsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Departmentsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepartmentsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailableActions *struct {
			Delete *bool `json:"delete,omitempty"`
			Update *bool `json:"update,omitempty"`
		} `json:"available_actions,omitempty"`
		Company   *interface{} `json:"company,omitempty"`
		CreatedAt *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"created_at,omitempty"`
		Id       *int         `json:"id,omitempty"`
		Image    *interface{} `json:"image,omitempty"`
		Location *struct {
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"location,omitempty"`
		Manager   *interface{} `json:"manager,omitempty"`
		Name      *string      `json:"name,omitempty"`
		UpdatedAt *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"updated_at,omitempty"`
		UsersCount *string `json:"users_count,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DepartmentsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepartmentsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Departmentsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			CompanyId  *interface{} `json:"company_id,omitempty"`
			CreatedAt  *string      `json:"created_at,omitempty"`
			DeletedAt  *interface{} `json:"deleted_at,omitempty"`
			Id         *int         `json:"id,omitempty"`
			Image      *interface{} `json:"image,omitempty"`
			LocationId *int         `json:"location_id,omitempty"`
			ManagerId  *interface{} `json:"manager_id,omitempty"`
			Name       *string      `json:"name,omitempty"`
			Notes      *interface{} `json:"notes,omitempty"`
			UpdatedAt  *string      `json:"updated_at,omitempty"`
			UserId     *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Departmentsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Departmentsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DepartmentsEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			CompanyId  *interface{} `json:"company_id,omitempty"`
			CreatedAt  *string      `json:"created_at,omitempty"`
			DeletedAt  *interface{} `json:"deleted_at,omitempty"`
			Id         *int         `json:"id,omitempty"`
			Image      *interface{} `json:"image,omitempty"`
			LocationId *int         `json:"location_id,omitempty"`
			ManagerId  *interface{} `json:"manager_id,omitempty"`
			Name       *string      `json:"name,omitempty"`
			Notes      *interface{} `json:"notes,omitempty"`
			UpdatedAt  *string      `json:"updated_at,omitempty"`
			UserId     *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DepartmentsEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DepartmentsEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fields1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			DbColumnName     *string      `json:"db_column_name,omitempty"`
			FieldValues      *interface{} `json:"field_values,omitempty"`
			FieldValuesArray *interface{} `json:"field_values_array,omitempty"`
			Format           *string      `json:"format,omitempty"`
			Id               *int         `json:"id,omitempty"`
			Name             *string      `json:"name,omitempty"`
			Required         *bool        `json:"required,omitempty"`
			Type             *string      `json:"type,omitempty"`
			UpdatedAt        *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Fields1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fields1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fields2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Fields2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fields2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fieldsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Fieldsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fieldsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fieldsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Fieldsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fieldsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsidassociateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsidassociateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsidassociateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsiddisassociateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsiddisassociateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsiddisassociateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Fields *struct {
				Rows *[]struct {
					CreatedAt *struct {
						Datetime  *string `json:"datetime,omitempty"`
						Formatted *string `json:"formatted,omitempty"`
					} `json:"created_at,omitempty"`
					DbColumnName     *string      `json:"db_column_name,omitempty"`
					FieldValues      *interface{} `json:"field_values,omitempty"`
					FieldValuesArray *interface{} `json:"field_values_array,omitempty"`
					Format           *string      `json:"format,omitempty"`
					Id               *int         `json:"id,omitempty"`
					Name             *string      `json:"name,omitempty"`
					Required         *int         `json:"required,omitempty"`
					Type             *string      `json:"type,omitempty"`
					UpdatedAt        *struct {
						Datetime  *string `json:"datetime,omitempty"`
						Formatted *string `json:"formatted,omitempty"`
					} `json:"updated_at,omitempty"`
				} `json:"rows,omitempty"`
				Total *int `json:"total,omitempty"`
			} `json:"fields,omitempty"`
			Id     *int `json:"id,omitempty"`
			Models *struct {
				Rows *[]struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"rows,omitempty"`
				Total *int `json:"total,omitempty"`
			} `json:"models,omitempty"`
			Name      *string `json:"name,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r FieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fieldsetsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Fieldsetsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fieldsetsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsetsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsetsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsetsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Fieldsetsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Fieldsetsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Fieldsetsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FieldsetsidfieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FieldsetsidfieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FieldsetsidfieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Groups1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Groups1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Groups1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Groupsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Groupsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Groupsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Groupsid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Groupsid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Groupsid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GroupsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Groupsid4Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Groupsid4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Groupsid4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Groupsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Groupsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Groupsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			Age              *string      `json:"age,omitempty"`
			AltBarcode       *interface{} `json:"alt_barcode,omitempty"`
			AssetTag         *string      `json:"asset_tag,omitempty"`
			AssignedTo       *interface{} `json:"assigned_to,omitempty"`
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Restore  *bool `json:"restore,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			CheckinCounter  *int         `json:"checkin_counter,omitempty"`
			CheckoutCounter *int         `json:"checkout_counter,omitempty"`
			Company         *interface{} `json:"company,omitempty"`
			CreatedAt       *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
			DeletedAt    *interface{}            `json:"deleted_at,omitempty"`
			Eol          *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"eol,omitempty"`
			ExpectedCheckin *interface{} `json:"expected_checkin,omitempty"`
			Id              *int         `json:"id,omitempty"`
			Image           *string      `json:"image,omitempty"`
			LastAuditDate   *interface{} `json:"last_audit_date,omitempty"`
			LastCheckout    *interface{} `json:"last_checkout,omitempty"`
			Location        *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Manufacturer *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			Model *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"model,omitempty"`
			ModelNumber   *string      `json:"model_number,omitempty"`
			Name          *string      `json:"name,omitempty"`
			NextAuditDate *interface{} `json:"next_audit_date,omitempty"`
			Notes         *string      `json:"notes,omitempty"`
			OrderNumber   *string      `json:"order_number,omitempty"`
			PurchaseCost  *string      `json:"purchase_cost,omitempty"`
			PurchaseDate  *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			Qr              *string `json:"qr,omitempty"`
			RequestsCounter *int    `json:"requests_counter,omitempty"`
			RtdLocation     *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"rtd_location,omitempty"`
			Serial      *string `json:"serial,omitempty"`
			StatusLabel *struct {
				Id         *int    `json:"id,omitempty"`
				Name       *string `json:"name,omitempty"`
				StatusMeta *string `json:"status_meta,omitempty"`
				StatusType *string `json:"status_type,omitempty"`
			} `json:"status_label,omitempty"`
			Supplier *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"supplier,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool        `json:"user_can_checkout,omitempty"`
			WarrantyExpires *interface{} `json:"warranty_expires,omitempty"`
			WarrantyMonths  *interface{} `json:"warranty_months,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareidrestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			AssetTag      *string `json:"asset_tag,omitempty"`
			NextAuditDate *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"next_audit_date,omitempty"`
			Note *string `json:"note,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareidrestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareidrestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareauditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareauditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareauditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareauditdueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareauditdueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareauditdueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareauditoverdueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareauditoverdueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareauditoverdueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareBySerialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareBySerialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareBySerialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareByAssetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareByAssetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareByAssetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwarePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		Messages *struct {
			StatusId *[]string `json:"status_id,omitempty"`
		} `json:"messages,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwarePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwarePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareCheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareCheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareCheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareCheckoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HardwareCheckoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareCheckoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardwareidlicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r HardwareidlicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardwareidlicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			ExpirationDate *interface{} `json:"expiration_date,omitempty"`
			FreeSeatsCount *int         `json:"free_seats_count,omitempty"`
			Id             *int         `json:"id,omitempty"`
			LicenseEmail   *string      `json:"license_email,omitempty"`
			LicenseName    *string      `json:"license_name,omitempty"`
			Maintained     *bool        `json:"maintained,omitempty"`
			Manufacturer   *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			Name         *string `json:"name,omitempty"`
			Notes        *string `json:"notes,omitempty"`
			OrderNumber  *string `json:"order_number,omitempty"`
			ProductKey   *string `json:"product_key,omitempty"`
			PurchaseCost *string `json:"purchase_cost,omitempty"`
			PurchaseDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			PurchaseOrder *string      `json:"purchase_order,omitempty"`
			Seats         *int         `json:"seats,omitempty"`
			Supplier      *interface{} `json:"supplier,omitempty"`
			UpdatedAt     *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestinputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			CreatedAt *string `json:"created_at,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			Seats     *string `json:"seats,omitempty"`
			UpdatedAt *string `json:"updated_at,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r TestinputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestinputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Licensesid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Licensesid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Licensesid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailableActions *struct {
			Checkin  *bool `json:"checkin,omitempty"`
			Checkout *bool `json:"checkout,omitempty"`
			Clone    *bool `json:"clone,omitempty"`
			Delete   *bool `json:"delete,omitempty"`
			Update   *bool `json:"update,omitempty"`
		} `json:"available_actions,omitempty"`
		Company   *interface{} `json:"company,omitempty"`
		CreatedAt *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"created_at,omitempty"`
		ExpirationDate *interface{} `json:"expiration_date,omitempty"`
		FreeSeatsCount *int         `json:"free_seats_count,omitempty"`
		Id             *int         `json:"id,omitempty"`
		LicenseEmail   *string      `json:"license_email,omitempty"`
		LicenseName    *string      `json:"license_name,omitempty"`
		Maintained     *bool        `json:"maintained,omitempty"`
		Manufacturer   *struct {
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"manufacturer,omitempty"`
		Name         *string `json:"name,omitempty"`
		Notes        *string `json:"notes,omitempty"`
		OrderNumber  *string `json:"order_number,omitempty"`
		ProductKey   *string `json:"product_key,omitempty"`
		PurchaseCost *string `json:"purchase_cost,omitempty"`
		PurchaseDate *struct {
			Date      *string `json:"date,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"purchase_date,omitempty"`
		PurchaseOrder *string      `json:"purchase_order,omitempty"`
		Seats         *int         `json:"seats,omitempty"`
		Supplier      *interface{} `json:"supplier,omitempty"`
		UpdatedAt     *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"updated_at,omitempty"`
		UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LicensesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Licensesid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Licensesid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Licensesid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Licensesid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Licensesid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Licensesid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesidseatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AssignedAsset *interface{} `json:"assigned_asset,omitempty"`
			AssignedUser  *struct {
				Department *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"department,omitempty"`
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"assigned_user,omitempty"`
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Id        *int `json:"id,omitempty"`
			LicenseId *int `json:"license_id,omitempty"`
			Location  *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Name            *string `json:"name,omitempty"`
			Reassignable    *bool   `json:"reassignable,omitempty"`
			UserCanCheckout *bool   `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LicensesidseatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesidseatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesidseatsseatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AssignedAsset *interface{} `json:"assigned_asset,omitempty"`
		AssignedUser  *struct {
			Department *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"department,omitempty"`
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"assigned_user,omitempty"`
		AvailableActions *struct {
			Checkin  *bool `json:"checkin,omitempty"`
			Checkout *bool `json:"checkout,omitempty"`
			Clone    *bool `json:"clone,omitempty"`
			Delete   *bool `json:"delete,omitempty"`
			Update   *bool `json:"update,omitempty"`
		} `json:"available_actions,omitempty"`
		Id        *int `json:"id,omitempty"`
		LicenseId *int `json:"license_id,omitempty"`
		Location  *struct {
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"location,omitempty"`
		Reassignable    *bool `json:"reassignable,omitempty"`
		UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LicensesidseatsseatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesidseatsseatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesidseatsseatId2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			AssetId    *interface{} `json:"asset_id,omitempty"`
			AssignedTo *string      `json:"assigned_to,omitempty"`
			CreatedAt  *string      `json:"created_at,omitempty"`
			DeletedAt  *interface{} `json:"deleted_at,omitempty"`
			Id         *int         `json:"id,omitempty"`
			LicenseId  *int         `json:"license_id,omitempty"`
			Notes      *interface{} `json:"notes,omitempty"`
			UpdatedAt  *string      `json:"updated_at,omitempty"`
			UserId     *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LicensesidseatsseatId2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesidseatsseatId2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LicensesidseatsseatId1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			AssetId    *interface{} `json:"asset_id,omitempty"`
			AssignedTo *string      `json:"assigned_to,omitempty"`
			CreatedAt  *string      `json:"created_at,omitempty"`
			DeletedAt  *interface{} `json:"deleted_at,omitempty"`
			Id         *int         `json:"id,omitempty"`
			LicenseId  *int         `json:"license_id,omitempty"`
			Notes      *interface{} `json:"notes,omitempty"`
			UpdatedAt  *string      `json:"updated_at,omitempty"`
			UserId     *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LicensesidseatsseatId1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LicensesidseatsseatId1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Locations2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Locations2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Locations2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Locationsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string      `json:"messages,omitempty"`
		Payload  *interface{} `json:"payload,omitempty"`
		Status   *string      `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Locationsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Locationsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Locations1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Locations1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Locations1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LocationsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r LocationsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LocationsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Locations3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Locations3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Locations3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MaintenancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			Asset *struct {
				AssetTag *string `json:"asset_tag,omitempty"`
				Id       *int    `json:"id,omitempty"`
				Name     *string `json:"name,omitempty"`
			} `json:"asset,omitempty"`
			AssetMaintenanceTime *int    `json:"asset_maintenance_time,omitempty"`
			AssetMaintenanceType *string `json:"asset_maintenance_type,omitempty"`
			AvailableActions     *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			CompletionDate *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"completion_date,omitempty"`
			Cost      *string `json:"cost,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int `json:"id,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Notes     *string `json:"notes,omitempty"`
			StartDate *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"start_date,omitempty"`
			Supplier *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"supplier,omitempty"`
			Title     *string `json:"title,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserId *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"user_id,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r MaintenancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MaintenancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Maintenances1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Maintenances1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Maintenances1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MaintenancesidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			Asset *struct {
				SnipeitCpu4         *interface{} `json:"_snipeit_cpu_4,omitempty"`
				SnipeitImei1        *interface{} `json:"_snipeit_imei_1,omitempty"`
				SnipeitMacAddress5  *interface{} `json:"_snipeit_mac_address_5,omitempty"`
				SnipeitPhoneNumber2 *interface{} `json:"_snipeit_phone_number_2,omitempty"`
				SnipeitRam3         *interface{} `json:"_snipeit_ram_3,omitempty"`
				Accepted            *interface{} `json:"accepted,omitempty"`
				Archived            *int         `json:"archived,omitempty"`
				AssetTag            *string      `json:"asset_tag,omitempty"`
				AssignedTo          *interface{} `json:"assigned_to,omitempty"`
				AssignedType        *interface{} `json:"assigned_type,omitempty"`
				CheckinCounter      *int         `json:"checkin_counter,omitempty"`
				CheckoutCounter     *int         `json:"checkout_counter,omitempty"`
				CompanyId           *interface{} `json:"company_id,omitempty"`
				CreatedAt           *string      `json:"created_at,omitempty"`
				DeletedAt           *interface{} `json:"deleted_at,omitempty"`
				Depreciate          *interface{} `json:"depreciate,omitempty"`
				ExpectedCheckin     *interface{} `json:"expected_checkin,omitempty"`
				Id                  *int         `json:"id,omitempty"`
				Image               *interface{} `json:"image,omitempty"`
				LastAuditDate       *interface{} `json:"last_audit_date,omitempty"`
				LastCheckout        *interface{} `json:"last_checkout,omitempty"`
				LocationId          *int         `json:"location_id,omitempty"`
				ModelId             *int         `json:"model_id,omitempty"`
				Name                *interface{} `json:"name,omitempty"`
				NextAuditDate       *interface{} `json:"next_audit_date,omitempty"`
				Notes               *string      `json:"notes,omitempty"`
				OrderNumber         *string      `json:"order_number,omitempty"`
				Physical            *int         `json:"physical,omitempty"`
				PurchaseCost        *string      `json:"purchase_cost,omitempty"`
				PurchaseDate        *string      `json:"purchase_date,omitempty"`
				Requestable         *int         `json:"requestable,omitempty"`
				RequestsCounter     *int         `json:"requests_counter,omitempty"`
				RtdLocationId       *int         `json:"rtd_location_id,omitempty"`
				Serial              *string      `json:"serial,omitempty"`
				StatusId            *int         `json:"status_id,omitempty"`
				SupplierId          *int         `json:"supplier_id,omitempty"`
				UpdatedAt           *string      `json:"updated_at,omitempty"`
				UserId              *int         `json:"user_id,omitempty"`
				WarrantyMonths      *interface{} `json:"warranty_months,omitempty"`
			} `json:"asset,omitempty"`
			AssetId              *int         `json:"asset_id,omitempty"`
			AssetMaintenanceTime *interface{} `json:"asset_maintenance_time,omitempty"`
			AssetMaintenanceType *string      `json:"asset_maintenance_type,omitempty"`
			CompletionDate       *interface{} `json:"completion_date,omitempty"`
			Cost                 *interface{} `json:"cost,omitempty"`
			CreatedAt            *string      `json:"created_at,omitempty"`
			DeletedAt            *string      `json:"deleted_at,omitempty"`
			Id                   *int         `json:"id,omitempty"`
			IsWarranty           *int         `json:"is_warranty,omitempty"`
			Notes                *interface{} `json:"notes,omitempty"`
			StartDate            *string      `json:"start_date,omitempty"`
			SupplierId           *int         `json:"supplier_id,omitempty"`
			Title                *string      `json:"title,omitempty"`
			UpdatedAt            *string      `json:"updated_at,omitempty"`
			UserId               *int         `json:"user_id,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r MaintenancesidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MaintenancesidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManufacturersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AccessoriesCount *int `json:"accessories_count,omitempty"`
			AssetsCount      *int `json:"assets_count,omitempty"`
			AvailableActions *struct {
				Delete  *bool `json:"delete,omitempty"`
				Restore *bool `json:"restore,omitempty"`
				Update  *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			ConsumablesCount *int `json:"consumables_count,omitempty"`
			CreatedAt        *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			DeletedAt     *interface{} `json:"deleted_at,omitempty"`
			Id            *int         `json:"id,omitempty"`
			Image         *string      `json:"image,omitempty"`
			LicensesCount *int         `json:"licenses_count,omitempty"`
			Name          *string      `json:"name,omitempty"`
			SupportEmail  *string      `json:"support_email,omitempty"`
			SupportPhone  *string      `json:"support_phone,omitempty"`
			SupportUrl    *string      `json:"support_url,omitempty"`
			UpdatedAt     *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			Url *string `json:"url,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ManufacturersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManufacturersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Manufacturers1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Manufacturers1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Manufacturers1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Manufacturersid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Manufacturersid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Manufacturersid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Manufacturersid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Manufacturersid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Manufacturersid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManufacturersidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ManufacturersidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManufacturersidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Manufacturersid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Manufacturersid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Manufacturersid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Models1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Models1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Models1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modelsid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Modelsid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modelsid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModelsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ModelsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModelsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modelsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Modelsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modelsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modelsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	}
	JSON405 *struct {
		Messages *string `json:"messages,omitempty"`
		Status   *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r Modelsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modelsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportsactivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ReportsactivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportsactivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Backups1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Backups1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Backups1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackupsdownloadfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r BackupsdownloadfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackupsdownloadfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatuslabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AssetsCount      *int `json:"assets_count,omitempty"`
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Color     *interface{} `json:"color,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			Notes     *string `json:"notes,omitempty"`
			ShowInNav *bool   `json:"show_in_nav,omitempty"`
			Type      *string `json:"type,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r StatuslabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatuslabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Statuslabels1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			Archived   *int    `json:"archived,omitempty"`
			CreatedAt  *string `json:"created_at,omitempty"`
			Deployable *int    `json:"deployable,omitempty"`
			Id         *int    `json:"id,omitempty"`
			Name       *string `json:"name,omitempty"`
			Pending    *int    `json:"pending,omitempty"`
			UpdatedAt  *string `json:"updated_at,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Statuslabels1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Statuslabels1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Statuslabelsid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Statuslabelsid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Statuslabelsid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatuslabelsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AssetsCount      *int `json:"assets_count,omitempty"`
		AvailableActions *struct {
			Delete *bool `json:"delete,omitempty"`
			Update *bool `json:"update,omitempty"`
		} `json:"available_actions,omitempty"`
		Color     *interface{} `json:"color,omitempty"`
		CreatedAt *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"created_at,omitempty"`
		Id        *int    `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
		Notes     *string `json:"notes,omitempty"`
		ShowInNav *bool   `json:"show_in_nav,omitempty"`
		Type      *string `json:"type,omitempty"`
		UpdatedAt *struct {
			Datetime  *string `json:"datetime,omitempty"`
			Formatted *string `json:"formatted,omitempty"`
		} `json:"updated_at,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r StatuslabelsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatuslabelsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Statuslabelsid3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			Archived   *int    `json:"archived,omitempty"`
			CreatedAt  *string `json:"created_at,omitempty"`
			Deployable *int    `json:"deployable,omitempty"`
			Id         *int    `json:"id,omitempty"`
			Name       *string `json:"name,omitempty"`
			Pending    *int    `json:"pending,omitempty"`
			UpdatedAt  *string `json:"updated_at,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Statuslabelsid3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Statuslabelsid3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Statuslabelsid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Messages *string `json:"messages,omitempty"`
		Payload  *struct {
			Archived   *int    `json:"archived,omitempty"`
			CreatedAt  *string `json:"created_at,omitempty"`
			Deployable *int    `json:"deployable,omitempty"`
			Id         *int    `json:"id,omitempty"`
			Name       *string `json:"name,omitempty"`
			Pending    *int    `json:"pending,omitempty"`
			UpdatedAt  *string `json:"updated_at,omitempty"`
		} `json:"payload,omitempty"`
		Status *string `json:"status,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Statuslabelsid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Statuslabelsid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatuslabelsidassetlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r StatuslabelsidassetlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatuslabelsidassetlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuppliersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r SuppliersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuppliersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuppliersidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r SuppliersidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuppliersidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Users2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Users2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Users2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersmeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersmeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersmeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Usersid1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Usersid1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Usersid1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Users3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Users3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Users3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Usersid2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Usersid2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Usersid2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersidaccessoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int    `json:"id,omitempty"`
			Image    *string `json:"image,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Manufacturer *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			MinQty       *int         `json:"min_qty,omitempty"`
			ModelNumber  *string      `json:"model_number,omitempty"`
			Name         *string      `json:"name,omitempty"`
			Notes        *interface{} `json:"notes,omitempty"`
			OrderNumber  *interface{} `json:"order_number,omitempty"`
			PurchaseCost *interface{} `json:"purchase_cost,omitempty"`
			PurchaseDate *interface{} `json:"purchase_date,omitempty"`
			Qty          *int         `json:"qty,omitempty"`
			RemainingQty *int         `json:"remaining_qty,omitempty"`
			Supplier     *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"supplier,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersidaccessoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersidaccessoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersidassetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersidassetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersidassetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersidlicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rows *[]struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Category *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"category,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			ExpirationDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"expiration_date,omitempty"`
			FreeSeatsCount *int    `json:"free_seats_count,omitempty"`
			Id             *int    `json:"id,omitempty"`
			LicenseEmail   *string `json:"license_email,omitempty"`
			LicenseName    *string `json:"license_name,omitempty"`
			Maintained     *bool   `json:"maintained,omitempty"`
			Manufacturer   *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			Name         *string `json:"name,omitempty"`
			Notes        *string `json:"notes,omitempty"`
			OrderNumber  *string `json:"order_number,omitempty"`
			ProductKey   *string `json:"product_key,omitempty"`
			PurchaseCost *string `json:"purchase_cost,omitempty"`
			PurchaseDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			PurchaseOrder *string `json:"purchase_order,omitempty"`
			Seats         *int    `json:"seats,omitempty"`
			Supplier      *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"supplier,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		} `json:"rows,omitempty"`
		Total *int `json:"total,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersidlicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersidlicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessoriesWithResponse request returning *AccessoriesResponse
func (c *ClientWithResponses) AccessoriesWithResponse(ctx context.Context, params *AccessoriesParams, reqEditors ...RequestEditorFn) (*AccessoriesResponse, error) {
	rsp, err := c.Accessories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesResponse(rsp)
}

// Accessories1WithBodyWithResponse request with arbitrary body returning *Accessories1Response
func (c *ClientWithResponses) Accessories1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessories1Response, error) {
	rsp, err := c.Accessories1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessories1Response(rsp)
}

func (c *ClientWithResponses) Accessories1WithResponse(ctx context.Context, body Accessories1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessories1Response, error) {
	rsp, err := c.Accessories1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessories1Response(rsp)
}

// Accessoriesid3WithResponse request returning *Accessoriesid3Response
func (c *ClientWithResponses) Accessoriesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Accessoriesid3Response, error) {
	rsp, err := c.Accessoriesid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesid3Response(rsp)
}

// AccessoriesidWithResponse request returning *AccessoriesidResponse
func (c *ClientWithResponses) AccessoriesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*AccessoriesidResponse, error) {
	rsp, err := c.Accessoriesid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesidResponse(rsp)
}

// Accessoriesid2WithBodyWithResponse request with arbitrary body returning *Accessoriesid2Response
func (c *ClientWithResponses) Accessoriesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesid2Response, error) {
	rsp, err := c.Accessoriesid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesid2Response(rsp)
}

func (c *ClientWithResponses) Accessoriesid2WithResponse(ctx context.Context, id int32, body Accessoriesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesid2Response, error) {
	rsp, err := c.Accessoriesid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesid2Response(rsp)
}

// Accessoriesid1WithBodyWithResponse request with arbitrary body returning *Accessoriesid1Response
func (c *ClientWithResponses) Accessoriesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesid1Response, error) {
	rsp, err := c.Accessoriesid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesid1Response(rsp)
}

func (c *ClientWithResponses) Accessoriesid1WithResponse(ctx context.Context, id int32, body Accessoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesid1Response, error) {
	rsp, err := c.Accessoriesid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesid1Response(rsp)
}

// AccessoriesidcheckedoutWithResponse request returning *AccessoriesidcheckedoutResponse
func (c *ClientWithResponses) AccessoriesidcheckedoutWithResponse(ctx context.Context, id int32, params *AccessoriesidcheckedoutParams, reqEditors ...RequestEditorFn) (*AccessoriesidcheckedoutResponse, error) {
	rsp, err := c.Accessoriesidcheckedout(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesidcheckedoutResponse(rsp)
}

// AccessoriesidcheckinWithResponse request returning *AccessoriesidcheckinResponse
func (c *ClientWithResponses) AccessoriesidcheckinWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*AccessoriesidcheckinResponse, error) {
	rsp, err := c.Accessoriesidcheckin(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesidcheckinResponse(rsp)
}

// Accessoriesidcheckedout1WithBodyWithResponse request with arbitrary body returning *Accessoriesidcheckedout1Response
func (c *ClientWithResponses) Accessoriesidcheckedout1WithBodyWithResponse(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Accessoriesidcheckedout1Response, error) {
	rsp, err := c.Accessoriesidcheckedout1WithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesidcheckedout1Response(rsp)
}

func (c *ClientWithResponses) Accessoriesidcheckedout1WithResponse(ctx context.Context, id int32, params *Accessoriesidcheckedout1Params, body Accessoriesidcheckedout1JSONRequestBody, reqEditors ...RequestEditorFn) (*Accessoriesidcheckedout1Response, error) {
	rsp, err := c.Accessoriesidcheckedout1(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessoriesidcheckedout1Response(rsp)
}

// Categories1WithResponse request returning *Categories1Response
func (c *ClientWithResponses) Categories1WithResponse(ctx context.Context, params *Categories1Params, reqEditors ...RequestEditorFn) (*Categories1Response, error) {
	rsp, err := c.Categories1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategories1Response(rsp)
}

// Categories2WithBodyWithResponse request with arbitrary body returning *Categories2Response
func (c *ClientWithResponses) Categories2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Categories2Response, error) {
	rsp, err := c.Categories2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategories2Response(rsp)
}

func (c *ClientWithResponses) Categories2WithResponse(ctx context.Context, body Categories2JSONRequestBody, reqEditors ...RequestEditorFn) (*Categories2Response, error) {
	rsp, err := c.Categories2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategories2Response(rsp)
}

// Categoriesid2WithResponse request returning *Categoriesid2Response
func (c *ClientWithResponses) Categoriesid2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Categoriesid2Response, error) {
	rsp, err := c.Categoriesid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesid2Response(rsp)
}

// Categoriesid3WithResponse request returning *Categoriesid3Response
func (c *ClientWithResponses) Categoriesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Categoriesid3Response, error) {
	rsp, err := c.Categoriesid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesid3Response(rsp)
}

// Categoriesid1WithBodyWithResponse request with arbitrary body returning *Categoriesid1Response
func (c *ClientWithResponses) Categoriesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Categoriesid1Response, error) {
	rsp, err := c.Categoriesid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesid1Response(rsp)
}

func (c *ClientWithResponses) Categoriesid1WithResponse(ctx context.Context, id int32, body Categoriesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Categoriesid1Response, error) {
	rsp, err := c.Categoriesid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesid1Response(rsp)
}

// CategoriesidWithBodyWithResponse request with arbitrary body returning *CategoriesidResponse
func (c *ClientWithResponses) CategoriesidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CategoriesidResponse, error) {
	rsp, err := c.CategoriesidWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesidResponse(rsp)
}

func (c *ClientWithResponses) CategoriesidWithResponse(ctx context.Context, id int32, body CategoriesidJSONRequestBody, reqEditors ...RequestEditorFn) (*CategoriesidResponse, error) {
	rsp, err := c.Categoriesid(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCategoriesidResponse(rsp)
}

// CompaniesWithResponse request returning *CompaniesResponse
func (c *ClientWithResponses) CompaniesWithResponse(ctx context.Context, params *CompaniesParams, reqEditors ...RequestEditorFn) (*CompaniesResponse, error) {
	rsp, err := c.Companies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesResponse(rsp)
}

// Companies1WithBodyWithResponse request with arbitrary body returning *Companies1Response
func (c *ClientWithResponses) Companies1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companies1Response, error) {
	rsp, err := c.Companies1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompanies1Response(rsp)
}

func (c *ClientWithResponses) Companies1WithResponse(ctx context.Context, body Companies1JSONRequestBody, reqEditors ...RequestEditorFn) (*Companies1Response, error) {
	rsp, err := c.Companies1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompanies1Response(rsp)
}

// Companiesid3WithResponse request returning *Companiesid3Response
func (c *ClientWithResponses) Companiesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Companiesid3Response, error) {
	rsp, err := c.Companiesid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesid3Response(rsp)
}

// CompaniesidWithResponse request returning *CompaniesidResponse
func (c *ClientWithResponses) CompaniesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*CompaniesidResponse, error) {
	rsp, err := c.Companiesid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesidResponse(rsp)
}

// Companiesid2WithBodyWithResponse request with arbitrary body returning *Companiesid2Response
func (c *ClientWithResponses) Companiesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companiesid2Response, error) {
	rsp, err := c.Companiesid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesid2Response(rsp)
}

func (c *ClientWithResponses) Companiesid2WithResponse(ctx context.Context, id int32, body Companiesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Companiesid2Response, error) {
	rsp, err := c.Companiesid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesid2Response(rsp)
}

// Companiesid1WithBodyWithResponse request with arbitrary body returning *Companiesid1Response
func (c *ClientWithResponses) Companiesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Companiesid1Response, error) {
	rsp, err := c.Companiesid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesid1Response(rsp)
}

func (c *ClientWithResponses) Companiesid1WithResponse(ctx context.Context, id int32, body Companiesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Companiesid1Response, error) {
	rsp, err := c.Companiesid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompaniesid1Response(rsp)
}

// ComponentsWithResponse request returning *ComponentsResponse
func (c *ClientWithResponses) ComponentsWithResponse(ctx context.Context, params *ComponentsParams, reqEditors ...RequestEditorFn) (*ComponentsResponse, error) {
	rsp, err := c.Components(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsResponse(rsp)
}

// Components1WithBodyWithResponse request with arbitrary body returning *Components1Response
func (c *ClientWithResponses) Components1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Components1Response, error) {
	rsp, err := c.Components1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponents1Response(rsp)
}

func (c *ClientWithResponses) Components1WithResponse(ctx context.Context, body Components1JSONRequestBody, reqEditors ...RequestEditorFn) (*Components1Response, error) {
	rsp, err := c.Components1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponents1Response(rsp)
}

// Componentsid3WithResponse request returning *Componentsid3Response
func (c *ClientWithResponses) Componentsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Componentsid3Response, error) {
	rsp, err := c.Componentsid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsid3Response(rsp)
}

// ComponentsidWithResponse request returning *ComponentsidResponse
func (c *ClientWithResponses) ComponentsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ComponentsidResponse, error) {
	rsp, err := c.Componentsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidResponse(rsp)
}

// Componentsid2WithBodyWithResponse request with arbitrary body returning *Componentsid2Response
func (c *ClientWithResponses) Componentsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Componentsid2Response, error) {
	rsp, err := c.Componentsid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsid2Response(rsp)
}

func (c *ClientWithResponses) Componentsid2WithResponse(ctx context.Context, id int32, body Componentsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Componentsid2Response, error) {
	rsp, err := c.Componentsid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsid2Response(rsp)
}

// Componentsid1WithBodyWithResponse request with arbitrary body returning *Componentsid1Response
func (c *ClientWithResponses) Componentsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Componentsid1Response, error) {
	rsp, err := c.Componentsid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsid1Response(rsp)
}

func (c *ClientWithResponses) Componentsid1WithResponse(ctx context.Context, id int32, body Componentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Componentsid1Response, error) {
	rsp, err := c.Componentsid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsid1Response(rsp)
}

// ComponentsidassetsWithResponse request returning *ComponentsidassetsResponse
func (c *ClientWithResponses) ComponentsidassetsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ComponentsidassetsResponse, error) {
	rsp, err := c.Componentsidassets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidassetsResponse(rsp)
}

// ComponentsidcheckinWithBodyWithResponse request with arbitrary body returning *ComponentsidcheckinResponse
func (c *ClientWithResponses) ComponentsidcheckinWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsidcheckinResponse, error) {
	rsp, err := c.ComponentsidcheckinWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidcheckinResponse(rsp)
}

func (c *ClientWithResponses) ComponentsidcheckinWithResponse(ctx context.Context, id int32, body ComponentsidcheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsidcheckinResponse, error) {
	rsp, err := c.Componentsidcheckin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidcheckinResponse(rsp)
}

// ComponentsidcheckoutWithBodyWithResponse request with arbitrary body returning *ComponentsidcheckoutResponse
func (c *ClientWithResponses) ComponentsidcheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComponentsidcheckoutResponse, error) {
	rsp, err := c.ComponentsidcheckoutWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidcheckoutResponse(rsp)
}

func (c *ClientWithResponses) ComponentsidcheckoutWithResponse(ctx context.Context, id int32, body ComponentsidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ComponentsidcheckoutResponse, error) {
	rsp, err := c.Componentsidcheckout(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComponentsidcheckoutResponse(rsp)
}

// ConsumablesWithResponse request returning *ConsumablesResponse
func (c *ClientWithResponses) ConsumablesWithResponse(ctx context.Context, params *ConsumablesParams, reqEditors ...RequestEditorFn) (*ConsumablesResponse, error) {
	rsp, err := c.Consumables(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesResponse(rsp)
}

// Consumables1WithBodyWithResponse request with arbitrary body returning *Consumables1Response
func (c *ClientWithResponses) Consumables1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumables1Response, error) {
	rsp, err := c.Consumables1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumables1Response(rsp)
}

func (c *ClientWithResponses) Consumables1WithResponse(ctx context.Context, body Consumables1JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumables1Response, error) {
	rsp, err := c.Consumables1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumables1Response(rsp)
}

// Consumablesid2WithResponse request returning *Consumablesid2Response
func (c *ClientWithResponses) Consumablesid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Consumablesid2Response, error) {
	rsp, err := c.Consumablesid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesid2Response(rsp)
}

// ConsumablesidWithResponse request returning *ConsumablesidResponse
func (c *ClientWithResponses) ConsumablesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ConsumablesidResponse, error) {
	rsp, err := c.Consumablesid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesidResponse(rsp)
}

// Consumablesid1WithBodyWithResponse request with arbitrary body returning *Consumablesid1Response
func (c *ClientWithResponses) Consumablesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumablesid1Response, error) {
	rsp, err := c.Consumablesid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesid1Response(rsp)
}

func (c *ClientWithResponses) Consumablesid1WithResponse(ctx context.Context, id int32, body Consumablesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumablesid1Response, error) {
	rsp, err := c.Consumablesid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesid1Response(rsp)
}

// Consumables2WithBodyWithResponse request with arbitrary body returning *Consumables2Response
func (c *ClientWithResponses) Consumables2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Consumables2Response, error) {
	rsp, err := c.Consumables2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumables2Response(rsp)
}

func (c *ClientWithResponses) Consumables2WithResponse(ctx context.Context, id int32, body Consumables2JSONRequestBody, reqEditors ...RequestEditorFn) (*Consumables2Response, error) {
	rsp, err := c.Consumables2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumables2Response(rsp)
}

// ConsumablesidcheckoutWithBodyWithResponse request with arbitrary body returning *ConsumablesidcheckoutResponse
func (c *ClientWithResponses) ConsumablesidcheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConsumablesidcheckoutResponse, error) {
	rsp, err := c.ConsumablesidcheckoutWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesidcheckoutResponse(rsp)
}

func (c *ClientWithResponses) ConsumablesidcheckoutWithResponse(ctx context.Context, id int32, body ConsumablesidcheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ConsumablesidcheckoutResponse, error) {
	rsp, err := c.Consumablesidcheckout(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConsumablesidcheckoutResponse(rsp)
}

// DepartmentsWithResponse request returning *DepartmentsResponse
func (c *ClientWithResponses) DepartmentsWithResponse(ctx context.Context, params *DepartmentsParams, reqEditors ...RequestEditorFn) (*DepartmentsResponse, error) {
	rsp, err := c.Departments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsResponse(rsp)
}

// Departments1WithBodyWithResponse request with arbitrary body returning *Departments1Response
func (c *ClientWithResponses) Departments1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Departments1Response, error) {
	rsp, err := c.Departments1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartments1Response(rsp)
}

func (c *ClientWithResponses) Departments1WithResponse(ctx context.Context, body Departments1JSONRequestBody, reqEditors ...RequestEditorFn) (*Departments1Response, error) {
	rsp, err := c.Departments1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartments1Response(rsp)
}

// Departmentsid2WithResponse request returning *Departmentsid2Response
func (c *ClientWithResponses) Departmentsid2WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*Departmentsid2Response, error) {
	rsp, err := c.Departmentsid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsid2Response(rsp)
}

// DepartmentsidWithResponse request returning *DepartmentsidResponse
func (c *ClientWithResponses) DepartmentsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DepartmentsidResponse, error) {
	rsp, err := c.Departmentsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsidResponse(rsp)
}

// Departmentsid1WithBodyWithResponse request with arbitrary body returning *Departmentsid1Response
func (c *ClientWithResponses) Departmentsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Departmentsid1Response, error) {
	rsp, err := c.Departmentsid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsid1Response(rsp)
}

func (c *ClientWithResponses) Departmentsid1WithResponse(ctx context.Context, id int32, body Departmentsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Departmentsid1Response, error) {
	rsp, err := c.Departmentsid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsid1Response(rsp)
}

// DepartmentsEditWithBodyWithResponse request with arbitrary body returning *DepartmentsEditResponse
func (c *ClientWithResponses) DepartmentsEditWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DepartmentsEditResponse, error) {
	rsp, err := c.DepartmentsEditWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsEditResponse(rsp)
}

func (c *ClientWithResponses) DepartmentsEditWithResponse(ctx context.Context, id int32, body DepartmentsEditJSONRequestBody, reqEditors ...RequestEditorFn) (*DepartmentsEditResponse, error) {
	rsp, err := c.DepartmentsEdit(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDepartmentsEditResponse(rsp)
}

// Fields1WithResponse request returning *Fields1Response
func (c *ClientWithResponses) Fields1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Fields1Response, error) {
	rsp, err := c.Fields1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFields1Response(rsp)
}

// Fields2WithBodyWithResponse request with arbitrary body returning *Fields2Response
func (c *ClientWithResponses) Fields2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fields2Response, error) {
	rsp, err := c.Fields2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFields2Response(rsp)
}

func (c *ClientWithResponses) Fields2WithResponse(ctx context.Context, body Fields2JSONRequestBody, reqEditors ...RequestEditorFn) (*Fields2Response, error) {
	rsp, err := c.Fields2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFields2Response(rsp)
}

// Fieldsid1WithResponse request returning *Fieldsid1Response
func (c *ClientWithResponses) Fieldsid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Fieldsid1Response, error) {
	rsp, err := c.Fieldsid1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsid1Response(rsp)
}

// FieldsidWithResponse request returning *FieldsidResponse
func (c *ClientWithResponses) FieldsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsidResponse, error) {
	rsp, err := c.Fieldsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsidResponse(rsp)
}

// Fieldsid2WithBodyWithResponse request with arbitrary body returning *Fieldsid2Response
func (c *ClientWithResponses) Fieldsid2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fieldsid2Response, error) {
	rsp, err := c.Fieldsid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsid2Response(rsp)
}

func (c *ClientWithResponses) Fieldsid2WithResponse(ctx context.Context, id string, body Fieldsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Fieldsid2Response, error) {
	rsp, err := c.Fieldsid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsid2Response(rsp)
}

// UpdateFieldsWithBodyWithResponse request with arbitrary body returning *UpdateFieldsResponse
func (c *ClientWithResponses) UpdateFieldsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFieldsResponse, error) {
	rsp, err := c.UpdateFieldsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFieldsResponse(rsp)
}

func (c *ClientWithResponses) UpdateFieldsWithResponse(ctx context.Context, id string, body UpdateFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFieldsResponse, error) {
	rsp, err := c.UpdateFields(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFieldsResponse(rsp)
}

// FieldsidassociateWithBodyWithResponse request with arbitrary body returning *FieldsidassociateResponse
func (c *ClientWithResponses) FieldsidassociateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsidassociateResponse, error) {
	rsp, err := c.FieldsidassociateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsidassociateResponse(rsp)
}

func (c *ClientWithResponses) FieldsidassociateWithResponse(ctx context.Context, id string, body FieldsidassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsidassociateResponse, error) {
	rsp, err := c.Fieldsidassociate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsidassociateResponse(rsp)
}

// FieldsiddisassociateWithBodyWithResponse request with arbitrary body returning *FieldsiddisassociateResponse
func (c *ClientWithResponses) FieldsiddisassociateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsiddisassociateResponse, error) {
	rsp, err := c.FieldsiddisassociateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsiddisassociateResponse(rsp)
}

func (c *ClientWithResponses) FieldsiddisassociateWithResponse(ctx context.Context, id string, body FieldsiddisassociateJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsiddisassociateResponse, error) {
	rsp, err := c.Fieldsiddisassociate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsiddisassociateResponse(rsp)
}

// FieldsWithResponse request returning *FieldsResponse
func (c *ClientWithResponses) FieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FieldsResponse, error) {
	rsp, err := c.Fields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsResponse(rsp)
}

// FieldsetsWithBodyWithResponse request with arbitrary body returning *FieldsetsResponse
func (c *ClientWithResponses) FieldsetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FieldsetsResponse, error) {
	rsp, err := c.FieldsetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsResponse(rsp)
}

func (c *ClientWithResponses) FieldsetsWithResponse(ctx context.Context, body FieldsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*FieldsetsResponse, error) {
	rsp, err := c.Fieldsets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsResponse(rsp)
}

// Fieldsetsid2WithResponse request returning *Fieldsetsid2Response
func (c *ClientWithResponses) Fieldsetsid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Fieldsetsid2Response, error) {
	rsp, err := c.Fieldsetsid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsid2Response(rsp)
}

// FieldsetsidWithResponse request returning *FieldsetsidResponse
func (c *ClientWithResponses) FieldsetsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsetsidResponse, error) {
	rsp, err := c.Fieldsetsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsidResponse(rsp)
}

// Fieldsetsid1WithBodyWithResponse request with arbitrary body returning *Fieldsetsid1Response
func (c *ClientWithResponses) Fieldsetsid1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Fieldsetsid1Response, error) {
	rsp, err := c.Fieldsetsid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsid1Response(rsp)
}

func (c *ClientWithResponses) Fieldsetsid1WithResponse(ctx context.Context, id string, body Fieldsetsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Fieldsetsid1Response, error) {
	rsp, err := c.Fieldsetsid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsid1Response(rsp)
}

// FieldsetsidfieldsWithResponse request returning *FieldsetsidfieldsResponse
func (c *ClientWithResponses) FieldsetsidfieldsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*FieldsetsidfieldsResponse, error) {
	rsp, err := c.Fieldsetsidfields(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFieldsetsidfieldsResponse(rsp)
}

// Groups1WithResponse request returning *Groups1Response
func (c *ClientWithResponses) Groups1WithResponse(ctx context.Context, params *Groups1Params, reqEditors ...RequestEditorFn) (*Groups1Response, error) {
	rsp, err := c.Groups1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroups1Response(rsp)
}

// Groupsid1WithBodyWithResponse request with arbitrary body returning *Groupsid1Response
func (c *ClientWithResponses) Groupsid1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid1Response, error) {
	rsp, err := c.Groupsid1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid1Response(rsp)
}

func (c *ClientWithResponses) Groupsid1WithResponse(ctx context.Context, body Groupsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid1Response, error) {
	rsp, err := c.Groupsid1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid1Response(rsp)
}

// Groupsid3WithResponse request returning *Groupsid3Response
func (c *ClientWithResponses) Groupsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Groupsid3Response, error) {
	rsp, err := c.Groupsid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid3Response(rsp)
}

// GroupsidWithResponse request returning *GroupsidResponse
func (c *ClientWithResponses) GroupsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GroupsidResponse, error) {
	rsp, err := c.Groupsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsidResponse(rsp)
}

// Groupsid4WithBodyWithResponse request with arbitrary body returning *Groupsid4Response
func (c *ClientWithResponses) Groupsid4WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid4Response, error) {
	rsp, err := c.Groupsid4WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid4Response(rsp)
}

func (c *ClientWithResponses) Groupsid4WithResponse(ctx context.Context, id int32, body Groupsid4JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid4Response, error) {
	rsp, err := c.Groupsid4(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid4Response(rsp)
}

// Groupsid2WithBodyWithResponse request with arbitrary body returning *Groupsid2Response
func (c *ClientWithResponses) Groupsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Groupsid2Response, error) {
	rsp, err := c.Groupsid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid2Response(rsp)
}

func (c *ClientWithResponses) Groupsid2WithResponse(ctx context.Context, id int32, body Groupsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Groupsid2Response, error) {
	rsp, err := c.Groupsid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsid2Response(rsp)
}

// HardwareListWithResponse request returning *HardwareListResponse
func (c *ClientWithResponses) HardwareListWithResponse(ctx context.Context, params *HardwareListParams, reqEditors ...RequestEditorFn) (*HardwareListResponse, error) {
	rsp, err := c.HardwareList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareListResponse(rsp)
}

// HardwareCreateWithBodyWithResponse request with arbitrary body returning *HardwareCreateResponse
func (c *ClientWithResponses) HardwareCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCreateResponse, error) {
	rsp, err := c.HardwareCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCreateResponse(rsp)
}

func (c *ClientWithResponses) HardwareCreateWithResponse(ctx context.Context, body HardwareCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCreateResponse, error) {
	rsp, err := c.HardwareCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCreateResponse(rsp)
}

// HardwareidrestoreWithResponse request returning *HardwareidrestoreResponse
func (c *ClientWithResponses) HardwareidrestoreWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareidrestoreResponse, error) {
	rsp, err := c.Hardwareidrestore(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareidrestoreResponse(rsp)
}

// HardwareauditWithBodyWithResponse request with arbitrary body returning *HardwareauditResponse
func (c *ClientWithResponses) HardwareauditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareauditResponse, error) {
	rsp, err := c.HardwareauditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareauditResponse(rsp)
}

func (c *ClientWithResponses) HardwareauditWithResponse(ctx context.Context, body HardwareauditJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareauditResponse, error) {
	rsp, err := c.Hardwareaudit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareauditResponse(rsp)
}

// HardwareauditdueWithResponse request returning *HardwareauditdueResponse
func (c *ClientWithResponses) HardwareauditdueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareauditdueResponse, error) {
	rsp, err := c.Hardwareauditdue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareauditdueResponse(rsp)
}

// HardwareauditoverdueWithResponse request returning *HardwareauditoverdueResponse
func (c *ClientWithResponses) HardwareauditoverdueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HardwareauditoverdueResponse, error) {
	rsp, err := c.Hardwareauditoverdue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareauditoverdueResponse(rsp)
}

// HardwareBySerialWithResponse request returning *HardwareBySerialResponse
func (c *ClientWithResponses) HardwareBySerialWithResponse(ctx context.Context, serial string, params *HardwareBySerialParams, reqEditors ...RequestEditorFn) (*HardwareBySerialResponse, error) {
	rsp, err := c.HardwareBySerial(ctx, serial, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareBySerialResponse(rsp)
}

// HardwareByAssetTagWithResponse request returning *HardwareByAssetTagResponse
func (c *ClientWithResponses) HardwareByAssetTagWithResponse(ctx context.Context, assetTag string, params *HardwareByAssetTagParams, reqEditors ...RequestEditorFn) (*HardwareByAssetTagResponse, error) {
	rsp, err := c.HardwareByAssetTag(ctx, assetTag, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareByAssetTagResponse(rsp)
}

// HardwareDeleteWithResponse request returning *HardwareDeleteResponse
func (c *ClientWithResponses) HardwareDeleteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareDeleteResponse, error) {
	rsp, err := c.HardwareDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareDeleteResponse(rsp)
}

// HardwareByIdWithResponse request returning *HardwareByIdResponse
func (c *ClientWithResponses) HardwareByIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareByIdResponse, error) {
	rsp, err := c.HardwareById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareByIdResponse(rsp)
}

// HardwarePartialUpdateWithBodyWithResponse request with arbitrary body returning *HardwarePartialUpdateResponse
func (c *ClientWithResponses) HardwarePartialUpdateWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwarePartialUpdateResponse, error) {
	rsp, err := c.HardwarePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwarePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) HardwarePartialUpdateWithResponse(ctx context.Context, id int32, body HardwarePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwarePartialUpdateResponse, error) {
	rsp, err := c.HardwarePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwarePartialUpdateResponse(rsp)
}

// HardwareUpdateWithBodyWithResponse request with arbitrary body returning *HardwareUpdateResponse
func (c *ClientWithResponses) HardwareUpdateWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareUpdateResponse, error) {
	rsp, err := c.HardwareUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareUpdateResponse(rsp)
}

func (c *ClientWithResponses) HardwareUpdateWithResponse(ctx context.Context, id int32, body HardwareUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareUpdateResponse, error) {
	rsp, err := c.HardwareUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareUpdateResponse(rsp)
}

// HardwareCheckinWithBodyWithResponse request with arbitrary body returning *HardwareCheckinResponse
func (c *ClientWithResponses) HardwareCheckinWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCheckinResponse, error) {
	rsp, err := c.HardwareCheckinWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCheckinResponse(rsp)
}

func (c *ClientWithResponses) HardwareCheckinWithResponse(ctx context.Context, id int32, body HardwareCheckinJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCheckinResponse, error) {
	rsp, err := c.HardwareCheckin(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCheckinResponse(rsp)
}

// HardwareCheckoutWithBodyWithResponse request with arbitrary body returning *HardwareCheckoutResponse
func (c *ClientWithResponses) HardwareCheckoutWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HardwareCheckoutResponse, error) {
	rsp, err := c.HardwareCheckoutWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCheckoutResponse(rsp)
}

func (c *ClientWithResponses) HardwareCheckoutWithResponse(ctx context.Context, id int32, body HardwareCheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*HardwareCheckoutResponse, error) {
	rsp, err := c.HardwareCheckout(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareCheckoutResponse(rsp)
}

// HardwareidlicensesWithResponse request returning *HardwareidlicensesResponse
func (c *ClientWithResponses) HardwareidlicensesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*HardwareidlicensesResponse, error) {
	rsp, err := c.Hardwareidlicenses(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardwareidlicensesResponse(rsp)
}

// LicensesWithResponse request returning *LicensesResponse
func (c *ClientWithResponses) LicensesWithResponse(ctx context.Context, params *LicensesParams, reqEditors ...RequestEditorFn) (*LicensesResponse, error) {
	rsp, err := c.Licenses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesResponse(rsp)
}

// TestinputWithBodyWithResponse request with arbitrary body returning *TestinputResponse
func (c *ClientWithResponses) TestinputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestinputResponse, error) {
	rsp, err := c.TestinputWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestinputResponse(rsp)
}

func (c *ClientWithResponses) TestinputWithResponse(ctx context.Context, body TestinputJSONRequestBody, reqEditors ...RequestEditorFn) (*TestinputResponse, error) {
	rsp, err := c.Testinput(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestinputResponse(rsp)
}

// Licensesid3WithResponse request returning *Licensesid3Response
func (c *ClientWithResponses) Licensesid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Licensesid3Response, error) {
	rsp, err := c.Licensesid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesid3Response(rsp)
}

// LicensesidWithResponse request returning *LicensesidResponse
func (c *ClientWithResponses) LicensesidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*LicensesidResponse, error) {
	rsp, err := c.Licensesid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidResponse(rsp)
}

// Licensesid2WithBodyWithResponse request with arbitrary body returning *Licensesid2Response
func (c *ClientWithResponses) Licensesid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Licensesid2Response, error) {
	rsp, err := c.Licensesid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesid2Response(rsp)
}

func (c *ClientWithResponses) Licensesid2WithResponse(ctx context.Context, id int32, body Licensesid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Licensesid2Response, error) {
	rsp, err := c.Licensesid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesid2Response(rsp)
}

// Licensesid1WithBodyWithResponse request with arbitrary body returning *Licensesid1Response
func (c *ClientWithResponses) Licensesid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Licensesid1Response, error) {
	rsp, err := c.Licensesid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesid1Response(rsp)
}

func (c *ClientWithResponses) Licensesid1WithResponse(ctx context.Context, id int32, body Licensesid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Licensesid1Response, error) {
	rsp, err := c.Licensesid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesid1Response(rsp)
}

// LicensesidseatsWithResponse request returning *LicensesidseatsResponse
func (c *ClientWithResponses) LicensesidseatsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*LicensesidseatsResponse, error) {
	rsp, err := c.Licensesidseats(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsResponse(rsp)
}

// LicensesidseatsseatIdWithResponse request returning *LicensesidseatsseatIdResponse
func (c *ClientWithResponses) LicensesidseatsseatIdWithResponse(ctx context.Context, id int32, seatId int32, reqEditors ...RequestEditorFn) (*LicensesidseatsseatIdResponse, error) {
	rsp, err := c.LicensesidseatsseatId(ctx, id, seatId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsseatIdResponse(rsp)
}

// LicensesidseatsseatId2WithBodyWithResponse request with arbitrary body returning *LicensesidseatsseatId2Response
func (c *ClientWithResponses) LicensesidseatsseatId2WithBodyWithResponse(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId2Response, error) {
	rsp, err := c.LicensesidseatsseatId2WithBody(ctx, id, seatId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsseatId2Response(rsp)
}

func (c *ClientWithResponses) LicensesidseatsseatId2WithResponse(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId2JSONRequestBody, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId2Response, error) {
	rsp, err := c.LicensesidseatsseatId2(ctx, id, seatId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsseatId2Response(rsp)
}

// LicensesidseatsseatId1WithBodyWithResponse request with arbitrary body returning *LicensesidseatsseatId1Response
func (c *ClientWithResponses) LicensesidseatsseatId1WithBodyWithResponse(ctx context.Context, id int32, seatId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId1Response, error) {
	rsp, err := c.LicensesidseatsseatId1WithBody(ctx, id, seatId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsseatId1Response(rsp)
}

func (c *ClientWithResponses) LicensesidseatsseatId1WithResponse(ctx context.Context, id int32, seatId int32, body LicensesidseatsseatId1JSONRequestBody, reqEditors ...RequestEditorFn) (*LicensesidseatsseatId1Response, error) {
	rsp, err := c.LicensesidseatsseatId1(ctx, id, seatId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLicensesidseatsseatId1Response(rsp)
}

// LocationsWithResponse request returning *LocationsResponse
func (c *ClientWithResponses) LocationsWithResponse(ctx context.Context, params *LocationsParams, reqEditors ...RequestEditorFn) (*LocationsResponse, error) {
	rsp, err := c.Locations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocationsResponse(rsp)
}

// Locations2WithBodyWithResponse request with arbitrary body returning *Locations2Response
func (c *ClientWithResponses) Locations2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Locations2Response, error) {
	rsp, err := c.Locations2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocations2Response(rsp)
}

func (c *ClientWithResponses) Locations2WithResponse(ctx context.Context, body Locations2JSONRequestBody, reqEditors ...RequestEditorFn) (*Locations2Response, error) {
	rsp, err := c.Locations2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocations2Response(rsp)
}

// Locationsid2WithResponse request returning *Locationsid2Response
func (c *ClientWithResponses) Locationsid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Locationsid2Response, error) {
	rsp, err := c.Locationsid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocationsid2Response(rsp)
}

// Locations1WithResponse request returning *Locations1Response
func (c *ClientWithResponses) Locations1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Locations1Response, error) {
	rsp, err := c.Locations1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocations1Response(rsp)
}

// LocationsidWithBodyWithResponse request with arbitrary body returning *LocationsidResponse
func (c *ClientWithResponses) LocationsidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LocationsidResponse, error) {
	rsp, err := c.LocationsidWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocationsidResponse(rsp)
}

func (c *ClientWithResponses) LocationsidWithResponse(ctx context.Context, id int32, body LocationsidJSONRequestBody, reqEditors ...RequestEditorFn) (*LocationsidResponse, error) {
	rsp, err := c.Locationsid(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocationsidResponse(rsp)
}

// Locations3WithBodyWithResponse request with arbitrary body returning *Locations3Response
func (c *ClientWithResponses) Locations3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Locations3Response, error) {
	rsp, err := c.Locations3WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocations3Response(rsp)
}

func (c *ClientWithResponses) Locations3WithResponse(ctx context.Context, id int32, body Locations3JSONRequestBody, reqEditors ...RequestEditorFn) (*Locations3Response, error) {
	rsp, err := c.Locations3(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLocations3Response(rsp)
}

// MaintenancesWithResponse request returning *MaintenancesResponse
func (c *ClientWithResponses) MaintenancesWithResponse(ctx context.Context, params *MaintenancesParams, reqEditors ...RequestEditorFn) (*MaintenancesResponse, error) {
	rsp, err := c.Maintenances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMaintenancesResponse(rsp)
}

// Maintenances1WithBodyWithResponse request with arbitrary body returning *Maintenances1Response
func (c *ClientWithResponses) Maintenances1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Maintenances1Response, error) {
	rsp, err := c.Maintenances1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMaintenances1Response(rsp)
}

func (c *ClientWithResponses) Maintenances1WithResponse(ctx context.Context, body Maintenances1JSONRequestBody, reqEditors ...RequestEditorFn) (*Maintenances1Response, error) {
	rsp, err := c.Maintenances1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMaintenances1Response(rsp)
}

// MaintenancesidWithResponse request returning *MaintenancesidResponse
func (c *ClientWithResponses) MaintenancesidWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*MaintenancesidResponse, error) {
	rsp, err := c.Maintenancesid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMaintenancesidResponse(rsp)
}

// ManufacturersWithResponse request returning *ManufacturersResponse
func (c *ClientWithResponses) ManufacturersWithResponse(ctx context.Context, params *ManufacturersParams, reqEditors ...RequestEditorFn) (*ManufacturersResponse, error) {
	rsp, err := c.Manufacturers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersResponse(rsp)
}

// Manufacturers1WithBodyWithResponse request with arbitrary body returning *Manufacturers1Response
func (c *ClientWithResponses) Manufacturers1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Manufacturers1Response, error) {
	rsp, err := c.Manufacturers1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturers1Response(rsp)
}

func (c *ClientWithResponses) Manufacturers1WithResponse(ctx context.Context, body Manufacturers1JSONRequestBody, reqEditors ...RequestEditorFn) (*Manufacturers1Response, error) {
	rsp, err := c.Manufacturers1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturers1Response(rsp)
}

// Manufacturersid2WithResponse request returning *Manufacturersid2Response
func (c *ClientWithResponses) Manufacturersid2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Manufacturersid2Response, error) {
	rsp, err := c.Manufacturersid2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersid2Response(rsp)
}

// Manufacturersid1WithResponse request returning *Manufacturersid1Response
func (c *ClientWithResponses) Manufacturersid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Manufacturersid1Response, error) {
	rsp, err := c.Manufacturersid1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersid1Response(rsp)
}

// ManufacturersidWithBodyWithResponse request with arbitrary body returning *ManufacturersidResponse
func (c *ClientWithResponses) ManufacturersidWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManufacturersidResponse, error) {
	rsp, err := c.ManufacturersidWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersidResponse(rsp)
}

func (c *ClientWithResponses) ManufacturersidWithResponse(ctx context.Context, id int32, body ManufacturersidJSONRequestBody, reqEditors ...RequestEditorFn) (*ManufacturersidResponse, error) {
	rsp, err := c.Manufacturersid(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersidResponse(rsp)
}

// Manufacturersid3WithBodyWithResponse request with arbitrary body returning *Manufacturersid3Response
func (c *ClientWithResponses) Manufacturersid3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Manufacturersid3Response, error) {
	rsp, err := c.Manufacturersid3WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersid3Response(rsp)
}

func (c *ClientWithResponses) Manufacturersid3WithResponse(ctx context.Context, id int32, body Manufacturersid3JSONRequestBody, reqEditors ...RequestEditorFn) (*Manufacturersid3Response, error) {
	rsp, err := c.Manufacturersid3(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManufacturersid3Response(rsp)
}

// ModelsWithResponse request returning *ModelsResponse
func (c *ClientWithResponses) ModelsWithResponse(ctx context.Context, params *ModelsParams, reqEditors ...RequestEditorFn) (*ModelsResponse, error) {
	rsp, err := c.Models(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsResponse(rsp)
}

// Models1WithBodyWithResponse request with arbitrary body returning *Models1Response
func (c *ClientWithResponses) Models1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Models1Response, error) {
	rsp, err := c.Models1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModels1Response(rsp)
}

func (c *ClientWithResponses) Models1WithResponse(ctx context.Context, body Models1JSONRequestBody, reqEditors ...RequestEditorFn) (*Models1Response, error) {
	rsp, err := c.Models1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModels1Response(rsp)
}

// Modelsid3WithResponse request returning *Modelsid3Response
func (c *ClientWithResponses) Modelsid3WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Modelsid3Response, error) {
	rsp, err := c.Modelsid3(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsid3Response(rsp)
}

// ModelsidWithResponse request returning *ModelsidResponse
func (c *ClientWithResponses) ModelsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ModelsidResponse, error) {
	rsp, err := c.Modelsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsidResponse(rsp)
}

// Modelsid2WithBodyWithResponse request with arbitrary body returning *Modelsid2Response
func (c *ClientWithResponses) Modelsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modelsid2Response, error) {
	rsp, err := c.Modelsid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsid2Response(rsp)
}

func (c *ClientWithResponses) Modelsid2WithResponse(ctx context.Context, id int32, body Modelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Modelsid2Response, error) {
	rsp, err := c.Modelsid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsid2Response(rsp)
}

// Modelsid1WithBodyWithResponse request with arbitrary body returning *Modelsid1Response
func (c *ClientWithResponses) Modelsid1WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modelsid1Response, error) {
	rsp, err := c.Modelsid1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsid1Response(rsp)
}

func (c *ClientWithResponses) Modelsid1WithResponse(ctx context.Context, id int32, body Modelsid1JSONRequestBody, reqEditors ...RequestEditorFn) (*Modelsid1Response, error) {
	rsp, err := c.Modelsid1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModelsid1Response(rsp)
}

// ReportsactivityWithResponse request returning *ReportsactivityResponse
func (c *ClientWithResponses) ReportsactivityWithResponse(ctx context.Context, params *ReportsactivityParams, reqEditors ...RequestEditorFn) (*ReportsactivityResponse, error) {
	rsp, err := c.Reportsactivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportsactivityResponse(rsp)
}

// Backups1WithResponse request returning *Backups1Response
func (c *ClientWithResponses) Backups1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Backups1Response, error) {
	rsp, err := c.Backups1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackups1Response(rsp)
}

// BackupsdownloadfileWithResponse request returning *BackupsdownloadfileResponse
func (c *ClientWithResponses) BackupsdownloadfileWithResponse(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*BackupsdownloadfileResponse, error) {
	rsp, err := c.Backupsdownloadfile(ctx, file, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackupsdownloadfileResponse(rsp)
}

// StatuslabelsWithResponse request returning *StatuslabelsResponse
func (c *ClientWithResponses) StatuslabelsWithResponse(ctx context.Context, params *StatuslabelsParams, reqEditors ...RequestEditorFn) (*StatuslabelsResponse, error) {
	rsp, err := c.Statuslabels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsResponse(rsp)
}

// Statuslabels1WithBodyWithResponse request with arbitrary body returning *Statuslabels1Response
func (c *ClientWithResponses) Statuslabels1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabels1Response, error) {
	rsp, err := c.Statuslabels1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabels1Response(rsp)
}

func (c *ClientWithResponses) Statuslabels1WithResponse(ctx context.Context, body Statuslabels1JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabels1Response, error) {
	rsp, err := c.Statuslabels1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabels1Response(rsp)
}

// Statuslabelsid1WithResponse request returning *Statuslabelsid1Response
func (c *ClientWithResponses) Statuslabelsid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Statuslabelsid1Response, error) {
	rsp, err := c.Statuslabelsid1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsid1Response(rsp)
}

// StatuslabelsidWithResponse request returning *StatuslabelsidResponse
func (c *ClientWithResponses) StatuslabelsidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StatuslabelsidResponse, error) {
	rsp, err := c.Statuslabelsid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsidResponse(rsp)
}

// Statuslabelsid3WithBodyWithResponse request with arbitrary body returning *Statuslabelsid3Response
func (c *ClientWithResponses) Statuslabelsid3WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabelsid3Response, error) {
	rsp, err := c.Statuslabelsid3WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsid3Response(rsp)
}

func (c *ClientWithResponses) Statuslabelsid3WithResponse(ctx context.Context, id int32, body Statuslabelsid3JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabelsid3Response, error) {
	rsp, err := c.Statuslabelsid3(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsid3Response(rsp)
}

// Statuslabelsid2WithBodyWithResponse request with arbitrary body returning *Statuslabelsid2Response
func (c *ClientWithResponses) Statuslabelsid2WithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Statuslabelsid2Response, error) {
	rsp, err := c.Statuslabelsid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsid2Response(rsp)
}

func (c *ClientWithResponses) Statuslabelsid2WithResponse(ctx context.Context, id int32, body Statuslabelsid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Statuslabelsid2Response, error) {
	rsp, err := c.Statuslabelsid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsid2Response(rsp)
}

// StatuslabelsidassetlistWithResponse request returning *StatuslabelsidassetlistResponse
func (c *ClientWithResponses) StatuslabelsidassetlistWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StatuslabelsidassetlistResponse, error) {
	rsp, err := c.Statuslabelsidassetlist(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatuslabelsidassetlistResponse(rsp)
}

// SuppliersWithResponse request returning *SuppliersResponse
func (c *ClientWithResponses) SuppliersWithResponse(ctx context.Context, params *SuppliersParams, reqEditors ...RequestEditorFn) (*SuppliersResponse, error) {
	rsp, err := c.Suppliers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuppliersResponse(rsp)
}

// SuppliersidWithResponse request returning *SuppliersidResponse
func (c *ClientWithResponses) SuppliersidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*SuppliersidResponse, error) {
	rsp, err := c.Suppliersid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuppliersidResponse(rsp)
}

// UsersWithResponse request returning *UsersResponse
func (c *ClientWithResponses) UsersWithResponse(ctx context.Context, params *UsersParams, reqEditors ...RequestEditorFn) (*UsersResponse, error) {
	rsp, err := c.Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersResponse(rsp)
}

// Users2WithBodyWithResponse request with arbitrary body returning *Users2Response
func (c *ClientWithResponses) Users2WithBodyWithResponse(ctx context.Context, params *Users2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Users2Response, error) {
	rsp, err := c.Users2WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsers2Response(rsp)
}

func (c *ClientWithResponses) Users2WithResponse(ctx context.Context, params *Users2Params, body Users2JSONRequestBody, reqEditors ...RequestEditorFn) (*Users2Response, error) {
	rsp, err := c.Users2(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsers2Response(rsp)
}

// UsersmeWithResponse request returning *UsersmeResponse
func (c *ClientWithResponses) UsersmeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersmeResponse, error) {
	rsp, err := c.Usersme(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersmeResponse(rsp)
}

// Usersid1WithResponse request returning *Usersid1Response
func (c *ClientWithResponses) Usersid1WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*Usersid1Response, error) {
	rsp, err := c.Usersid1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersid1Response(rsp)
}

// UsersidWithResponse request returning *UsersidResponse
func (c *ClientWithResponses) UsersidWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidResponse, error) {
	rsp, err := c.Usersid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersidResponse(rsp)
}

// Users3WithBodyWithResponse request with arbitrary body returning *Users3Response
func (c *ClientWithResponses) Users3WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Users3Response, error) {
	rsp, err := c.Users3WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsers3Response(rsp)
}

func (c *ClientWithResponses) Users3WithResponse(ctx context.Context, id string, body Users3JSONRequestBody, reqEditors ...RequestEditorFn) (*Users3Response, error) {
	rsp, err := c.Users3(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsers3Response(rsp)
}

// Usersid2WithBodyWithResponse request with arbitrary body returning *Usersid2Response
func (c *ClientWithResponses) Usersid2WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Usersid2Response, error) {
	rsp, err := c.Usersid2WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersid2Response(rsp)
}

func (c *ClientWithResponses) Usersid2WithResponse(ctx context.Context, id string, body Usersid2JSONRequestBody, reqEditors ...RequestEditorFn) (*Usersid2Response, error) {
	rsp, err := c.Usersid2(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersid2Response(rsp)
}

// UsersidaccessoriesWithResponse request returning *UsersidaccessoriesResponse
func (c *ClientWithResponses) UsersidaccessoriesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidaccessoriesResponse, error) {
	rsp, err := c.Usersidaccessories(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersidaccessoriesResponse(rsp)
}

// UsersidassetsWithResponse request returning *UsersidassetsResponse
func (c *ClientWithResponses) UsersidassetsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidassetsResponse, error) {
	rsp, err := c.Usersidassets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersidassetsResponse(rsp)
}

// UsersidlicensesWithResponse request returning *UsersidlicensesResponse
func (c *ClientWithResponses) UsersidlicensesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*UsersidlicensesResponse, error) {
	rsp, err := c.Usersidlicenses(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersidlicensesResponse(rsp)
}

// ParseAccessoriesResponse parses an HTTP response from a AccessoriesWithResponse call
func ParseAccessoriesResponse(rsp *http.Response) (*AccessoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				Company   *interface{} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id       *int         `json:"id,omitempty"`
				Image    *interface{} `json:"image,omitempty"`
				Location *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Manufacturer *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				MinQty       *int         `json:"min_qty,omitempty"`
				ModelNumber  *string      `json:"model_number,omitempty"`
				Name         *string      `json:"name,omitempty"`
				Notes        *interface{} `json:"notes,omitempty"`
				OrderNumber  *interface{} `json:"order_number,omitempty"`
				PurchaseCost *interface{} `json:"purchase_cost,omitempty"`
				PurchaseDate *interface{} `json:"purchase_date,omitempty"`
				Qty          *int         `json:"qty,omitempty"`
				RemainingQty *int         `json:"remaining_qty,omitempty"`
				Supplier     *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"supplier,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseAccessories1Response parses an HTTP response from a Accessories1WithResponse call
func ParseAccessories1Response(rsp *http.Response) (*Accessories1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Accessories1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesid3Response parses an HTTP response from a Accessoriesid3WithResponse call
func ParseAccessoriesid3Response(rsp *http.Response) (*Accessoriesid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Accessoriesid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesidResponse parses an HTTP response from a AccessoriesidWithResponse call
func ParseAccessoriesidResponse(rsp *http.Response) (*AccessoriesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessoriesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesid2Response parses an HTTP response from a Accessoriesid2WithResponse call
func ParseAccessoriesid2Response(rsp *http.Response) (*Accessoriesid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Accessoriesid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesid1Response parses an HTTP response from a Accessoriesid1WithResponse call
func ParseAccessoriesid1Response(rsp *http.Response) (*Accessoriesid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Accessoriesid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesidcheckedoutResponse parses an HTTP response from a AccessoriesidcheckedoutWithResponse call
func ParseAccessoriesidcheckedoutResponse(rsp *http.Response) (*AccessoriesidcheckedoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessoriesidcheckedoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesidcheckinResponse parses an HTTP response from a AccessoriesidcheckinWithResponse call
func ParseAccessoriesidcheckinResponse(rsp *http.Response) (*AccessoriesidcheckinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessoriesidcheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccessoriesidcheckedout1Response parses an HTTP response from a Accessoriesidcheckedout1WithResponse call
func ParseAccessoriesidcheckedout1Response(rsp *http.Response) (*Accessoriesidcheckedout1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Accessoriesidcheckedout1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCategories1Response parses an HTTP response from a Categories1WithResponse call
func ParseCategories1Response(rsp *http.Response) (*Categories1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Categories1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCategories2Response parses an HTTP response from a Categories2WithResponse call
func ParseCategories2Response(rsp *http.Response) (*Categories2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Categories2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCategoriesid2Response parses an HTTP response from a Categoriesid2WithResponse call
func ParseCategoriesid2Response(rsp *http.Response) (*Categoriesid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Categoriesid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCategoriesid3Response parses an HTTP response from a Categoriesid3WithResponse call
func ParseCategoriesid3Response(rsp *http.Response) (*Categoriesid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Categoriesid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCategoriesid1Response parses an HTTP response from a Categoriesid1WithResponse call
func ParseCategoriesid1Response(rsp *http.Response) (*Categoriesid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Categoriesid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCategoriesidResponse parses an HTTP response from a CategoriesidWithResponse call
func ParseCategoriesidResponse(rsp *http.Response) (*CategoriesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CategoriesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompaniesResponse parses an HTTP response from a CompaniesWithResponse call
func ParseCompaniesResponse(rsp *http.Response) (*CompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AccessoriesCount *int `json:"accessories_count,omitempty"`
				AssetsCount      *int `json:"assets_count,omitempty"`
				AvailableActions *struct {
					Delete *bool `json:"delete,omitempty"`
					Update *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				ComponentsCount  *int `json:"components_count,omitempty"`
				ConsumablesCount *int `json:"consumables_count,omitempty"`
				CreatedAt        *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id            *int         `json:"id,omitempty"`
				Image         *interface{} `json:"image,omitempty"`
				LicensesCount *int         `json:"licenses_count,omitempty"`
				Name          *string      `json:"name,omitempty"`
				UpdatedAt     *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UsersCount *int `json:"users_count,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompanies1Response parses an HTTP response from a Companies1WithResponse call
func ParseCompanies1Response(rsp *http.Response) (*Companies1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Companies1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				CreatedAt *string `json:"created_at,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				UpdatedAt *string `json:"updated_at,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompaniesid3Response parses an HTTP response from a Companiesid3WithResponse call
func ParseCompaniesid3Response(rsp *http.Response) (*Companiesid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Companiesid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompaniesidResponse parses an HTTP response from a CompaniesidWithResponse call
func ParseCompaniesidResponse(rsp *http.Response) (*CompaniesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompaniesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessoriesCount *int `json:"accessories_count,omitempty"`
			AssetsCount      *int `json:"assets_count,omitempty"`
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			ComponentsCount  *int `json:"components_count,omitempty"`
			ConsumablesCount *int `json:"consumables_count,omitempty"`
			CreatedAt        *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id            *int         `json:"id,omitempty"`
			Image         *interface{} `json:"image,omitempty"`
			LicensesCount *int         `json:"licenses_count,omitempty"`
			Name          *string      `json:"name,omitempty"`
			UpdatedAt     *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UsersCount *int `json:"users_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompaniesid2Response parses an HTTP response from a Companiesid2WithResponse call
func ParseCompaniesid2Response(rsp *http.Response) (*Companiesid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Companiesid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseCompaniesid1Response parses an HTTP response from a Companiesid1WithResponse call
func ParseCompaniesid1Response(rsp *http.Response) (*Companiesid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Companiesid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseComponentsResponse parses an HTTP response from a ComponentsWithResponse call
func ParseComponentsResponse(rsp *http.Response) (*ComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				Company *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id       *int         `json:"id,omitempty"`
				Image    *interface{} `json:"image,omitempty"`
				Location *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				MinAmt       *int    `json:"min_amt,omitempty"`
				Name         *string `json:"name,omitempty"`
				OrderNumber  *string `json:"order_number,omitempty"`
				PurchaseCost *string `json:"purchase_cost,omitempty"`
				PurchaseDate *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"purchase_date,omitempty"`
				Qty       *int         `json:"qty,omitempty"`
				Remaining *int         `json:"remaining,omitempty"`
				Serial    *interface{} `json:"serial,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *int `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseComponents1Response parses an HTTP response from a Components1WithResponse call
func ParseComponents1Response(rsp *http.Response) (*Components1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Components1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsid3Response parses an HTTP response from a Componentsid3WithResponse call
func ParseComponentsid3Response(rsp *http.Response) (*Componentsid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Componentsid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsidResponse parses an HTTP response from a ComponentsidWithResponse call
func ParseComponentsidResponse(rsp *http.Response) (*ComponentsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsid2Response parses an HTTP response from a Componentsid2WithResponse call
func ParseComponentsid2Response(rsp *http.Response) (*Componentsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Componentsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsid1Response parses an HTTP response from a Componentsid1WithResponse call
func ParseComponentsid1Response(rsp *http.Response) (*Componentsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Componentsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsidassetsResponse parses an HTTP response from a ComponentsidassetsWithResponse call
func ParseComponentsidassetsResponse(rsp *http.Response) (*ComponentsidassetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsidassetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsidcheckinResponse parses an HTTP response from a ComponentsidcheckinWithResponse call
func ParseComponentsidcheckinResponse(rsp *http.Response) (*ComponentsidcheckinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsidcheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComponentsidcheckoutResponse parses an HTTP response from a ComponentsidcheckoutWithResponse call
func ParseComponentsidcheckoutResponse(rsp *http.Response) (*ComponentsidcheckoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComponentsidcheckoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumablesResponse parses an HTTP response from a ConsumablesWithResponse call
func ParseConsumablesResponse(rsp *http.Response) (*ConsumablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConsumablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				Company *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id           *int         `json:"id,omitempty"`
				Image        *interface{} `json:"image,omitempty"`
				ItemNo       *string      `json:"item_no,omitempty"`
				Location     *interface{} `json:"location,omitempty"`
				Manufacturer *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				MinAmt       *int         `json:"min_amt,omitempty"`
				ModelNumber  *interface{} `json:"model_number,omitempty"`
				Name         *string      `json:"name,omitempty"`
				OrderNumber  *string      `json:"order_number,omitempty"`
				PurchaseCost *string      `json:"purchase_cost,omitempty"`
				PurchaseDate *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"purchase_date,omitempty"`
				Qty       *int `json:"qty,omitempty"`
				Remaining *int `json:"remaining,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConsumables1Response parses an HTTP response from a Consumables1WithResponse call
func ParseConsumables1Response(rsp *http.Response) (*Consumables1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Consumables1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumablesid2Response parses an HTTP response from a Consumablesid2WithResponse call
func ParseConsumablesid2Response(rsp *http.Response) (*Consumablesid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Consumablesid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumablesidResponse parses an HTTP response from a ConsumablesidWithResponse call
func ParseConsumablesidResponse(rsp *http.Response) (*ConsumablesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConsumablesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumablesid1Response parses an HTTP response from a Consumablesid1WithResponse call
func ParseConsumablesid1Response(rsp *http.Response) (*Consumablesid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Consumablesid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumables2Response parses an HTTP response from a Consumables2WithResponse call
func ParseConsumables2Response(rsp *http.Response) (*Consumables2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Consumables2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConsumablesidcheckoutResponse parses an HTTP response from a ConsumablesidcheckoutWithResponse call
func ParseConsumablesidcheckoutResponse(rsp *http.Response) (*ConsumablesidcheckoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConsumablesidcheckoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDepartmentsResponse parses an HTTP response from a DepartmentsWithResponse call
func ParseDepartmentsResponse(rsp *http.Response) (*DepartmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepartmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Delete *bool `json:"delete,omitempty"`
					Update *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Company   *interface{} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id       *int         `json:"id,omitempty"`
				Image    *interface{} `json:"image,omitempty"`
				Location *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Manager   *interface{} `json:"manager,omitempty"`
				Name      *string      `json:"name,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UsersCount *string `json:"users_count,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDepartments1Response parses an HTTP response from a Departments1WithResponse call
func ParseDepartments1Response(rsp *http.Response) (*Departments1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Departments1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				CreatedAt *string      `json:"created_at,omitempty"`
				Id        *int         `json:"id,omitempty"`
				ManagerId *interface{} `json:"manager_id,omitempty"`
				Name      *string      `json:"name,omitempty"`
				UpdatedAt *string      `json:"updated_at,omitempty"`
				UserId    *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDepartmentsid2Response parses an HTTP response from a Departmentsid2WithResponse call
func ParseDepartmentsid2Response(rsp *http.Response) (*Departmentsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Departmentsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDepartmentsidResponse parses an HTTP response from a DepartmentsidWithResponse call
func ParseDepartmentsidResponse(rsp *http.Response) (*DepartmentsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepartmentsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id       *int         `json:"id,omitempty"`
			Image    *interface{} `json:"image,omitempty"`
			Location *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Manager   *interface{} `json:"manager,omitempty"`
			Name      *string      `json:"name,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UsersCount *string `json:"users_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDepartmentsid1Response parses an HTTP response from a Departmentsid1WithResponse call
func ParseDepartmentsid1Response(rsp *http.Response) (*Departmentsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Departmentsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				CompanyId  *interface{} `json:"company_id,omitempty"`
				CreatedAt  *string      `json:"created_at,omitempty"`
				DeletedAt  *interface{} `json:"deleted_at,omitempty"`
				Id         *int         `json:"id,omitempty"`
				Image      *interface{} `json:"image,omitempty"`
				LocationId *int         `json:"location_id,omitempty"`
				ManagerId  *interface{} `json:"manager_id,omitempty"`
				Name       *string      `json:"name,omitempty"`
				Notes      *interface{} `json:"notes,omitempty"`
				UpdatedAt  *string      `json:"updated_at,omitempty"`
				UserId     *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDepartmentsEditResponse parses an HTTP response from a DepartmentsEditWithResponse call
func ParseDepartmentsEditResponse(rsp *http.Response) (*DepartmentsEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DepartmentsEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				CompanyId  *interface{} `json:"company_id,omitempty"`
				CreatedAt  *string      `json:"created_at,omitempty"`
				DeletedAt  *interface{} `json:"deleted_at,omitempty"`
				Id         *int         `json:"id,omitempty"`
				Image      *interface{} `json:"image,omitempty"`
				LocationId *int         `json:"location_id,omitempty"`
				ManagerId  *interface{} `json:"manager_id,omitempty"`
				Name       *string      `json:"name,omitempty"`
				Notes      *interface{} `json:"notes,omitempty"`
				UpdatedAt  *string      `json:"updated_at,omitempty"`
				UserId     *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFields1Response parses an HTTP response from a Fields1WithResponse call
func ParseFields1Response(rsp *http.Response) (*Fields1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fields1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				DbColumnName     *string      `json:"db_column_name,omitempty"`
				FieldValues      *interface{} `json:"field_values,omitempty"`
				FieldValuesArray *interface{} `json:"field_values_array,omitempty"`
				Format           *string      `json:"format,omitempty"`
				Id               *int         `json:"id,omitempty"`
				Name             *string      `json:"name,omitempty"`
				Required         *bool        `json:"required,omitempty"`
				Type             *string      `json:"type,omitempty"`
				UpdatedAt        *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFields2Response parses an HTTP response from a Fields2WithResponse call
func ParseFields2Response(rsp *http.Response) (*Fields2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fields2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsid1Response parses an HTTP response from a Fieldsid1WithResponse call
func ParseFieldsid1Response(rsp *http.Response) (*Fieldsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fieldsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsidResponse parses an HTTP response from a FieldsidWithResponse call
func ParseFieldsidResponse(rsp *http.Response) (*FieldsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsid2Response parses an HTTP response from a Fieldsid2WithResponse call
func ParseFieldsid2Response(rsp *http.Response) (*Fieldsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fieldsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseUpdateFieldsResponse parses an HTTP response from a UpdateFieldsWithResponse call
func ParseUpdateFieldsResponse(rsp *http.Response) (*UpdateFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsidassociateResponse parses an HTTP response from a FieldsidassociateWithResponse call
func ParseFieldsidassociateResponse(rsp *http.Response) (*FieldsidassociateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsidassociateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsiddisassociateResponse parses an HTTP response from a FieldsiddisassociateWithResponse call
func ParseFieldsiddisassociateResponse(rsp *http.Response) (*FieldsiddisassociateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsiddisassociateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsResponse parses an HTTP response from a FieldsWithResponse call
func ParseFieldsResponse(rsp *http.Response) (*FieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Fields *struct {
					Rows *[]struct {
						CreatedAt *struct {
							Datetime  *string `json:"datetime,omitempty"`
							Formatted *string `json:"formatted,omitempty"`
						} `json:"created_at,omitempty"`
						DbColumnName     *string      `json:"db_column_name,omitempty"`
						FieldValues      *interface{} `json:"field_values,omitempty"`
						FieldValuesArray *interface{} `json:"field_values_array,omitempty"`
						Format           *string      `json:"format,omitempty"`
						Id               *int         `json:"id,omitempty"`
						Name             *string      `json:"name,omitempty"`
						Required         *int         `json:"required,omitempty"`
						Type             *string      `json:"type,omitempty"`
						UpdatedAt        *struct {
							Datetime  *string `json:"datetime,omitempty"`
							Formatted *string `json:"formatted,omitempty"`
						} `json:"updated_at,omitempty"`
					} `json:"rows,omitempty"`
					Total *int `json:"total,omitempty"`
				} `json:"fields,omitempty"`
				Id     *int `json:"id,omitempty"`
				Models *struct {
					Rows *[]struct {
						Id   *int    `json:"id,omitempty"`
						Name *string `json:"name,omitempty"`
					} `json:"rows,omitempty"`
					Total *int `json:"total,omitempty"`
				} `json:"models,omitempty"`
				Name      *string `json:"name,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFieldsetsResponse parses an HTTP response from a FieldsetsWithResponse call
func ParseFieldsetsResponse(rsp *http.Response) (*FieldsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsetsid2Response parses an HTTP response from a Fieldsetsid2WithResponse call
func ParseFieldsetsid2Response(rsp *http.Response) (*Fieldsetsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fieldsetsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsetsidResponse parses an HTTP response from a FieldsetsidWithResponse call
func ParseFieldsetsidResponse(rsp *http.Response) (*FieldsetsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsetsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsetsid1Response parses an HTTP response from a Fieldsetsid1WithResponse call
func ParseFieldsetsid1Response(rsp *http.Response) (*Fieldsetsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Fieldsetsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFieldsetsidfieldsResponse parses an HTTP response from a FieldsetsidfieldsWithResponse call
func ParseFieldsetsidfieldsResponse(rsp *http.Response) (*FieldsetsidfieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FieldsetsidfieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGroups1Response parses an HTTP response from a Groups1WithResponse call
func ParseGroups1Response(rsp *http.Response) (*Groups1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Groups1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGroupsid1Response parses an HTTP response from a Groupsid1WithResponse call
func ParseGroupsid1Response(rsp *http.Response) (*Groupsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Groupsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGroupsid3Response parses an HTTP response from a Groupsid3WithResponse call
func ParseGroupsid3Response(rsp *http.Response) (*Groupsid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Groupsid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGroupsidResponse parses an HTTP response from a GroupsidWithResponse call
func ParseGroupsidResponse(rsp *http.Response) (*GroupsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGroupsid4Response parses an HTTP response from a Groupsid4WithResponse call
func ParseGroupsid4Response(rsp *http.Response) (*Groupsid4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Groupsid4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGroupsid2Response parses an HTTP response from a Groupsid2WithResponse call
func ParseGroupsid2Response(rsp *http.Response) (*Groupsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Groupsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseHardwareListResponse parses an HTTP response from a HardwareListWithResponse call
func ParseHardwareListResponse(rsp *http.Response) (*HardwareListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				Age              *string      `json:"age,omitempty"`
				AltBarcode       *interface{} `json:"alt_barcode,omitempty"`
				AssetTag         *string      `json:"asset_tag,omitempty"`
				AssignedTo       *interface{} `json:"assigned_to,omitempty"`
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Clone    *bool `json:"clone,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Restore  *bool `json:"restore,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				CheckinCounter  *int         `json:"checkin_counter,omitempty"`
				CheckoutCounter *int         `json:"checkout_counter,omitempty"`
				Company         *interface{} `json:"company,omitempty"`
				CreatedAt       *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
				DeletedAt    *interface{}            `json:"deleted_at,omitempty"`
				Eol          *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"eol,omitempty"`
				ExpectedCheckin *interface{} `json:"expected_checkin,omitempty"`
				Id              *int         `json:"id,omitempty"`
				Image           *string      `json:"image,omitempty"`
				LastAuditDate   *interface{} `json:"last_audit_date,omitempty"`
				LastCheckout    *interface{} `json:"last_checkout,omitempty"`
				Location        *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Manufacturer *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				Model *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"model,omitempty"`
				ModelNumber   *string      `json:"model_number,omitempty"`
				Name          *string      `json:"name,omitempty"`
				NextAuditDate *interface{} `json:"next_audit_date,omitempty"`
				Notes         *string      `json:"notes,omitempty"`
				OrderNumber   *string      `json:"order_number,omitempty"`
				PurchaseCost  *string      `json:"purchase_cost,omitempty"`
				PurchaseDate  *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"purchase_date,omitempty"`
				Qr              *string `json:"qr,omitempty"`
				RequestsCounter *int    `json:"requests_counter,omitempty"`
				RtdLocation     *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"rtd_location,omitempty"`
				Serial      *string `json:"serial,omitempty"`
				StatusLabel *struct {
					Id         *int    `json:"id,omitempty"`
					Name       *string `json:"name,omitempty"`
					StatusMeta *string `json:"status_meta,omitempty"`
					StatusType *string `json:"status_type,omitempty"`
				} `json:"status_label,omitempty"`
				Supplier *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"supplier,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool        `json:"user_can_checkout,omitempty"`
				WarrantyExpires *interface{} `json:"warranty_expires,omitempty"`
				WarrantyMonths  *interface{} `json:"warranty_months,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseHardwareCreateResponse parses an HTTP response from a HardwareCreateWithResponse call
func ParseHardwareCreateResponse(rsp *http.Response) (*HardwareCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareidrestoreResponse parses an HTTP response from a HardwareidrestoreWithResponse call
func ParseHardwareidrestoreResponse(rsp *http.Response) (*HardwareidrestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareidrestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				AssetTag      *string `json:"asset_tag,omitempty"`
				NextAuditDate *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"next_audit_date,omitempty"`
				Note *string `json:"note,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareauditResponse parses an HTTP response from a HardwareauditWithResponse call
func ParseHardwareauditResponse(rsp *http.Response) (*HardwareauditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareauditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareauditdueResponse parses an HTTP response from a HardwareauditdueWithResponse call
func ParseHardwareauditdueResponse(rsp *http.Response) (*HardwareauditdueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareauditdueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareauditoverdueResponse parses an HTTP response from a HardwareauditoverdueWithResponse call
func ParseHardwareauditoverdueResponse(rsp *http.Response) (*HardwareauditoverdueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareauditoverdueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareBySerialResponse parses an HTTP response from a HardwareBySerialWithResponse call
func ParseHardwareBySerialResponse(rsp *http.Response) (*HardwareBySerialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareBySerialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareByAssetTagResponse parses an HTTP response from a HardwareByAssetTagWithResponse call
func ParseHardwareByAssetTagResponse(rsp *http.Response) (*HardwareByAssetTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareByAssetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareDeleteResponse parses an HTTP response from a HardwareDeleteWithResponse call
func ParseHardwareDeleteResponse(rsp *http.Response) (*HardwareDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHardwareByIdResponse parses an HTTP response from a HardwareByIdWithResponse call
func ParseHardwareByIdResponse(rsp *http.Response) (*HardwareByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwarePartialUpdateResponse parses an HTTP response from a HardwarePartialUpdateWithResponse call
func ParseHardwarePartialUpdateResponse(rsp *http.Response) (*HardwarePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwarePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Messages *struct {
				StatusId *[]string `json:"status_id,omitempty"`
			} `json:"messages,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHardwareUpdateResponse parses an HTTP response from a HardwareUpdateWithResponse call
func ParseHardwareUpdateResponse(rsp *http.Response) (*HardwareUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseHardwareCheckinResponse parses an HTTP response from a HardwareCheckinWithResponse call
func ParseHardwareCheckinResponse(rsp *http.Response) (*HardwareCheckinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareCheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareCheckoutResponse parses an HTTP response from a HardwareCheckoutWithResponse call
func ParseHardwareCheckoutResponse(rsp *http.Response) (*HardwareCheckoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareCheckoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHardwareidlicensesResponse parses an HTTP response from a HardwareidlicensesWithResponse call
func ParseHardwareidlicensesResponse(rsp *http.Response) (*HardwareidlicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardwareidlicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLicensesResponse parses an HTTP response from a LicensesWithResponse call
func ParseLicensesResponse(rsp *http.Response) (*LicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Clone    *bool `json:"clone,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Company   *interface{} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				ExpirationDate *interface{} `json:"expiration_date,omitempty"`
				FreeSeatsCount *int         `json:"free_seats_count,omitempty"`
				Id             *int         `json:"id,omitempty"`
				LicenseEmail   *string      `json:"license_email,omitempty"`
				LicenseName    *string      `json:"license_name,omitempty"`
				Maintained     *bool        `json:"maintained,omitempty"`
				Manufacturer   *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				Name         *string `json:"name,omitempty"`
				Notes        *string `json:"notes,omitempty"`
				OrderNumber  *string `json:"order_number,omitempty"`
				ProductKey   *string `json:"product_key,omitempty"`
				PurchaseCost *string `json:"purchase_cost,omitempty"`
				PurchaseDate *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"purchase_date,omitempty"`
				PurchaseOrder *string      `json:"purchase_order,omitempty"`
				Seats         *int         `json:"seats,omitempty"`
				Supplier      *interface{} `json:"supplier,omitempty"`
				UpdatedAt     *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseTestinputResponse parses an HTTP response from a TestinputWithResponse call
func ParseTestinputResponse(rsp *http.Response) (*TestinputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestinputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				CreatedAt *string `json:"created_at,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				Seats     *string `json:"seats,omitempty"`
				UpdatedAt *string `json:"updated_at,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLicensesid3Response parses an HTTP response from a Licensesid3WithResponse call
func ParseLicensesid3Response(rsp *http.Response) (*Licensesid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Licensesid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesidResponse parses an HTTP response from a LicensesidWithResponse call
func ParseLicensesidResponse(rsp *http.Response) (*LicensesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Company   *interface{} `json:"company,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			ExpirationDate *interface{} `json:"expiration_date,omitempty"`
			FreeSeatsCount *int         `json:"free_seats_count,omitempty"`
			Id             *int         `json:"id,omitempty"`
			LicenseEmail   *string      `json:"license_email,omitempty"`
			LicenseName    *string      `json:"license_name,omitempty"`
			Maintained     *bool        `json:"maintained,omitempty"`
			Manufacturer   *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"manufacturer,omitempty"`
			Name         *string `json:"name,omitempty"`
			Notes        *string `json:"notes,omitempty"`
			OrderNumber  *string `json:"order_number,omitempty"`
			ProductKey   *string `json:"product_key,omitempty"`
			PurchaseCost *string `json:"purchase_cost,omitempty"`
			PurchaseDate *struct {
				Date      *string `json:"date,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"purchase_date,omitempty"`
			PurchaseOrder *string      `json:"purchase_order,omitempty"`
			Seats         *int         `json:"seats,omitempty"`
			Supplier      *interface{} `json:"supplier,omitempty"`
			UpdatedAt     *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesid2Response parses an HTTP response from a Licensesid2WithResponse call
func ParseLicensesid2Response(rsp *http.Response) (*Licensesid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Licensesid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesid1Response parses an HTTP response from a Licensesid1WithResponse call
func ParseLicensesid1Response(rsp *http.Response) (*Licensesid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Licensesid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesidseatsResponse parses an HTTP response from a LicensesidseatsWithResponse call
func ParseLicensesidseatsResponse(rsp *http.Response) (*LicensesidseatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesidseatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AssignedAsset *interface{} `json:"assigned_asset,omitempty"`
				AssignedUser  *struct {
					Department *struct {
						Id   *int    `json:"id,omitempty"`
						Name *string `json:"name,omitempty"`
					} `json:"department,omitempty"`
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"assigned_user,omitempty"`
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Clone    *bool `json:"clone,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Id        *int `json:"id,omitempty"`
				LicenseId *int `json:"license_id,omitempty"`
				Location  *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Name            *string `json:"name,omitempty"`
				Reassignable    *bool   `json:"reassignable,omitempty"`
				UserCanCheckout *bool   `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesidseatsseatIdResponse parses an HTTP response from a LicensesidseatsseatIdWithResponse call
func ParseLicensesidseatsseatIdResponse(rsp *http.Response) (*LicensesidseatsseatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesidseatsseatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AssignedAsset *interface{} `json:"assigned_asset,omitempty"`
			AssignedUser  *struct {
				Department *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"department,omitempty"`
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"assigned_user,omitempty"`
			AvailableActions *struct {
				Checkin  *bool `json:"checkin,omitempty"`
				Checkout *bool `json:"checkout,omitempty"`
				Clone    *bool `json:"clone,omitempty"`
				Delete   *bool `json:"delete,omitempty"`
				Update   *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Id        *int `json:"id,omitempty"`
			LicenseId *int `json:"license_id,omitempty"`
			Location  *struct {
				Id   *int    `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"location,omitempty"`
			Reassignable    *bool `json:"reassignable,omitempty"`
			UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesidseatsseatId2Response parses an HTTP response from a LicensesidseatsseatId2WithResponse call
func ParseLicensesidseatsseatId2Response(rsp *http.Response) (*LicensesidseatsseatId2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesidseatsseatId2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				AssetId    *interface{} `json:"asset_id,omitempty"`
				AssignedTo *string      `json:"assigned_to,omitempty"`
				CreatedAt  *string      `json:"created_at,omitempty"`
				DeletedAt  *interface{} `json:"deleted_at,omitempty"`
				Id         *int         `json:"id,omitempty"`
				LicenseId  *int         `json:"license_id,omitempty"`
				Notes      *interface{} `json:"notes,omitempty"`
				UpdatedAt  *string      `json:"updated_at,omitempty"`
				UserId     *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLicensesidseatsseatId1Response parses an HTTP response from a LicensesidseatsseatId1WithResponse call
func ParseLicensesidseatsseatId1Response(rsp *http.Response) (*LicensesidseatsseatId1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LicensesidseatsseatId1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				AssetId    *interface{} `json:"asset_id,omitempty"`
				AssignedTo *string      `json:"assigned_to,omitempty"`
				CreatedAt  *string      `json:"created_at,omitempty"`
				DeletedAt  *interface{} `json:"deleted_at,omitempty"`
				Id         *int         `json:"id,omitempty"`
				LicenseId  *int         `json:"license_id,omitempty"`
				Notes      *interface{} `json:"notes,omitempty"`
				UpdatedAt  *string      `json:"updated_at,omitempty"`
				UserId     *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLocationsResponse parses an HTTP response from a LocationsWithResponse call
func ParseLocationsResponse(rsp *http.Response) (*LocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLocations2Response parses an HTTP response from a Locations2WithResponse call
func ParseLocations2Response(rsp *http.Response) (*Locations2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Locations2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLocationsid2Response parses an HTTP response from a Locationsid2WithResponse call
func ParseLocationsid2Response(rsp *http.Response) (*Locationsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Locationsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string      `json:"messages,omitempty"`
			Payload  *interface{} `json:"payload,omitempty"`
			Status   *string      `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLocations1Response parses an HTTP response from a Locations1WithResponse call
func ParseLocations1Response(rsp *http.Response) (*Locations1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Locations1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLocationsidResponse parses an HTTP response from a LocationsidWithResponse call
func ParseLocationsidResponse(rsp *http.Response) (*LocationsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LocationsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseLocations3Response parses an HTTP response from a Locations3WithResponse call
func ParseLocations3Response(rsp *http.Response) (*Locations3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Locations3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMaintenancesResponse parses an HTTP response from a MaintenancesWithResponse call
func ParseMaintenancesResponse(rsp *http.Response) (*MaintenancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MaintenancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				Asset *struct {
					AssetTag *string `json:"asset_tag,omitempty"`
					Id       *int    `json:"id,omitempty"`
					Name     *string `json:"name,omitempty"`
				} `json:"asset,omitempty"`
				AssetMaintenanceTime *int    `json:"asset_maintenance_time,omitempty"`
				AssetMaintenanceType *string `json:"asset_maintenance_type,omitempty"`
				AvailableActions     *struct {
					Delete *bool `json:"delete,omitempty"`
					Update *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				CompletionDate *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"completion_date,omitempty"`
				Cost      *string `json:"cost,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id       *int `json:"id,omitempty"`
				Location *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Notes     *string `json:"notes,omitempty"`
				StartDate *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"start_date,omitempty"`
				Supplier *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"supplier,omitempty"`
				Title     *string `json:"title,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserId *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"user_id,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMaintenances1Response parses an HTTP response from a Maintenances1WithResponse call
func ParseMaintenances1Response(rsp *http.Response) (*Maintenances1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Maintenances1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMaintenancesidResponse parses an HTTP response from a MaintenancesidWithResponse call
func ParseMaintenancesidResponse(rsp *http.Response) (*MaintenancesidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MaintenancesidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				Asset *struct {
					SnipeitCpu4         *interface{} `json:"_snipeit_cpu_4,omitempty"`
					SnipeitImei1        *interface{} `json:"_snipeit_imei_1,omitempty"`
					SnipeitMacAddress5  *interface{} `json:"_snipeit_mac_address_5,omitempty"`
					SnipeitPhoneNumber2 *interface{} `json:"_snipeit_phone_number_2,omitempty"`
					SnipeitRam3         *interface{} `json:"_snipeit_ram_3,omitempty"`
					Accepted            *interface{} `json:"accepted,omitempty"`
					Archived            *int         `json:"archived,omitempty"`
					AssetTag            *string      `json:"asset_tag,omitempty"`
					AssignedTo          *interface{} `json:"assigned_to,omitempty"`
					AssignedType        *interface{} `json:"assigned_type,omitempty"`
					CheckinCounter      *int         `json:"checkin_counter,omitempty"`
					CheckoutCounter     *int         `json:"checkout_counter,omitempty"`
					CompanyId           *interface{} `json:"company_id,omitempty"`
					CreatedAt           *string      `json:"created_at,omitempty"`
					DeletedAt           *interface{} `json:"deleted_at,omitempty"`
					Depreciate          *interface{} `json:"depreciate,omitempty"`
					ExpectedCheckin     *interface{} `json:"expected_checkin,omitempty"`
					Id                  *int         `json:"id,omitempty"`
					Image               *interface{} `json:"image,omitempty"`
					LastAuditDate       *interface{} `json:"last_audit_date,omitempty"`
					LastCheckout        *interface{} `json:"last_checkout,omitempty"`
					LocationId          *int         `json:"location_id,omitempty"`
					ModelId             *int         `json:"model_id,omitempty"`
					Name                *interface{} `json:"name,omitempty"`
					NextAuditDate       *interface{} `json:"next_audit_date,omitempty"`
					Notes               *string      `json:"notes,omitempty"`
					OrderNumber         *string      `json:"order_number,omitempty"`
					Physical            *int         `json:"physical,omitempty"`
					PurchaseCost        *string      `json:"purchase_cost,omitempty"`
					PurchaseDate        *string      `json:"purchase_date,omitempty"`
					Requestable         *int         `json:"requestable,omitempty"`
					RequestsCounter     *int         `json:"requests_counter,omitempty"`
					RtdLocationId       *int         `json:"rtd_location_id,omitempty"`
					Serial              *string      `json:"serial,omitempty"`
					StatusId            *int         `json:"status_id,omitempty"`
					SupplierId          *int         `json:"supplier_id,omitempty"`
					UpdatedAt           *string      `json:"updated_at,omitempty"`
					UserId              *int         `json:"user_id,omitempty"`
					WarrantyMonths      *interface{} `json:"warranty_months,omitempty"`
				} `json:"asset,omitempty"`
				AssetId              *int         `json:"asset_id,omitempty"`
				AssetMaintenanceTime *interface{} `json:"asset_maintenance_time,omitempty"`
				AssetMaintenanceType *string      `json:"asset_maintenance_type,omitempty"`
				CompletionDate       *interface{} `json:"completion_date,omitempty"`
				Cost                 *interface{} `json:"cost,omitempty"`
				CreatedAt            *string      `json:"created_at,omitempty"`
				DeletedAt            *string      `json:"deleted_at,omitempty"`
				Id                   *int         `json:"id,omitempty"`
				IsWarranty           *int         `json:"is_warranty,omitempty"`
				Notes                *interface{} `json:"notes,omitempty"`
				StartDate            *string      `json:"start_date,omitempty"`
				SupplierId           *int         `json:"supplier_id,omitempty"`
				Title                *string      `json:"title,omitempty"`
				UpdatedAt            *string      `json:"updated_at,omitempty"`
				UserId               *int         `json:"user_id,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManufacturersResponse parses an HTTP response from a ManufacturersWithResponse call
func ParseManufacturersResponse(rsp *http.Response) (*ManufacturersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManufacturersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AccessoriesCount *int `json:"accessories_count,omitempty"`
				AssetsCount      *int `json:"assets_count,omitempty"`
				AvailableActions *struct {
					Delete  *bool `json:"delete,omitempty"`
					Restore *bool `json:"restore,omitempty"`
					Update  *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				ConsumablesCount *int `json:"consumables_count,omitempty"`
				CreatedAt        *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				DeletedAt     *interface{} `json:"deleted_at,omitempty"`
				Id            *int         `json:"id,omitempty"`
				Image         *string      `json:"image,omitempty"`
				LicensesCount *int         `json:"licenses_count,omitempty"`
				Name          *string      `json:"name,omitempty"`
				SupportEmail  *string      `json:"support_email,omitempty"`
				SupportPhone  *string      `json:"support_phone,omitempty"`
				SupportUrl    *string      `json:"support_url,omitempty"`
				UpdatedAt     *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				Url *string `json:"url,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManufacturers1Response parses an HTTP response from a Manufacturers1WithResponse call
func ParseManufacturers1Response(rsp *http.Response) (*Manufacturers1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Manufacturers1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseManufacturersid2Response parses an HTTP response from a Manufacturersid2WithResponse call
func ParseManufacturersid2Response(rsp *http.Response) (*Manufacturersid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Manufacturersid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseManufacturersid1Response parses an HTTP response from a Manufacturersid1WithResponse call
func ParseManufacturersid1Response(rsp *http.Response) (*Manufacturersid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Manufacturersid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseManufacturersidResponse parses an HTTP response from a ManufacturersidWithResponse call
func ParseManufacturersidResponse(rsp *http.Response) (*ManufacturersidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManufacturersidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseManufacturersid3Response parses an HTTP response from a Manufacturersid3WithResponse call
func ParseManufacturersid3Response(rsp *http.Response) (*Manufacturersid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Manufacturersid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsResponse parses an HTTP response from a ModelsWithResponse call
func ParseModelsResponse(rsp *http.Response) (*ModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseModels1Response parses an HTTP response from a Models1WithResponse call
func ParseModels1Response(rsp *http.Response) (*Models1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Models1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsid3Response parses an HTTP response from a Modelsid3WithResponse call
func ParseModelsid3Response(rsp *http.Response) (*Modelsid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modelsid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsidResponse parses an HTTP response from a ModelsidWithResponse call
func ParseModelsidResponse(rsp *http.Response) (*ModelsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModelsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsid2Response parses an HTTP response from a Modelsid2WithResponse call
func ParseModelsid2Response(rsp *http.Response) (*Modelsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modelsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseModelsid1Response parses an HTTP response from a Modelsid1WithResponse call
func ParseModelsid1Response(rsp *http.Response) (*Modelsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modelsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Status   *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseReportsactivityResponse parses an HTTP response from a ReportsactivityWithResponse call
func ParseReportsactivityResponse(rsp *http.Response) (*ReportsactivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportsactivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBackups1Response parses an HTTP response from a Backups1WithResponse call
func ParseBackups1Response(rsp *http.Response) (*Backups1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Backups1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBackupsdownloadfileResponse parses an HTTP response from a BackupsdownloadfileWithResponse call
func ParseBackupsdownloadfileResponse(rsp *http.Response) (*BackupsdownloadfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackupsdownloadfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsResponse parses an HTTP response from a StatuslabelsWithResponse call
func ParseStatuslabelsResponse(rsp *http.Response) (*StatuslabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatuslabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AssetsCount      *int `json:"assets_count,omitempty"`
				AvailableActions *struct {
					Delete *bool `json:"delete,omitempty"`
					Update *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Color     *interface{} `json:"color,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				Notes     *string `json:"notes,omitempty"`
				ShowInNav *bool   `json:"show_in_nav,omitempty"`
				Type      *string `json:"type,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabels1Response parses an HTTP response from a Statuslabels1WithResponse call
func ParseStatuslabels1Response(rsp *http.Response) (*Statuslabels1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Statuslabels1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				Archived   *int    `json:"archived,omitempty"`
				CreatedAt  *string `json:"created_at,omitempty"`
				Deployable *int    `json:"deployable,omitempty"`
				Id         *int    `json:"id,omitempty"`
				Name       *string `json:"name,omitempty"`
				Pending    *int    `json:"pending,omitempty"`
				UpdatedAt  *string `json:"updated_at,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsid1Response parses an HTTP response from a Statuslabelsid1WithResponse call
func ParseStatuslabelsid1Response(rsp *http.Response) (*Statuslabelsid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Statuslabelsid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsidResponse parses an HTTP response from a StatuslabelsidWithResponse call
func ParseStatuslabelsidResponse(rsp *http.Response) (*StatuslabelsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatuslabelsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AssetsCount      *int `json:"assets_count,omitempty"`
			AvailableActions *struct {
				Delete *bool `json:"delete,omitempty"`
				Update *bool `json:"update,omitempty"`
			} `json:"available_actions,omitempty"`
			Color     *interface{} `json:"color,omitempty"`
			CreatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"created_at,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			Notes     *string `json:"notes,omitempty"`
			ShowInNav *bool   `json:"show_in_nav,omitempty"`
			Type      *string `json:"type,omitempty"`
			UpdatedAt *struct {
				Datetime  *string `json:"datetime,omitempty"`
				Formatted *string `json:"formatted,omitempty"`
			} `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsid3Response parses an HTTP response from a Statuslabelsid3WithResponse call
func ParseStatuslabelsid3Response(rsp *http.Response) (*Statuslabelsid3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Statuslabelsid3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				Archived   *int    `json:"archived,omitempty"`
				CreatedAt  *string `json:"created_at,omitempty"`
				Deployable *int    `json:"deployable,omitempty"`
				Id         *int    `json:"id,omitempty"`
				Name       *string `json:"name,omitempty"`
				Pending    *int    `json:"pending,omitempty"`
				UpdatedAt  *string `json:"updated_at,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsid2Response parses an HTTP response from a Statuslabelsid2WithResponse call
func ParseStatuslabelsid2Response(rsp *http.Response) (*Statuslabelsid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Statuslabelsid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Messages *string `json:"messages,omitempty"`
			Payload  *struct {
				Archived   *int    `json:"archived,omitempty"`
				CreatedAt  *string `json:"created_at,omitempty"`
				Deployable *int    `json:"deployable,omitempty"`
				Id         *int    `json:"id,omitempty"`
				Name       *string `json:"name,omitempty"`
				Pending    *int    `json:"pending,omitempty"`
				UpdatedAt  *string `json:"updated_at,omitempty"`
			} `json:"payload,omitempty"`
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseStatuslabelsidassetlistResponse parses an HTTP response from a StatuslabelsidassetlistWithResponse call
func ParseStatuslabelsidassetlistResponse(rsp *http.Response) (*StatuslabelsidassetlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatuslabelsidassetlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSuppliersResponse parses an HTTP response from a SuppliersWithResponse call
func ParseSuppliersResponse(rsp *http.Response) (*SuppliersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuppliersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSuppliersidResponse parses an HTTP response from a SuppliersidWithResponse call
func ParseSuppliersidResponse(rsp *http.Response) (*SuppliersidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuppliersidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersResponse parses an HTTP response from a UsersWithResponse call
func ParseUsersResponse(rsp *http.Response) (*UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsers2Response parses an HTTP response from a Users2WithResponse call
func ParseUsers2Response(rsp *http.Response) (*Users2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Users2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersmeResponse parses an HTTP response from a UsersmeWithResponse call
func ParseUsersmeResponse(rsp *http.Response) (*UsersmeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersmeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersid1Response parses an HTTP response from a Usersid1WithResponse call
func ParseUsersid1Response(rsp *http.Response) (*Usersid1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Usersid1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersidResponse parses an HTTP response from a UsersidWithResponse call
func ParseUsersidResponse(rsp *http.Response) (*UsersidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsers3Response parses an HTTP response from a Users3WithResponse call
func ParseUsers3Response(rsp *http.Response) (*Users3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Users3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersid2Response parses an HTTP response from a Usersid2WithResponse call
func ParseUsersid2Response(rsp *http.Response) (*Usersid2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Usersid2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersidaccessoriesResponse parses an HTTP response from a UsersidaccessoriesWithResponse call
func ParseUsersidaccessoriesResponse(rsp *http.Response) (*UsersidaccessoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersidaccessoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				Company   *interface{} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				Id       *int    `json:"id,omitempty"`
				Image    *string `json:"image,omitempty"`
				Location *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"location,omitempty"`
				Manufacturer *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				MinQty       *int         `json:"min_qty,omitempty"`
				ModelNumber  *string      `json:"model_number,omitempty"`
				Name         *string      `json:"name,omitempty"`
				Notes        *interface{} `json:"notes,omitempty"`
				OrderNumber  *interface{} `json:"order_number,omitempty"`
				PurchaseCost *interface{} `json:"purchase_cost,omitempty"`
				PurchaseDate *interface{} `json:"purchase_date,omitempty"`
				Qty          *int         `json:"qty,omitempty"`
				RemainingQty *int         `json:"remaining_qty,omitempty"`
				Supplier     *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"supplier,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersidassetsResponse parses an HTTP response from a UsersidassetsWithResponse call
func ParseUsersidassetsResponse(rsp *http.Response) (*UsersidassetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersidassetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUsersidlicensesResponse parses an HTTP response from a UsersidlicensesWithResponse call
func ParseUsersidlicensesResponse(rsp *http.Response) (*UsersidlicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersidlicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rows *[]struct {
				AvailableActions *struct {
					Checkin  *bool `json:"checkin,omitempty"`
					Checkout *bool `json:"checkout,omitempty"`
					Clone    *bool `json:"clone,omitempty"`
					Delete   *bool `json:"delete,omitempty"`
					Update   *bool `json:"update,omitempty"`
				} `json:"available_actions,omitempty"`
				Category *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"category,omitempty"`
				Company   *interface{} `json:"company,omitempty"`
				CreatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"created_at,omitempty"`
				ExpirationDate *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"expiration_date,omitempty"`
				FreeSeatsCount *int    `json:"free_seats_count,omitempty"`
				Id             *int    `json:"id,omitempty"`
				LicenseEmail   *string `json:"license_email,omitempty"`
				LicenseName    *string `json:"license_name,omitempty"`
				Maintained     *bool   `json:"maintained,omitempty"`
				Manufacturer   *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"manufacturer,omitempty"`
				Name         *string `json:"name,omitempty"`
				Notes        *string `json:"notes,omitempty"`
				OrderNumber  *string `json:"order_number,omitempty"`
				ProductKey   *string `json:"product_key,omitempty"`
				PurchaseCost *string `json:"purchase_cost,omitempty"`
				PurchaseDate *struct {
					Date      *string `json:"date,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"purchase_date,omitempty"`
				PurchaseOrder *string `json:"purchase_order,omitempty"`
				Seats         *int    `json:"seats,omitempty"`
				Supplier      *struct {
					Id   *int    `json:"id,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"supplier,omitempty"`
				UpdatedAt *struct {
					Datetime  *string `json:"datetime,omitempty"`
					Formatted *string `json:"formatted,omitempty"`
				} `json:"updated_at,omitempty"`
				UserCanCheckout *bool `json:"user_can_checkout,omitempty"`
			} `json:"rows,omitempty"`
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
